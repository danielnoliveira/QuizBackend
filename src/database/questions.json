[
	{
		"enunciation": " Padrões de Projeto têm sido utilizados com grande sucesso em programação de software, apresentando vantagens, desvantagens e possuindo características próprias. Duas características dos padrões de projeto são: ",
		"options": [
			"melhora a criatividade e aumenta o tamanho dos códigos. ",
			"reduz o tamanho dos códigos e diminui a eficiencia. ",
			"favorece a reusabilidade e melhora a produtividade. ",
			"diminui a produtividade dificulta a reusabilidade. ",
			"aumenta a eficiência e prejudica a criatividade. "
		],
		"answer": "C"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">O texto a seguir contém a definição de um dos chamados <span style=\"font-style: italic;\">padrões de projeto</span> (<span style=\"font-style: italic;\">design pattern</span>) GoF: </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-style: italic;\">“Uma maneira de notificar mudanças de estado para um grupo de objetos interessados nessas mudanças. Define uma dependência um para muitos entre objetos de modo que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente. Este é um padrão comportamental.” </span></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Este padrão é denominado </p> ",
		"options": [
			"<span style=\"font-style: italic;\">state</span>. ",
			"<span style=\"font-style: italic;\">observer. </span>",
			"<span style=\"font-style: italic;\">memento. </span>",
			"<span style=\"font-style: italic;\">iterator. </span>",
			"<span style=\"font-style: italic;\">strategy.</span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " Os padrões de projeto de software são classificados de acordo com a funcionalidade. Assim, eles podem ser de criação, estrutural e comportamental. Assinale a alternativa que contém um exemplo de padrão de cada tipo. ",
		"options": [
			"Adapter, Bridge e Composite.",
			"Factory Method, Prototype e Interpreter. ",
			"Prototype, Singleton e Adapter. ",
			"Builder, Bridge e Observer.",
			"Façade, Bridge e Iterator."
		],
		"answer": "D"
	},
	{
		"enunciation": " A partir dos fundamentos da Engenharia de <span style=\"font-style: italic;\">Software </span>e dos padrões <span style=\"font-style: italic;\">General Responsibility Assignment Software Patterns [or Principles]</span> (GRASP), assinale a alternativa <span style=\"font-weight: bold;\">INCORRETA</span>. ",
		"options": [
			"São exemplos de padrões GRASP: <span style=\"font-style: italic;\">Factory Method, High Cohesion, Low Coupling, Polymorphism </span>e <span style=\"font-style: italic;\">Pure Fabrication. </span>",
			"Os padrões GRASP servem para a resolução de problemas comuns e típicos de desenvolvimento de <span style=\"font-style: italic;\">software</span>. Essas técnicas documentam e normatizam as práticas já conhecidas, consolidadas e testadas no mercado. ",
			"Os padrões GRASP visam descrever princípios de fundamental importância para a atribuição de responsabilidades em projetos de <span style=\"font-style: italic;\">software </span>não orientados a objetos. ",
			"Os padrões GRASP podem ser caracterizados como uma filosofia de <span style=\"font-style: italic;\">design </span>ou mesmo uma ferramenta mental que são úteis para o desenvolvimento e o aprendizado de um bom design de <span style=\"font-style: italic;\">software</span>. "
		],
		"answer": "C"
	},
	{
		"enunciation": " Sobre a lista de <i>design patterns</i> no padrão GoF, é correto afirmar: ",
		"options": [
			"<span style=\"font-style: italic;\">Decorator</span> é um padrão comportamental que categoriza um objeto para fornecer novos comportamentos. ",
			"<i>Visitor</i> é um padrão comportamental que encapsula uma solicitação como um objeto. ",
			"<span style=\"font-style: italic;\">Abstract Factory</span> é um padrão estrutural que permite criar novas instâncias simplesmente copiando instâncias existentes. ",
			"<span style=\"font-style: italic;\">Iterator </span>é um padrão comportamental que fornece uma maneira de acessar sequencialmente uma coleção de objetos sem expor a sua implementação. ",
			"<span style=\"font-style: italic;\">State</span> é um padrão criacional que centraliza operações complexas de comunicação e controle entre objetos relacionados. "
		],
		"answer": "D"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Padrões de Projeto são descrições dos problemas e suas soluções. Essas soluções devem ter a possibilidade de serem reusadas em diferentes tipos de contextos. Também pode-se definir padrões de projetos como soluções já aprovadas para problemas comuns que foram criados a partir do conhecimento e, principalmente, da experiência. Assinale a alternativa que NÃO apresenta um padrão de projeto reconhecido. </span> ",
		"options": [
			"Abstract Factory.",
			"Primitive Operation.",
			"Singleton.",
			"Adapter.",
			"Template Method."
		],
		"answer": "B"
	},
	{
		"enunciation": " Design Patterns <br> Design Patterns A design pattern is often posed as a question: how do we solve some design problem? However a design problem is, by its nature, nonspecific, and rarely has a single straight-forward answer. There might be several ways to solve the same problem, some better than others depending on the specific situation and the specific context of the problem. A design pattern is intended to share not just solutions but a better understanding of both the problem and how it might be solved. <br> Firstly, patterns have a well-defined structure. This consistent layout makes it easy to browse through a collection of patterns to find relevant help and then dive further into the material. The structure encourages the author of the pattern to think carefully about the knowledge they're sharing, whilst making the material more consistently accessible to a reader. <br> Secondly, unlike a tutorial or recipe which typically guides you through a single approach to solving a problem, patterns encourage discussion of related and complementary approaches. Design decisions are rarely clear cut, so it can be useful to understand the context in which a decision is made and the resulting trade-offs. Communicating these nuances is how we share knowledge rather than just fixes for a problem. <br> Consider the following sentence from the text: “<b><u>Design decisions are rarely clear cut</u></b>, so it can be useful to understand the context in which a decision is made and the resulting trade-offs”. Taking into consideration the underlined excerpt from the sentence, it is correct to say that design decisions are: ",
		"options": [
			"quite often taken for granted. ",
			"sometimes accepted without question. ",
			"occasionally taken into account. ",
			"exceptionally discussed. ",
			"seldom free from ambiguity. "
		],
		"answer": "E"
	},
	{
		"enunciation": " Com relação a padrões de projeto e GRASP, julgue o próximo item. <br> Em um cenário em que é necessário minimizar dependências e maximizar o reúso, bem como atribuir uma responsabilidade para que o acoplamento mantenha-se fraco, o padrão Expert é mais adequado que o padrão <i>Low Coupling</i>. <br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Com relação a padrões de projeto e GRASP, julgue o próximo item. <br> <br> O padrão de projeto <i>Strategy </i>contém um objeto <i>strategy </i>que é análogo ao objeto state do padrão de projeto <i>State</i>. Contudo, o primeiro objeto encapsula um algoritmo, enquanto o segundo encapsula informações sobre o estado de um objeto. <br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com relação a padrões de projeto e GRASP, julgue o próximo item. <br> Enquanto os padrões GRASP refletem práticas mais pontuais da aplicação de técnicas orientadas a objetos, os padrões de projeto GoF (<i>Gang of Four</i>) exploram soluções mais específicas. Dessa forma, não há, no GRASP, um padrão que ajude a solucionar, por exemplo, a definição de qual classe deve ser a responsável por lidar com um evento de determinada interface. <br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Com relação às finalidades e características dos Padrões de Projeto, assinale a opção que apresenta dois padrões de Projeto Comportamentais. ",
		"options": [
			"Adapter e Command <br>",
			"Template Method e State <br>",
			"Observer e Composite <br>",
			"Chain of Responsability e Flyweight"
		],
		"answer": "B"
	},
	{
		"enunciation": " Sobre as definições de Design <i>Patterns </i>(Padrões de Desenvolvimento de Software) e suas principais aplicações, analise as afirmativas abaixo e assinale a alternativa correta. I. São soluções generalistas para problemas recorrentes durante o desenvolvimento de um software. II. Trata de um framework ou um código pronto. III. É uma definição de alto nível de como um problema comum pode ser solucionado. ",
		"options": [
			"Apenas a afirmativa II está correta",
			"Apenas a afirmativa I está correta",
			"Apenas as afirmativas I e III estão corretas",
			"Apenas as afirmativas I e II estão corretas"
		],
		"answer": "C"
	},
	{
		"enunciation": " A engenharia de software provê várias metodologias, técnicas e ferramentas de apoio para garantir que os recursos alocados ao desenvolvimento de software leve a resultados que tenham um nível de qualidade controlado e atendam a especificações de requisitos técnicos. Acerca do emprego da engenharia de software e suas metodologias e ferramentas no desenvolvimento de aplicações e bancos de dados, julgue o item a seguir. <br> Um padrão de projeto (design pattern) na unified modelling language é um tipo de artefato adotado sistematicamente por uma equipe de desenvolvimento em todos os seus projetos de software ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " “Padrões de Projeto são descrições de objetos e classes comunicantes que precisam ser personalizadas para resolver um problema geral de projeto em um contexto particular. <br> Esses padrões podem ter finalidade de criação, estrutural ou comportamental”. Erich Gamma <br> Acerca das finalidades e características dos Padrões de Projeto, assinale a opção correta. ",
		"options": [
			"Os padrões estruturais se preocupam com o processo de concepção de objetos. <br>",
			"Os padrões de criação se preocupam com o processo de composição de classes e objetos. .<br>",
			"Os padrões comportamentais caracterizam as maneiras pelas quais classes ou objetos interagem, incluindo a distribuição de responsabilidades. <br>",
			"Todos os padrões de Projeto aplicam-se primariamente aos objetos"
		],
		"answer": "C"
	},
	{
		"enunciation": " É um padrão de projeto usado para criar um objeto sem expor a lógica de sua criação ao cliente, buscando o uso de interfaces comuns. ",
		"options": [
			"<span style=\"font-style: italic;\">Singleton</span>",
			"<span style=\"font-style: italic;\">Factory</span>",
			"<span style=\"font-style: italic;\">Iterator</span>",
			"<span style=\"font-style: italic;\">Memento</span>",
			"<span style=\"font-style: italic;\">Adapter</span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " A intenção do padrão de projeto <span style=\"font-style: italic;\">Abstract Factory</span> é ",
		"options": [
			"definir uma interface para a criação de um objeto, deixando as subclasses decidirem que classe instanciar. Delega a instanciação para as subclasses. ",
			"converter a interface de uma classe na interface esperada pelos clientes. Permite que classes com interfaces incompatíveis trabalhem em conjunto.",
			"fornecer uma interface para a criação de famílias de objetos relacionados ou dependentes sem especificar suas classes completas. ",
			"garantir que uma classe tenha somente uma instância e fornecer um ponto global de acesso à mesma. ",
			"separar a construção de um objeto complexo de sua representação, de modo que o mesmo processo de construção possa criar diferentes representações. "
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Com base no modelo SOLID utilizado como referência para padrões de projeto e princípios arquiteturais, um dos seus princípios denominados de LSP (<span style=\"font-style: italic;\">Liskov substitution principle</span>) diz respeito ao fato de que </span> ",
		"options": [
			"uma classe deve ter apenas uma razão para mudar, sendo coesa.",
			"os objetos devem ser substituíveis com instâncias de seus tipos base, sem prejudicar o funcionamento do software. ",
			"todo o processo de desenvolvimento de software deve ser baseado em abstrações, já que elas pouco mudam.",
			"deve-se utilizar o conceito de herança o máximo possível, estendendo para todo e qualquer atributo que possua alguma semelhança.",
			"os módulos devem ser enxutos tendo poucos comportamentos."
		],
		"answer": "B"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Em relação aos padrões de projeto de software e princípios arquiteturais, em programação orientada a objetos, existe um princípio denominado de SOLID. Ele, por sua vez, é composto por 05 princípios de acordo com as suas iniciais, sendo eles:</span> ",
		"options": [
			"S (Single responsibility principle) – O (Openclosed principle) – L (Liskov substitution principle) – I (Interface segregation principle) e D (Dependency inversion principle).",
			"S (Solid principle) – O (Open principle) – L (Library principle) – I (Integration principle) – D (Double principle).",
			"S (Security closed principle) – O (Open extend principle) – L (Liskov include principle) – I (Interface duplication principle) – D (Duplicate structure principle).",
			"S (Single closed principle) – O (Open-closed principle) – L (Library exclusive principle) – I (Integration case principle) – D (Dependency inversion principle).",
			"S (Security basic principle) – O (Open extern principle) – L (Liskov include principle) – I (Interface duplication principle) – D (Duplicate segregation principle)."
		],
		"answer": "A"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Supõe-se que, ao desenvolver um software, é possível se deparar com uma barreira na hora de fazer a ligação com o banco de dados, pois ele só pode ter uma única instância, visto que é necessário manter a integridade da aplicação. Para esse caso, pode-se utilizar os padrões de projeto, para garantir que uma classe tenha apenas uma instância de si mesma e que forneça um ponto global de acesso a ela. Assim, uma classe gerencia a própria instância dela, além de evitar que qualquer outra classe crie uma instância dela. Assinale a alternativa que apresenta o Padrão de Projeto que possui essas características. </span> ",
		"options": [
			"Singleton.",
			"Façade.",
			"Abstract Factory.",
			"Adapter.",
			"Observer."
		],
		"answer": "A"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Padrões de Projeto possibilitam retrabalhar os códigos antigos reduzindo problemas anteriormente, pois nos dizem como resolver problemas. Supomos que Pedro foi contratado para desenvolver um software para uma estação meteorológica que deve fornecer os dados de temperatura, umidade e pressão para outras classes que são responsáveis para apresentar dados aos usuários, apresentar dados em tela e realizar cálculos com dados meteorológicos. Essas classes precisam saber quando os valores aferidos pela estação forem alterados. Assinale a alternativa que apresenta o Padrão de Projeto correto a ser usado nesse caso para avisar as demais classes sobre a mudança de estados de um objeto.</span> ",
		"options": [
			"Adapter.",
			"Bridge.",
			"Builder.",
			"Singleton.",
			"Observer."
		],
		"answer": "E"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">O padrão de desenvolvimento de uma API RESTfull trabalha em cima do conceito de criação e manipulação de recursos. Esses recursos, basicamente, são entidades da aplicação utilizadas para consultas, cadastros, atualização e exclusão de dados, ou seja, tudo é baseado em manipular os dados de um recurso. Uma API tem como objetivo tratar e unificar esses dados para, no final, construir e apresentar um recurso. Sabendo disso, Lúcia está implementando uma API REST usando NodeJS e esta possui muitos endpoints, então não será uma boa prática implementar todos eles no index.js. Para resolver esse problema, é importante o uso de um padrão de projeto que tem como objetivo organizar os códigos de acordo com suas responsabilidades. Assinale a alternativa que apresenta o padrão de projeto que tem essas características e deve ser utilizado nesse caso. </span> ",
		"options": [
			"Model View Router.",
			"Model View Controller.",
			"Model View ViewModel.",
			"Model View Model.",
			"Model View Presenter."
		],
		"answer": "A"
	},
	{
		"enunciation": " Um certo padrão de projeto (<span style=\"font-style: italic;\">design pattern</span>), em Engenharia de <span style=\"font-style: italic;\">Software</span>, consiste em definir o esqueleto de um algoritmo em uma operação, delegando alguns de seus passos a subclasses. Essas subclasses redefinem esses passos sem alterar a estrutura do algoritmo. <br> Esse padrão de projeto é conhecido como ",
		"options": [
			"<span style=\"font-style: italic;\">Template Method.</span>",
			"<span style=\"font-style: italic;\">Singleton</span>",
			"<span style=\"font-style: italic;\">Strategy</span>",
			"<span style=\"font-style: italic;\">Chain of Responsibility</span>",
			"<span style=\"font-style: italic;\">Command.</span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Os padrões de projeto denominados GoF (<span style=\"font-style: italic;\">Gang of Four</span>) são divididos em um grande número de tipos. Em função dessa grande quantidade de padrões, foi necessário classificá-los em três famílias/classificações. Assinale a alternativa que as apresenta.</span> ",
		"options": [
			"Padrões de Concepção (<span style=\"font-style: italic;\">conception</span>), Padrões Organizacionais (<span style=\"font-style: italic;\">organizational</span>) e Padrões Normativos (<span style=\"font-style: italic;\">normative</span>)",
			"Padrões de Concepção (<span style=\"font-style: italic;\">conception</span>), Padrões Organizacionais (<span style=\"font-style: italic;\">organizational</span>) e Padrões Comportamentais (<span style=\"font-style: italic;\">behavioral</span>)",
			"Padrões de Criação (<span style=\"font-style: italic;\">creational</span>), Padrões Estruturais (<span style=\"font-style: italic;\">structural</span>) e Padrões Normativos (<span style=\"font-style: italic;\">normative</span>)",
			"Padrões de Criação (<span style=\"font-style: italic;\">creational</span>), Padrões Estruturais (<span style=\"font-style: italic;\">structural</span>) e Padrões Comportamentais (<span style=\"font-style: italic;\">behavioral</span>)"
		],
		"answer": "D"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\"><span style=\"color: rgb(0, 0, 0); \">Considere os seguintes objetivos de padrões de projeto. </span></p><p style=\"text-align: justify; \"><span style=\"color: rgb(0, 0, 0); \">1. Separa a construção de um objeto complexo da sua representação, de forma que o mesmo processo de construção possa criar diferentes representações, ou seja, serve para encapsular a construção de um produto e permitir que ele seja construído em etapas.</span></p><p style=\"text-align: justify; \"><span style=\"color: rgb(0, 0, 0); \"> 2. Atribui responsabilidades adicionais a um objeto dinamicamente. Ele fornece uma alternativa flexível a subclasses para a extensão da funcionalidade, ou seja, envelopa um objeto para fornecer novos comportamentos. </span></p><p style=\"text-align: justify; \"><span style=\"color: rgb(0, 0, 0); \">3. Usa compartilhamento para dar suporte a vários objetos de forma eficiente, ou seja, permite que uma instância de uma classe possa ser usada para fornecer muitas “instâncias virtuais”. </span></p><p style=\"text-align: justify; \"><span style=\"color: rgb(0, 0, 0); \">4. Torna possível salvar o estado de um objeto de modo que o mesmo possa ser restaurado, ou seja, permite restaurar um objeto a um dos seus estados prévios, por exemplo, quando o usuário seleciona um “desfazer”. </span></p><p style=\"text-align: justify; \"><span style=\"color: rgb(0, 0, 0); \">Correspondem, correta e respectivamente, aos objetivos de padrões de projeto:</span></p> ",
		"options": [
			"<span style=\"color: rgb(0, 0, 0); \">Factory Method, Decorator, Facade e Memento.</span>",
			"<span style=\"color: rgb(0, 0, 0); \">Adapter, Mediator, Facade e Builder.</span>",
			"<span style=\"color: rgb(0, 0, 0); \">Builder, State, Mediator e Adapter.</span>",
			"<span style=\"color: rgb(0, 0, 0); \">Builder, Decorator, Flyweight e Memento.</span>",
			"<span style=\"color: rgb(0, 0, 0); \">Decorator, Factory Method, Abstract Factory e State.</span>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Assinale a opção que apresenta o padrão de arquitetura de<span style=\"font-style: italic;\"> software</span> que, no âmbito DDD (<span style=\"font-style: italic;\">domain driven design</span>), é uma implementação do padrão para ajudar a prototipar, desenvolver e implantar rapidamente aplicativos orientados a domínio. ",
		"options": [
			"<span style=\"font-style: italic;\">client/server architecture</span>",
			"<span style=\"font-style: italic;\">federal enterprise architecture </span>",
			"<span style=\"font-style: italic;\">service-oriented architecture</span>",
			"<span style=\"font-style: italic;\">Java persistence architecture</span>",
			"<span style=\"font-style: italic;\">naked object</span>"
		],
		"answer": "E"
	},
	{
		"enunciation": " <b>“Um padrão de projeto corresponde a um esboço de uma solução reusável para um problema comumente encontrado em um contexto particular.” Diversos padrões são conhecidos, sendo que três categorias foram definidas pela equipe GoF (<span style=\"font-style: italic;\">Gang of Four</span> – por serem quatro autores, que são Eric Gamma e seus colaboradores (<span style=\"font-style: italic;\">GAMMA et al, 2000))</span>, a saber: criacionais, estruturais e comportamentais. Um desses padrões “pode ser utilizado para solucionar o problema de representar uma hierarquia de composição recursiva entre entidades”. Assinale-o.</b> ",
		"options": [
			"Strategy.",
			"Observer.",
			"Composite.",
			"Factory Method."
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\" font-weight: bold;\">Os padrões de projetos (</span><span style=\" font-weight: bold; font-style: italic;\">Design Patterns</span><span style=\" font-weight: bold;\">) são compostos basicamente por 4 elementos essenciais que são:</span> ",
		"options": [
			"Nome do software + Problema a ser resolvido + Solução dada pelo padrão + Tempo de desenvolvimento",
			"Nome do padrão + Problema a ser resolvido + Solução dada pelo padrão + Consequências",
			"Nome do software + Problema a ser resolvido + Planejamento das atividades + Consequências",
			"Nome do padrão + Problema a ser resolvido + Planejamento das atividades + Tempo de desenvolvimento"
		],
		"answer": "B"
	},
	{
		"enunciation": " A programação reativa, abordagem que está em crescente adoção para o desenvolvimento de aplicações Web e Mobile, tem seu principal conceito centrado em um padrão de projeto. Assinale a alternativa que identifica esse padrão. ",
		"options": [
			"Adapter",
			"Observer",
			"Façade",
			"Singleton",
			"Builder"
		],
		"answer": "B"
	},
	{
		"enunciation": " Conforme os Padrões de Projeto do “Gang of Four” (GoF), assinale a definição correta do padrão <span style=\"font-style: italic;\">Adapter</span>: ",
		"options": [
			"Converte a interface de uma classe em outra interface que os clientes esperam, permitindo que as classes trabalhem juntas. ",
			"Desacopla uma abstração de sua implementação para que as duas possam variar independentemente. ",
			"Define um objeto que encapsula a maneira como um conjunto de objetos interage.",
			"Fornece um substituto ou espaço reservado para outro objeto para controlar o acesso a ele. ",
			"Anexa responsabilidades adicionais a um objeto, dinamicamente."
		],
		"answer": "A"
	},
	{
		"enunciation": " A análise e padrão de projeto visa solucionar um problema de design recorrente que surge em uma situação de design específica. Sobre padrões de projeto, é correto afirmar que: ",
		"options": [
			"o padrão de projeto “UML 2.0” visa solucionar problemas na arquitetura de um sistema, utilizando um enfoque baseado em casos de uso.",
			"o modelo e notação BPMN visa mapear os processos de um negócio, incluindo eventos, gateways, estrutura organizacional e modelos de dados.",
			"padrões de projeto expressam uma organização fundamental de um software, partindo de um modelo que indica as classes ligadas ao domínio do problema (Domain Model). ",
			"o padrão MVC divide a arquitetura do sistema em três partes: a lógica relacionada a dados (model); a visualização e interface gráfica (view); e os processos de negócio (controller). Esse padrão é indicado quando a interface pode mudar mais frequentemente que seu domínio.",
			"os padrões de design do tipo “controle de acesso”, como o padrão Proxy, visam oferecer tolerância a falha, acurácia computacional aos serviços, bem como organização dos serviços em diferentes partes paralelizáveis."
		],
		"answer": "D"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">O software que controla a venda de títulos privados de um banco de investimentos tem de ser flexível o suficiente para acomodar as variações nos procedimentos de venda de CDBs, letras de câmbio e debêntures. Entretanto, a sequência na qual esses procedimentos são executados é a mesma para todos os tipos de títulos. Sendo assim, os projetistas desse software adotaram o design descrito a seguir. </p><p style=\"text-align: justify; \">Em primeiro lugar, criaram uma classe abstrata contendo um método concreto, chamado compra(), que implementa a sequência de execução dos procedimentos, que é comum a todos os tipos de títulos, mas deixaram em aberto, por meio de métodos abstratos, a implementação de cada procedimento. Essa classe, chamada TituloPrivado, é mostrada a seguir.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/65861/49688521cfcd5f0fe4cc.png\"><br></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">O passo seguinte foi criar subclasses específicas para cada um dos três tipos de títulos. Cada subclasse implementa os seus próprios procedimentos, por meio da concretização dos métodos abstratos da classe TituloPrivado. Isso é exemplificado pela classe Debenture, mostrada a seguir.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/65861/8e2f6eb9e3be030dae4d.png\"><br></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">A realização de uma compra será feita por meio da instanciação de uma das subclasses concretas da classe TituloPrivado e da posterior execução do método compra(), que irá acionar os métodos que implementam os procedimentos específicos do tipo de título instanciado. </p><p style=\"text-align: justify; \">Qual padrão de projeto foi empregado nesse design?<br></p><p style=\"text-align: justify; \"><br></p> ",
		"options": [
			"Prototype",
			"Template Method",
			"Interpreter",
			"Composite",
			"Proxy"
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Deseja-se implementar uma solução para o desenvolvimento de um <span style=\"font-style: italic;\">display</span>, o qual mostra o estado de um objeto X a partir do objeto em si, utilizando-se padrão de projeto. <span style=\"font-style: italic;\">Displays </span>alternativos são fornecidos, e a necessidade principal é que todos eles sejam automaticamente notificados e atualizados para refletir a mudança ocorrida quando o estado do objeto mudar. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Para resolver esse problema, é mais adequado o uso do padrão</p> ",
		"options": [
			"Observer.",
			"Facade.",
			"Adapter.",
			"Iterator.",
			"Visitor."
		],
		"answer": "A"
	},
	{
		"enunciation": " O diagrama apresenta a descrição de um <span style=\"font-style: italic;\">design pattern</span> GoF. Esse padrão usa as interfaces genéricas para criar os objetos concretos que fazem parte da família de objetos. O cliente não sabe ou não se importa com quais objetos concretos obtém de cada PatternConcreto, pois usa apenas as interfaces genéricas de seus produtos. Esse <span style=\"font-style: italic;\">design pattern</span> de criação separa detalhes da implementação de um conjunto de objetos de seu uso e é denominado ",
		"options": [
			"<span style=\"font-style: italic;\">Strategy. </span>",
			"<span style=\"font-style: italic;\">Façade.</span>",
			"<span style=\"font-style: italic;\">Interpreter.</span>",
			"<span style=\"font-style: italic;\">Builder. </span>",
			"<span style=\"font-style: italic;\">Abstract Factory.</span>"
		],
		"answer": "E"
	},
	{
		"enunciation": " Assinale a opção que apresenta os três grupos em que se segmentam os <span style=\"font-style: italic;\">Design Patterns</span>. ",
		"options": [
			"padrões de criação, padrões estruturais e padrões comportamentais",
			"padrões de análise, padrões estruturais e padrões comportamentais",
			"padrões de criação, padrões de construção e padrões comportamentais",
			"padrões de criação, padrões estruturais e padrões de construção",
			"padrões de análise, padrões de construção e padrões comportamentais"
		],
		"answer": "A"
	},
	{
		"enunciation": " Padrões de projeto são técnicas adotadas com o objetivo de estruturar a implementação de um sistema seguindo princípios preestabelecidos. Na implementação de um sistema fictício, foi detectado que o custo de criação de quaisquer objetos é muito alto. Dessa forma, cada objeto somente deve ser instanciado no momento em que ele é realmente necessário. Nesse caso, qual deve ser o padrão de projeto utilizado? ",
		"options": [
			"Facade ",
			"Mock Object ",
			"Singleton ",
			"Lazy Loading ",
			"Method Chaining "
		],
		"answer": "D"
	},
	{
		"enunciation": " Uma Analista de TI quer criar um aplicativo capaz de trocar mensagens entre diversas plataformas móveis, um Android enviando mensagem para um iOS, um Windows Phone trocando mensagens com um Android etc. O problema é que cada uma destas plataformas implementa maneiras diferentes de receber mensagens. Ela sabe que criar vários métodos para cada plataforma não seria uma solução adequada, pois, se o aplicativo precisar incluir uma nova plataforma, outros métodos teriam que ser criados. A modelagem de relacionamentos muitos para muitos pode deixar o projeto do sistema demasiadamente complexo. A Analista procurou, então, um padrão de projeto para utilizar na solução. Dentre os padrões GoF, encontrou um que permite definir um objeto que encapsula a forma como um conjunto de objetos interage. Este padrão promove o acoplamento fraco ao evitar que os objetos se refiram uns aos outros explicitamente e permite variar o uso da interação de forma independente. Atua como um interlocutor entre relacionamentos muitos para muitos, ao evitar uma referência explícita aos objetos, sendo adequado ao problema. Trata-se do padrão comportamental ",
		"options": [
			"<span style=\"font-style: italic;\">Mediator. </span>",
			"<span style=\"font-style: italic;\">Composite. </span>",
			"<span style=\"font-style: italic;\">Adapter. </span>",
			"<span style=\"font-style: italic;\">Factory Method. </span>",
			"<span style=\"font-style: italic;\">Prototype. </span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">“Os padrões de projetos tornam mais fácil reutilizar soluções e arquiteturas bem-sucedidas para construir softwares orientados a objetos de forma flexível e fácil de manter.” </p><p style=\"text-align: justify; \"><span style=\"font-style: italic;\">Disponível em: https://www.devmedia.com.br/conheca-os-padroes-de-projeto/957/. Acesso em: 16.11.2018 </span></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Quais padrões de projeto são padrões de projeto comportamentais? </p> ",
		"options": [
			"Command, Observer e Interator.",
			"Singleton, Visitor e State.",
			"Prototype, Adapter e Bridge.",
			"Memento, Builder e Mediator.",
			"Proxy, Singleton e Decorator."
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">“Em 1995 Erich Gama, Richard Helm, Ralph Johnson, John Vlissides, conhecidos como os quatro amigos [Gang of Four - GoF], publicaram o livro sobre o título: “Design patterns – elements of reusable object-oriented software, Addison Wesley Longman”, que ganhou uma versão na língua portuguesa sobre o título de “Padrões de Projeto – Soluções reutilizáveis de software orientado a objetos. Bookman”. </p><p style=\"text-align: justify; \"><span style=\"font-style: italic;\">Disponível em: https://www.devmedia.com.br/conheca-os-padroes-de-projeto/957. Acesso em: 13.12.2018</span></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"> Qual padrão de projeto tem o propósito de assegurar o controle da quantidade de instâncias da classe?</p> ",
		"options": [
			"Singleton.",
			"Façade.",
			"Proxy. ",
			"MVC.",
			"Command."
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">“Os padrões de projetos tornam mais fácil reutilizar soluções e arquiteturas bem-sucedidas para construir softwares orientados a objetos de forma flexível e fácil de manter.” </p><p style=\"text-align: justify; \"><span style=\"font-style: italic;\">Disponível em: https://www.devmedia.com.br/conheca-os-padroes-de-projeto/957. Acesso em: 13.12.2018</span></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"> Qual o propósito do padrão de projeto Observe?</p> ",
		"options": [
			"Dependência de um-para-muitos entre objetos: Quando um objeto muda de estado, todos seus dependentes são notificados e atualizados automaticamente.",
			"Mediador entre as aplicações e a base de dados.",
			"Executar pré e pós-processamentos de algum processamento.",
			"Prover interface unificada para conjunto de interfaces em um subsistema.",
			"Define interface de alto-nível: Subsistema mais fácil de usar. "
		],
		"answer": "A"
	},
	{
		"enunciation": " Julgue o próximo item, a respeito de <span style=\"font-style: italic;\">domain-driven design</span>, <span style=\"font-style: italic;\">design pattern</span>s, <span style=\"font-style: italic;\">emergent design</span>, <span style=\"font-style: italic;\">enterprise content management</span> e REST. <br> O uso de <span style=\"font-style: italic;\">design patterns</span> leva à unificação dos códigos utilizados em diferentes aplicações que utilizem o mesmo padrão. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Analise o cenário a seguir. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Um técnico de TI está desenvolvendo uma aplicação onde existe um objeto X que contém informações importantes para outros objetos, de forma de que quando o valor do objeto X mudar, os outros objetos deverão ser notificados dessa alteração. Além disso, ele precisa especificar uma sequência de etapas em uma classe, onde algumas dessas etapas deverão ser delegadas para as subclasses. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Quais os dois padrões de projetos que podem ser empregados nesse cenário?</p> ",
		"options": [
			"<span style=\"font-style: italic;\">Adapter</span> e <span style=\"font-style: italic;\">Iterator</span>",
			"<span style=\"font-style: italic;\">Command</span> e <span style=\"font-style: italic;\">Visitor</span>",
			"<span style=\"font-style: italic;\">Builder</span> e <span style=\"font-style: italic;\">Composite</span>",
			"<span style=\"font-style: italic;\"> Observer</span> e <span style=\"font-style: italic;\">Template Method</span>",
			"<span style=\"font-style: italic;\">Factory Method </span>e <span style=\"font-style: italic;\">Abstract Factory</span>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Sobre os padrões de projeto, é correto afirmar: ",
		"options": [
			"O uso do padrão de projeto <span style=\"font-style: italic;\">Command</span> em uma aplicação possibilita que os objetos envolvidos possam ser acessados sequencialmente de uma forma padronizada",
			"O padrão de projeto <span style=\"font-style: italic;\">Facade </span>busca fornecer uma interface de acesso simplificada para um subsistema complexo, de forma a tornar o uso de tal subsistema mais simples.",
			"O padrão de projeto <span style=\"font-style: italic;\">Template Method</span> é considerado um padrão de criação, onde é disponibilizada uma interface para a criação de uma família de objetos relacionados.",
			"O padrão de projeto<span style=\"font-style: italic;\"> Abstract Factory</span> é considerado comportamental, pois busca oferecer recursos para dinamicamente definir o comportamento dos objetos envolvidos.",
			"O padrão de projeto <span style=\"font-style: italic;\">Observer</span> define a forma como a aplicação pode garantir a existência de apenas uma instância de um objeto, sendo que tal instância será compartilhada entre os demais objetos."
		],
		"answer": "B"
	},
	{
		"enunciation": " Padrões de projeto são soluções reutilizáveis de <span style=\"font-style: italic;\">software</span> orientado a objetos. Assinale a afirmativa correta sobre padrões de projeto. ",
		"options": [
			"<span style=\"font-style: italic;\">Factory Method</span> permite a criação de famílias de objetos relacionados ou dependentes por meio de uma única interface e sem que a classe concreta seja especificada. ",
			"<span style=\"font-style: italic;\">Proxy</span> é um padrão de projeto de software apropriado quando vários objetos devem ser manipulados em memória sendo que muitos deles possuem informações repetidas. ",
			"<span style=\"font-style: italic;\">Builder</span> é um padrão de projeto de <span style=\"font-style: italic;\">software</span> criacional que permite a separação da construção de um objeto complexo da sua representação, de forma que o mesmo processo de construção possa criar diferentes representações. ",
			"<span style=\"font-style: italic;\">Abstract Factory</span> permite às classes delegar para subclasses decidirem, definindo um método separado para criação dos objetos, no qual as subclasses possam sobrescrever para especificar o \"tipo derivado\" do produto que vai ser criado.",
			"<span style=\"font-style: italic;\">Chain of Responsibility </span>é um padrão de projeto que permite armazenar o estado interno de um objeto em um determinando momento, para que seja possível retorná-lo a este estado, sem que isso cause problemas com o encapsulamento."
		],
		"answer": "C"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">De acordo com Gamma, padrões de projeto são soluções reutilizáveis de software orientado a objetos. Considere as três afirmativas a seguir e depois informe a alternativa correta. </p><p style=\"text-align: justify; \">I - Padrões de projeto de criação são aqueles que abstraem o processo de instanciação de objetos. </p><p style=\"text-align: justify; \">II - Padrões de projeto estruturais se preocupam com a forma como classes e objetos são compostos para formar estruturas maiores. </p><p style=\"text-align: justify; \">III - Padrões de projeto comportamentais se preocupam com algoritmos e a atribuição de responsabilidades entre objetos. </p> ",
		"options": [
			"Apenas a afirmativa I está correta.",
			"Apenas as afirmativas I e II estão corretas. ",
			"Apenas as afirmativas I e III estão corretas. ",
			"Apenas as afirmativas II e III estão corretas.",
			"As três afirmativas estão corretas."
		],
		"answer": "E"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">O Governo Federal, por meio do Banco Central, está desenvolvendo um sistema que possibilitará a todos os Bancos do país o acesso a algumas de suas informações. Um requisito fundamental desse sistema é que a taxa de juros utilizada em todas as transações de todos os Bancos seja a mesma e haja um único acesso a essa informação. Além disso, esse sistema deve poder ser executado em diferentes plataformas, como computadores e diversos dispositivos móveis. Para garantir que a taxa de juros seja única e para evitar a necessidade de criar diferentes soluções para cada plataforma, a empresa desenvolvedora decidiu adotar padrões de projeto. O primeiro padrão deverá garantir uma única instanciação para a classe “Taxa de juros”; e o segundo padrão deverá definir uma família de componentes para cada plataforma e uma implementação que os instancie de acordo com a plataforma na qual a aplicação estará sendo executada. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Os padrões de projeto a serem adotados nessa implementação são, respectivamente:</p> ",
		"options": [
			"Prototype e Adapter;",
			"Singleton e Abstract Factory;",
			"Template Method e Prototype;",
			"Adapter e Singleton;",
			"Abstract Factory e Command."
		],
		"answer": "B"
	},
	{
		"enunciation": " Qual padrão de projeto (<span style=\"font-style: italic;\">design pattern</span>) permite adicionar um comportamento a um objeto já existente em tempo de execução? ",
		"options": [
			"<span style=\"font-style: italic;\">Façade.</span>",
			"<span style=\"font-style: italic;\">Composite.</span>",
			"<span style=\"font-style: italic;\">Decorator.</span>",
			"<span style=\"font-style: italic;\">Abstract Factory.</span>",
			"<span style=\"font-style: italic;\">Business Delegate. </span>"
		],
		"answer": "C"
	},
	{
		"enunciation": " <p>Julgue o item seguinte, a respeito de arquitetura de <span style=\"font-style: italic;\">software</span>.</p><p><br></p><p style=\"text-align: justify; \">No desenvolvimento de um sistema que envolva a aplicação de padrões de projeto, a utilização dos padrões <span style=\"font-style: italic;\">factory</span>, <span style=\"font-style: italic;\">builder</span> ou <span style=\"font-style: italic;\">prototype</span> é recomendada caso se pretenda a parametrização do sistema por meio da composição de objetos, na qual um objeto é responsável por conhecer a classe dos objetos-produto e transformá-la em um parâmetro do sistema.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Suponha que exista uma interface ITraduzFrase que define o método imprimeFrase(). Existem, também, as classes InglesTraduzFrase, EspanholTraduzFrase e AlemaoTraduzFrase que estendem a interface ITraduzFrase e utilizam o método imprimeFrase(). Um Analista utilizou um <span style=\"font-style: italic;\">design pattern</span> que cria objetos de forma dinâmica sem conhecer a classe de implementação. A classe FrasePadrao implementa esse padrão de forma que, de acordo com o idioma desejado, retorna um objeto do tipo ITraduzFrase. O objetivo é que, sendo fornecido o idioma, a frase será nele impressa, em inglês, espanhol ou alemão. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Considerando o exemplo e sabendo que a definição do padrão é \"<span style=\"font-style: italic;\">Define uma interface para criar um objeto, mas permite às classes decidirem qual classe instanciar. Este padrão permite a uma classe deferir a instanciação para subclasses</span>.\", o nome do padrão usado pelo Analista é </p> ",
		"options": [
			"<span style=\"font-style: italic;\">Strategy. </span>",
			"<span style=\"font-style: italic;\">Factory Method. </span>",
			"<span style=\"font-style: italic;\">Singleton. </span>",
			"<span style=\"font-style: italic;\">Chain of Responsability.</span>",
			"<span style=\"font-style: italic;\">Adapter. </span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Considere as afirmativas abaixo a respeito dos padrões de projeto <span style=\"font-style: italic;\">Proxy</span> e <span style=\"font-style: italic;\">Template Method</span>. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">I O padrão <span style=\"font-style: italic;\">Proxy</span> pode ser usado para controlar os direitos de acesso a outro objeto. </p><p style=\"text-align: justify; \">II O padrão <span style=\"font-style: italic;\">Proxy</span> pode ser usado para acessar um objeto localizado em um ambiente remoto. </p><p style=\"text-align: justify; \">III O padrão <span style=\"font-style: italic;\">Template Method</span> define métodos <span style=\"font-style: italic;\">templates</span> para a criação de objetos que seguem uma determinada regra. </p><p style=\"text-align: justify; \">IV O padrão <span style=\"font-style: italic;\">Template Method</span> permite definir uma família de algoritmos que podem ser substituídos dinamicamente. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Estão corretas as afirmativas</p> ",
		"options": [
			"I e II.",
			"I e III.",
			"III e IV.",
			"II e IV. "
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Considere as seguintes afirmativas a respeito dos padrões de projeto <span style=\"font-style: italic;\">Facade</span> (Fachada) e <span style=\"font-style: italic;\">Composite</span>. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">I Uma das consequências negativas do padrão <span style=\"font-style: italic;\">Facade</span> é que ele aumenta o acoplamento entre os subsistemas no qual é aplicado. </p><p style=\"text-align: justify; \">II O padrão <span style=\"font-style: italic;\">Facade</span> define uma interface única para acesso a um subsistema, tornando mais fácil a utilização de seus serviços.</p><p style=\"text-align: justify; \"> III No padrão <span style=\"font-style: italic;\">Composite</span>, objetos que representam composições e objetivos primitivos são tratados (chamados) de forma idêntica pelo cliente.</p><p style=\"text-align: justify; \"> IV O padrão <span style=\"font-style: italic;\">Composite</span> permite variar dinamicamente a quantidade de objetos primitivos, mas não de objetos <span style=\"font-style: italic;\">composite</span>. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Estão corretas as afirmativas</p> ",
		"options": [
			"I e III",
			"I e IV",
			"II e III",
			"II e IV"
		],
		"answer": "C"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Considere as afirmativas presentes no quadro abaixo a respeito dos padrões de projeto <span style=\"font-style: italic;\">Adapter </span>e<span style=\"font-style: italic;\"> Observer</span>: </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">I Uma das implementações do padrão <span style=\"font-style: italic;\">Adapter</span> é realizada através do uso do mecanismo de herança múltipla. </p><p style=\"text-align: justify; \">II O padrão <span style=\"font-style: italic;\">Observer</span> é usado para permitir que mudanças no estado de vários objetos sejam repassadas para objetos observadores interessados. </p><p style=\"text-align: justify; \">III O padrão <span style=\"font-style: italic;\">Adapter</span> permite que o cliente troque os objetos <span style=\"font-style: italic;\">Adapter</span> e <span style=\"font-style: italic;\">Adaptee</span> dinamicamente. </p><p style=\"text-align: justify; \">IV O padrão <span style=\"font-style: italic;\">Observer </span>define a quantidade de objetos observadores (<span style=\"font-style: italic;\">Observer</span>) de um dado assunto (<span style=\"font-style: italic;\">Subject</span>) em tempo de inicialização do programa.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"> Estão corretas as afirmativas</p> ",
		"options": [
			"II e IV",
			"I e IV",
			"II e III",
			"I e III"
		],
		"answer": "D"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">O padrão <span style=\"font-style: italic;\">Layer</span> (Camadas) é um padrão arquitetural que pode ser usado para organização dos subsistemas de um sistema de software. Considere as seguintes afirmativas a respeito do Padrão <span style=\"font-style: italic;\">Layer </span>(Camadas): </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">I O Padrão <span style=\"font-style: italic;\">Layer</span> permite substituição completa de qualquer uma de suas camadas.</p><p style=\"text-align: justify; \"> II O Padrão <span style=\"font-style: italic;\">Layer</span> (Camadas) define a estruturação de um sistema em várias camadas organizadas em uma pilha, onde camadas superiores oferecem serviços para as camadas inferiores.</p><p style=\"text-align: justify; \"> III O Padrão <span style=\"font-style: italic;\">Layer</span> pode trazer problemas de desempenho devido à necessidade de processar cada requisição ao sistema através de diferentes camadas. </p><p style=\"text-align: justify; \">IV As camadas definidas no padrão Layer são: Interface do usuário (GUI), Autenticação/Autorização, Negócio (<span style=\"font-style: italic;\">Business</span>) e Dados (<span style=\"font-style: italic;\">Data</span>). </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Estão corretas as afirmativas</p> ",
		"options": [
			" II e III.",
			"I e IV. ",
			"I e III.",
			" II e IV."
		],
		"answer": "C"
	},
	{
		"enunciation": " <p><span>Considere as seguintes afirmativas a respeito do padrão </span><span style=\" font-style: italic;\">Singleton.</span><br></p><p> </p><p><br></p><p>I O padrão <i>Singleton</i> pode ser usado para determinar uma quantidade fixa de instâncias de uma classe que podem ser criadas em uma aplicação.</p><p> II A classe que implementa o padrão<span style=\"font-style: italic;\"> Singleton</span> deve manter público seus construtores.</p><p> III A implementação comum do padrão <span style=\"font-style: italic;\">Singleton</span> funciona em ambientes <i>multi-threads</i>. </p><p>IV O padrão<span style=\"font-style: italic;\"> Singleto</span>n é implementado através de atributos e métodos estáticos na classe onde é aplicado. </p><p><br></p><p>Estão corretas as afirmativas<br></p> ",
		"options": [
			"I e IV.",
			"I e III.",
			"II e III.",
			"II e IV."
		],
		"answer": "A"
	},
	{
		"enunciation": " <p><span>Considere as afirmações a seguir, acerca dos padrões de projeto <i>Template Method, Adapter </i>e </span><span style=\" font-style: italic;\">Facade.</span><br></p><p><br></p><p>I O padrão <span style=\"font-style: italic;\">Template Method</span> faz uso do mecanismo de delegação para implementar um algoritmo.</p><p> II O padrão <span style=\"font-style: italic;\">Template Method</span> permite variar partes de um algoritmo e é implementado por meio de extensão de classes abstratas. </p><p>III O padrão <span style=\"font-style: italic;\">Facade</span> contribui para o aumento do acoplamento entre subsistemas. </p><p>IV O padrão <span style=\"font-style: italic;\">Adapter</span> pode ser implementado através de herança múltipla. </p><p><br></p><p>Estão corretas as afirmações </p> ",
		"options": [
			"III e IV.",
			"I e II.",
			"I e III.",
			"II e IV."
		],
		"answer": "D"
	},
	{
		"enunciation": " <p><span>Considerando o padrão de projeto Estratégia </span><span style=\" font-style: italic;\">(Strategy</span><span>), é correto afirmar que </span><br></p> ",
		"options": [
			" uma das consequências positivas desse padrão é que ele reduz a quantidade de classes. ",
			"as classes participantes desse padrão são cliente (<span style=\"font-style: italic;\">Client</span>) e estratégia <span style=\"font-style: italic;\">(Strategy</span>).",
			"o padrão permite a implementação de estratégias usando comandos condicionais.",
			"o padrão <span style=\"font-style: italic;\">Strategy</span> permite a definição e o encapsulamento de uma família de algoritmos"
		],
		"answer": "D"
	},
	{
		"enunciation": " <p><span>Analise as seguintes afirmativas a respeito da técnica padrão de projeto.</span><br></p><p><br></p><p>I Cada padrão de projeto oferece código-fonte que mostra como utilizar bibliotecas de classes diretamente em sua aplicação.</p><p> II Cada padrão de projeto busca resolver um problema recorrente de projeto de <i>software </i>oferecendo uma solução concreta dentro de um contexto específico. </p><p>III Todo padrão de projeto permite flexibilizar um determinado aspecto da sua aplicação.</p><p> IV Padrões de projeto representam um vocabulário comum que facilita a comunicação e a documentação do projeto.</p><p> </p><p>Estão corretas as afirmativas <br></p> ",
		"options": [
			"II e IV.",
			"I e II.",
			" I e III.",
			"III e IV."
		],
		"answer": "A"
	},
	{
		"enunciation": " <p><span style=\"text-align: justify;\">Julgue o item subsequente, referente a </span><span style=\"text-align: justify; font-style: italic;\">Domain Driven Design</span><span style=\"text-align: justify;\"> e a </span><span style=\"text-align: justify; font-style: italic;\">Design Patterns</span><span style=\"text-align: justify;\">.</span></p><p><span style=\"text-align: justify;\"><br></span></p><p style=\"text-align: justify; \">O padrão <span style=\"font-style: italic;\">chain of responsibility</span> desacopla o emissor do receptor, fazendo passar a solicitação por uma cadeia de receptores potenciais, ou seja, ele procura evitar o acoplamento do remetente de uma solicitação.<span style=\"text-align: justify;\"><br></span></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <p><span style=\"text-align: justify;\">Julgue o item subsequente, referente a </span><span style=\"text-align: justify; font-style: italic;\">Domain Driven Design</span><span style=\"text-align: justify;\"> e a </span><span style=\"text-align: justify; font-style: italic;\">Design Patterns</span><span style=\"text-align: justify;\">.</span></p><p><span style=\"text-align: justify;\"><br></span></p><p style=\"text-align: justify; \">O padrão <span style=\"font-style: italic;\">observer</span> separa o <span style=\"font-style: italic;\">display</span> do estado de um objeto a partir do objeto em si e, sempre que houver mudança no estado do objeto, permite atualizar e refletir a mudança em todos os <span style=\"font-style: italic;\">displays</span>.<span style=\"text-align: justify;\"><br></span></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Considere o trecho de código ilustrado a seguir:</p><p><br></p><p><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/58829/b216c08755a7fb8bf06a.png\"></p><p><br></p><p style=\"text-align: justify; \">O trecho de código em questão ilustra uma implementação do padrão de projeto:<br></p> ",
		"options": [
			"Builder.",
			"Adapter.",
			"Singleton.",
			"Prototype.",
			"Composite."
		],
		"answer": "C"
	},
	{
		"enunciation": " Sobre padrões de projeto é correto afirmar que: ",
		"options": [
			"São considerados padrões estruturais: Adapter, Bridge e Builder.",
			"São considerados padrões de criação: Abstract Factory, Prototype e Composite.",
			"Os padrões \"GoF\" são organizados em 3 famílias : Padrões de criação, Padrões estruturais e Padrões arquiteturais. ",
			"Os padrões ajudam a tornar a arquitetura de um framework adequada a aplicações diferentes, minimizando a necessidade de modificações.",
			"Um padrão de projeto descreve a arquitetura de um sistema orientado a objetos, os tipos de objetos e as interações entre os mesmos. Ele pode ser vislumbrado como o esqueleto – template – de uma aplicação que pode ser customizado pelo programador e aplicado a um conjunto de aplicações de um mesmo domínio."
		],
		"answer": "D"
	},
	{
		"enunciation": " Com relação ao padrão de projeto Command, é correto afirmar que: ",
		"options": [
			"O padrão Command é um padrão de projeto classificado como de propósito estrutural e com escopo de classe, possibilitando a execução independente das solicitações realizadas.",
			"Como a solicitação é encapsulada em um objeto, não é possível implementar o cancelamento das operações, visto que não é possível identificar o que foi feito antes da chamada.",
			"O padrão Command permite que os comportamentos de um objeto sejam definidos em tempo de execução, permitindo uma maior flexibilidade no desenvolvimento de sistemas dinâmicos.",
			"Um dos usos frequentes do padrão Command é quando existe a necessidade de se manter somente uma instância de determinada classe no sistema, controlando as operações que serão realizadas com ela.",
			"O objetivo da utilização do padrão Command é fazer o encapsulamento de uma solicitação em um objeto, possibilitando que um comportamento seja chamado sem saber nada sobre qual operação deverá ser executada."
		],
		"answer": "E"
	},
	{
		"enunciation": " Sobre os padrões de projeto, é correto afirmar que: ",
		"options": [
			"Com o padrão Decorator, responsabilidade são estaticamente adicionadas ao objeto. Tais responsabilidade são definidas em tempo de compilação. ",
			"O padrão de projeto Template Method especifica a estrutura de algoritmo dentro de um método, onde algumas etapas desse algoritmo são definidas nas subclasses.",
			"No padrão Observer, quando o objeto observador (Observer) sofre alguma alteração, o objeto observado (Subject) é notificado para realizar o processamento adequado.",
			"Com o padrão Facade é possível acessar os componentes de um sistema complexo a partir de diversas interfaces diferentes, obtendo o acesso direto a componentes internos do sistema.",
			"O padrão Iterator fornece uma forma de acessar os elementos de uma estrutura de dados a partir da análise interna da estrutura utilizada para armazenar os objetos, sendo necessário conhecer o seu funcionamento."
		],
		"answer": "B"
	},
	{
		"enunciation": " Os padrões de projetos podem ser classificados de acordo com o propósito (criacional, estrutural ou comportamental) e escopo (Classe ou Objeto). Dessa forma, qual dos seguintes padrões do GoF (Gang of Four) tem o propósito estrutural e o escopo de Objeto? ",
		"options": [
			"State",
			"Memento",
			"Prototype",
			"Decorator",
			"Abstract Factory"
		],
		"answer": "D"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Considere o seguinte cenário: </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Em um sistema em desenvolvimento, existe a necessidade de que quando um determinado objeto sofra alguma alteração, um outro grupo de objetos seja notificados de forma a realizarem o processamento adequado. Esse grupo de objetos interessado na ação é dinâmico, sendo necessário que seja feita a solicitação de inclusão ou remoção do grupo. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Baseado nesse cenário, qual padrão de projeto GoF deverá ser utilizado?</p> ",
		"options": [
			"<span style=\"font-style: italic;\">Visitor</span>",
			"<span style=\"font-style: italic;\">Observer</span>",
			"<span style=\"font-style: italic;\">Prototype </span>",
			"<span style=\"font-style: italic;\">Command</span>",
			"<span style=\"font-style: italic;\">Decorator</span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " Qual dos seguintes itens contém apenas padrões de projeto GoF ('Gang of Four') do tipo padrões estruturais? ",
		"options": [
			"Façade, Composite, Proxy.",
			"Factory Method, Flyweight, Bridge.",
			"Proxy, Abstract Factory, Composite. ",
			"Façade, Composite, Factory Method.",
			"Decorator, Template Method, Façade."
		],
		"answer": "A"
	},
	{
		"enunciation": " Considerando os padrões de projeto do GoF, assinale a afirmação verdadeira. ",
		"options": [
			"O padrão Strategy utiliza uma estrutura em árvore para representar as possíveis estratégias de implementação de um determinado problema.",
			"O padrão Adapter captura técnicas para suporte ao acesso e percurso de estruturas de objetos sem expor sua representação interna. ",
			"O padrão Proxy introduz um nível de referência indireta no acesso a um objeto.",
			"O padrão Builder agrega responsabilidade dinamicamente a um objeto com a intenção de construir um objeto composto."
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Em relação aos Padrões de Projeto, é correto afirmar:</span> ",
		"options": [
			"O Adapter permite que classes com interfaces incompatíveis trabalhem em conjunto.",
			"O Bridge permite compor objetos em estruturas de árvore para representar hierarquias todo-parte.",
			"O Singleton desacopla uma abstração de sua implementação. ",
			"O Observer define uma interface para criar um objeto.",
			"O Factory Method possibilita anexar responsabilidades adicionais a um objeto dinamicamente."
		],
		"answer": "A"
	},
	{
		"enunciation": " Considere que você é o responsável pela especificação da arquitetura de <span style=\"font-style: italic;\">software</span> de um sistema de computação que está sendo desenvolvido pela empresa em que você trabalha. Considere que existe nesse sistema um requisito que indica que cada requisição do cliente deve ser processada para fins de autenticação e controle de acesso. <br> Você sabe, pela sua experiência como arquiteto de <span style=\"font-style: italic;\">software</span>, que replicar essa lógica em todas as páginas ou em todos os <span style=\"font-style: italic;\">servlets</span> da aplicação não é uma boa solução, sobretudo do ponto de vista de manutenção do sistema. <br> Utilizando o conhecimento que você possui sobre o catálogo de padrões J2EE, assinale a opção que indica o padrão de projeto Java que é indicado por esse catálogo para atender ao requisito descrito acima, evitando assim o problema de replicação do código. ",
		"options": [
			"<span style=\"font-style: italic;\">Front Controller.</span>",
			"<span style=\"font-style: italic;\">Context Object.</span>",
			"<span style=\"font-style: italic;\">Service Concentrator.</span>",
			"<span style=\"font-style: italic;\">Composite View.</span>",
			"<span style=\"font-style: italic;\">Intercepting Filter.</span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Relacione os padrões de projeto listados a seguir aos seus respectivos propósitos. <br> <span style=\"font-style: italic;\">1. Mediator </span> <span style=\"font-style: italic;\">2. Observer </span> <span style=\"font-style: italic;\">3. Facade </span> <br> ( ) Define uma relação de dependência de um ou mais objetos em relação a um determinado objeto x, de forma que quando houver uma mudança no estado de x, todos os objetos dependentes de x sejam notificados e atualizados automaticamente. ( ) Define uma interface unificada e de mais alto nível a um conjunto de interfaces de um subsistema, facilitando o uso desse subsistema. ( ) Promove o baixo acoplamento entre um conjunto de objetos, definindo um objeto que encapsula a interação entre os objetos desse conjunto de modo a evitar que haja referências diretas entre eles. <br> Assinale a opção que apresenta a relação correta, segundo a ordem apresentada. ",
		"options": [
			"1 – 2 – 3.",
			"1 – 3 – 2.",
			"2 – 1 – 3.",
			"2 – 3 – 1.",
			"3 – 2 – 1."
		],
		"answer": "D"
	},
	{
		"enunciation": " Qual das alternativas a seguir <span style=\"font-weight: bold;\">NÃO</span> contém um elemento essencial de padrões de projeto, segundo a definição clássica GoF? ",
		"options": [
			"Nome que seja uma referência significativa para o padrão. ",
			"Descrição do problema que explique quando o modelo pode ser aplicado.",
			"Descrição da solução, ou seja, um modelo para uma solução de projeto que pode ser implementado de diferentes maneiras. ",
			"Declaração das consequências – resultados e compromissos – da aplicação do padrão. ",
			"Mecânica para a implementação passo a passo do padrão. "
		],
		"answer": "E"
	},
	{
		"enunciation": " Bridge, Template Method e Singleton podem ser utilizados durante o projeto de <span style=\"font-style: italic;\">software</span> orientado a objetos, sendo denominações de ",
		"options": [
			" padrões de análise (<span style=\"font-style: italic;\">analysis patterns</span>). ",
			"normas de coesão de classes. ",
			"padrões de projeto (<span style=\"font-style: italic;\">design patterns</span>). ",
			"métricas específicas de <span style=\"font-style: italic;\">software</span> orientado a objetos. ",
			"tipos de acoplamento. "
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Identifique a alternativa que apresenta um dos principais objetivos do padrão de projeto Bridge: </span> ",
		"options": [
			"Definir uma classe abstrata que especifica quais objetos devem ser instanciados; ",
			"Desacoplar um conjunto de implementações do conjunto de objetos que a utilizam; ",
			"Casar um objeto existente, fora de seu controle, com uma interface particular; ",
			"Simplificar o uso de um sistema existente, definindo sua própria interface; ",
			"Usar somente um subconjunto de um sistema completo; "
		],
		"answer": "B"
	},
	{
		"enunciation": " As três principais categorias em que se dividem os padrões de projeto são: ",
		"options": [
			"simples, complexos e estruturados.",
			"de criação, estruturais e de comportamento.",
			"de rede, de criação e complexos.",
			"orientados a objetos, complexos e de rede.",
			"relacionais, orientados a objetos e hierárquicos."
		],
		"answer": "B"
	},
	{
		"enunciation": " <p>Como garantimos que uma classe tenha somente uma instância e que essa instância seja facilmente acessível? Uma variável global torna um objeto acessível, mas não impede você de instanciar múltiplos objetos. </p><p style=\"text-align: right; \">GAMMA, E. et al. <span style=\"font-style: italic;\">Padrões de Projeto</span>: Soluções reutilizáveis de software orientado a objetos. Porto Alegre: Bookman, 2000.</p><p style=\"text-align: right; \"><br></p><p style=\"text-align: left;\">Em relação ao exposto e ao padrão de projeto Singleton, assinale alternativa que indica uma das vantagens do referido padrão. </p> ",
		"options": [
			"O padrão de projeto garante a existência de apenas um único objeto da classe em questão, disponibilizando um modo de acessá-la. ",
			"O padrão aumenta a quantidade de variáveis globais no <span style=\"font-style: italic;\">namespace </span>em questão. ",
			"Não é necessário implementar qualquer mecanismo de controle de instância do objeto.",
			"O padrão Singleton não apresenta uma interface simples, uma vez que a implementação dele não é trivial. ",
			"O padrão faz necessário o uso de variáveis globais. "
		],
		"answer": "A"
	},
	{
		"enunciation": " No tocante ao padrão de projeto Decorator, também conhecido como Wrapper, assinale a alternativa correta. ",
		"options": [
			"O citado padrão resulta em implementações menos flexíveis do que a herança estática. ",
			"O Decorator adiciona responsabilidades a um objeto dinamicamente, de modo que constitui uma alternativa à prática da implementação de subclasses.",
			"Os objetos resultantes da implementação de um Decorator possuem diversas diferenças, porém as formas como eles se conectam são as mesmas.",
			"Uma das vantagens de sistemas implementados no referido padrão é que eles possuem diversos objetos parecidos.",
			"O mencionado padrão de projeto não permite adicionar responsabilidades extras ao objeto desejado. "
		],
		"answer": "B"
	},
	{
		"enunciation": " Com base nas classificações de padrões de projeto de acordo com o respectivo propósito, assinale a alternativa correta. ",
		"options": [
			"Padrões temporais são aqueles que garantem a chamada dos métodos de cada classe nos instantes apropriados. ",
			"Padrões estruturais lidam com a composição de classes ou objetos, bem como com a própria criação.",
			"Padrões comportamentais caracterizam a forma como objetos ou classes interagem entre si e distribuem responsabilidades. É o que ocorre, por exemplo, com o padrão Prototype. ",
			"Padrões criacionais se limitam a descrever o processo de criação de um objeto. ",
			"Padrões aquisitivos descrevem a forma como os parâmetros de cada método e o valor de cada atributo de uma classe são adquiridos."
		],
		"answer": "D"
	},
	{
		"enunciation": " O padrão de projeto <span style=\"font-style: italic;\">strategy</span> pode ser utilizado quando se necessita ",
		"options": [
			"de variantes de um algoritmo. ",
			"deixar visível aos usuários estruturas de dados complexas. ",
			"isolar a aplicação da implementação da classe concreta. ",
			"reutilizar classes com interfaces inicialmente incompatíveis. ",
			"usar uma classe existente que não corresponde à interface requerida. "
		],
		"answer": "A"
	},
	{
		"enunciation": " Uma programadora precisa mudar a implementação chamada de uma função em tempo de execução dependendo da entrada de dados. Um dos requisitos importantes é ocultar do usuário desta função a exposição das estruturas de dados complexas, específicas do algoritmo. Entre os conhecidos padrões de Projeto de Software Gang of Four (GoF,1994), qual é o indicado? ",
		"options": [
			"Builder.",
			"Strategy.",
			"Façade.",
			"Template Method."
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Assinale a alternativa que preenche de forma correta as lacunas da frase abaixo. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">O padrão de projeto _______________ fornece um substituto para outro objeto, a fim de controlar o acesso a ele, e o padrão de projeto _______________ define uma dependência de um para muitos entre objetos, de modo que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente.</p> ",
		"options": [
			"<span style=\"font-style: italic;\">Proxy – Observer</span>",
			"<span style=\"font-style: italic;\">Decorator – Composite</span>",
			"<span style=\"font-style: italic;\">Mediator – Observer</span>",
			"<span style=\"font-style: italic;\">Proxy – Composite</span>",
			"<span style=\"font-style: italic;\">Decorator – State</span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">O padrão de projetos <span style=\"font-style: italic;\">chain of responsability</span> é</span> ",
		"options": [
			"um padrão arquitetural.",
			"utilizado, quando o objeto que trata a solicitação deve ser escolhido automaticamente.",
			"utilizado, quando especificamos explicitamente o receptor.",
			"um padrão com alto acoplamento.",
			"um padrão GoF estrutural."
		],
		"answer": "B"
	},
	{
		"enunciation": " No que diz respeito a padrões de projetos, assinale a alternativa que apresenta somente padrões estruturais. ",
		"options": [
			"<span style=\"font-style: italic;\">Adapter, Bridge, Command, Decorator </span>e<span style=\"font-style: italic;\"> Template.</span>",
			"<span style=\"font-style: italic;\">Adapter, Command, Flyweight, Observer </span>e<span style=\"font-style: italic;\"> Proxy.</span>",
			"<span style=\"font-style: italic;\">Composite, Decorator, Singleton, Template</span> e <span style=\"font-style: italic;\">Proxy</span>.",
			"<span style=\"font-style: italic;\">Bridge, Composite, Decorator, Facade</span> e <span style=\"font-style: italic;\">Proxy.</span>",
			"<span style=\"font-style: italic;\">Bridge, Command, Flyweight, Observer</span> e <span style=\"font-style: italic;\">Singleton</span>."
		],
		"answer": "D"
	},
	{
		"enunciation": " Permite elaborar uma interface para criação de famílias de objetos relacionados ou interdependentes, que não especifica suas classes concretas. A partir desse padrão consegue-se criar fábricas concretas, que são responsáveis pela criação de novos objetos para atender as necessidades do cliente. Portanto, essa prática ajuda a excluir a dependência entre o cliente e a classe dos objetos usados por ele. Assinale a alternativa que se refere ao padrão de projeto descrito no texto. ",
		"options": [
			"<span style=\"font-style: italic;\">Singleton.</span>",
			"<span style=\"font-style: italic;\">Builder.</span>",
			"<span style=\"font-style: italic;\">Prototype.</span>",
			"<span style=\"font-style: italic;\">Factory Method.</span>",
			"<span style=\"font-style: italic;\">Abstract Factory.</span>"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Acerca de padrões de projeto, JSE e JME, julgue o item a seguir.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Ao se empregarem duas classes em que uma delas tanto agrega quanto usa objetos da outra, é mais indicado utilizar o padrão criador (creator) que o padrão controlador (controller) do GRASP.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Acerca de padrões de projeto, JSE e JME, julgue o item a seguir.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Considere que determinado sistema tenha apresentado problemas de uso excessivo de recursos de armazenamento na criação de múltiplas instâncias de objetos. Nesse caso, o padrão Adapter é mais apropriado que o padrão Flyweight para se resolver o problema.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <span style=\"font-style: italic;\">Factory Method</span> é um padrão de projeto ",
		"options": [
			"estrutural com escopo de classe. ",
			"de criação com escopo de classe. ",
			"comportamental com escopo de objeto.",
			"estrutural com escopo de objeto."
		],
		"answer": "B"
	},
	{
		"enunciation": " O padrão de projeto comportamental que define uma dependência de um-para-muitos entre objetos de modo que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente é o ",
		"options": [
			"Facade. ",
			"Observer. ",
			"Adapter. ",
			"Abstract Factory.",
			"Prototype. "
		],
		"answer": "B"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">O modelo de requisitos define um conjunto completo de classes de análise. Cada uma descreve algum elemento do domínio do problema, focalizando os aspectos visíveis ao usuário ou ao cliente. O nível de abstração de uma classe de análise é relativamente alto. Conforme o modelo de projeto evolui, a equipe de <span style=\"font-style: italic;\">software</span> deve definir um conjunto de classes de projeto que sejam implementadas e criar um novo conjunto de classes de projeto que implemente uma infraestrutura de <span style=\"font-style: italic;\">software</span> que suporte a solução de negócio. NÃO fazem parte dos tipos de classes de projeto: </span> ",
		"options": [
			"Classes de sistema e classes persistentes. ",
			"Classes de interface e classes de sistema. ",
			"Classes de processo e classes de atributos.",
			"Classes do domínio de negócio e classes de sistema. "
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">“Os padrões de projeto abrangem um amplo aspecto de abstração e aplicação. Os padrões de _________________ descrevem problemas de projeto de caráter amplo e diverso, resolvidos usando-se uma abordagem estrutural. Os padrões de ________________ descrevem problemas orientados a dados recorrentes e as soluções de modelagem de dados que podem ser usadas para resolvê-los. Os padrões de __________________ tratam de problemas associados ao desenvolvimento de subsistemas e componentes, a maneira através da qual eles se comunicam entre si e seu posicionamento em uma arquitetura maior. Os padrões de ________________ descrevem problemas comuns de interface do usuário e suas soluções.” Acerca dos padrões de projeto de <span style=\"font-style: italic;\">software</span>, assinale a alternativa que completa correta e sequencialmente a afirmativa anterior.</span> ",
		"options": [
			" dados / arquitetura / componentes / projeto de interfaces",
			"componentes / arquitetura / dados / projeto de interfaces",
			"arquitetura / dados / componentes / projeto de interfaces",
			"projeto de interfaces / arquitetura / dados / componentes"
		],
		"answer": "C"
	},
	{
		"enunciation": " Os padrões de projetos tornam mais fáceis reutilizar soluções e arquiteturas bem sucedidas para construir softwares orientados a objetos de forma flexível e fácil de manter. Em padrões de projeto, delegação é uma maneira de tornar a composição tão poderosa para fins de reutilização quanto à herança, sendo que dois objetos são envolvidos no tratamento de uma solicitação. É uma boa escolha de projeto somente quando ela simplifica mais do que complica. Ao definir quais padrões deverão ser utilizados no projeto, considerando que diversos padrões de projeto usam delegação, mas três padrões dependem dela. Assinale-os. ",
		"options": [
			"Builder, Prototype e Singleton.",
			"Factory Method, Interpreter e Template Method.",
			"Façade , Command e Decorator.",
			"Adapter , Bridge e Composite.",
			"State, Strategy e Visitor."
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">Acerca de um dos padrões de projeto, analise a seguinte afirmativa: “fornecer uma alternativa flexível ao uso de subclasses para extensão de funcionalidade e, dinamicamente, agregar responsabilidades adicionais a um objeto”. </span></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\"><br></span></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">Trata-se do padrão:</span></p> ",
		"options": [
			"<span style=\"font-style: italic;\">Proxy. </span>",
			"<span style=\"font-style: italic;\">Visitor.</span>",
			"<span style=\"font-style: italic;\">Iterator.</span>",
			"<span style=\"font-style: italic;\">Decorator. </span>"
		],
		"answer": "D"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">“Sua intenção é separar a construção de um objeto complexo da sua representação de modo que o mesmo processo de construção possa criar diferentes representações.” Trata-se do padrão:</span> ",
		"options": [
			"<span style=\"font-style: italic;\">State. </span>",
			"<span style=\"font-style: italic;\">Bridge.</span>",
			"<span style=\"font-style: italic;\">Façade. </span>",
			"<span style=\"font-style: italic;\">Builder.</span>"
		],
		"answer": "D"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Em um projeto de sistemas deve-se considerar que mudanças podem ser necessárias ao longo de sua utilização. Padrões de projeto ajudam a evitar esses possíveis problemas, pois garantem que o sistema pode mudar segundo maneiras específicas. Em diversas causas comuns de reformulação de projetos, alguns padrões podem ajudar a tratar esses problemas. Um deles pode ser a dependência da plataforma de </span><span style=\"font-weight: bold; font-style: italic;\">hardware</span><span style=\"font-weight: bold;\"> e </span><span style=\"font-weight: bold; font-style: italic;\">software</span><span style=\"font-weight: bold;\">. Assinale a alternativa que apresenta os padrões de projeto que tratam desse problema.</span> ",
		"options": [
			"<span style=\"font-style: italic;\">Abstract Factory; Bridge.</span>",
			"<span style=\"font-style: italic;\">Builder; Iterator; Strategy. </span>",
			"<span style=\"font-style: italic;\">Composite; Decorator; Observer.</span>",
			"<span style=\"font-style: italic;\">Chain of Responsibility; Command.</span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">Relacione adequadamente as colunas acerca do escopo de alguns dos padrões de projeto.</span></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">1.</span> Classe. </p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">2. </span>Objeto.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">( )</span> <span style=\"font-style: italic;\">Bridge</span>. </p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">( ) </span><span style=\"font-style: italic;\">Façade</span>. </p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">( ) </span><span style=\"font-style: italic;\">Adapter</span>. </p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">( ) </span><span style=\"font-style: italic;\">Observer</span>. </p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">( )</span> <span style=\"font-style: italic;\">Interpreter</span>.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">A sequência está correta em</span><br></p> ",
		"options": [
			" 2, 1, 1, 2, 1.",
			"1, 2, 2, 1, 2.",
			" 2, 2, 1, 2, 1. ",
			" 1, 2, 2, 2, 2."
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Padrões de projetos podem ser classificados em dois critérios: escopo e finalidade. Escopo especifica se o padrão se aplica primariamente a classes e objetos, e finalidade reflete o que o padrão faz. Quanto à finalidade, os padrões podem ser classificados em três categorias. Assinale a INCORRETA. </span> ",
		"options": [
			"Criação.",
			"Estrutural. ",
			"Reutilização.",
			"Comportamental."
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Um padrão de projeto nomeia, identifica e abstrai os aspectos-chave de uma estrutura de projeto comum para torná-la útil para a criação de um projeto orientado a objetos reutilizável. Um padrão, em geral, possui quatro elementos essenciais; assinale-os.</span> ",
		"options": [
			"Solução; aplicação; abstração; e, reutilização. ",
			" Problema; elementos; abstração; e, consequências.",
			"Consequências; aplicação; reutilização; e, problema.",
			"Nome do padrão; problema; solução; e, consequências. "
		],
		"answer": "D"
	},
	{
		"enunciation": " O padrão de projeto do tipo comportamental conhecido como<span style=\"font-style: italic;\"> iterator</span> ",
		"options": [
			"agrega, de forma dinâmica, responsabilidades adicionais a um objeto.",
			"permite uma maneira de acessar, de forma sequencial, os elementos de um objeto agregado sem a exposição de sua representação subjacente.",
			"representa uma operação a ser executada nos elementos de uma estrutura de objetos. ",
			"garante que uma classe deverá instanciar um único objeto e fornecer um ponto global de acesso a mesma classe. "
		],
		"answer": "B"
	},
	{
		"enunciation": " Um exemplo de padrão de projeto do tipo criação é o ",
		"options": [
			"<span style=\"font-style: italic;\">composite.</span>",
			"<span style=\"font-style: italic;\"> proxy.</span>",
			"<span style=\"font-style: italic;\">interpreter. </span>",
			"<span style=\"font-style: italic;\">prototype.</span>"
		],
		"answer": "D"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">O diagrama abaixo ilustra um dos padrões de projeto propostos pela <span style=\"font-style: italic;\">Gang of Four</span>.</span> <span style=\"font-weight: bold;\"><br></span> <br> <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/55701/de80c7e15f307c641461.png\"> <span style=\"font-weight: bold;\">Esse padrão de projeto denomina-se<br></span> ",
		"options": [
			" Factory method.",
			"Abstract factory.",
			"Template method.",
			"Prototype. ",
			"Builder."
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">Sobre o padrão de projeto Composite, analise as afirmativas abaixo: </span></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">I. </span>Define hierarquias de classe que consistem de objetos primitivos e objetos compostos.</p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\"> II. </span>Útil para representar hierarquias partes-todo de objetos. </p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">II. </span>Torna mais fácil acrescentar novas espécies de componentes. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">Está CORRETO o que se afirma em</span></p> ",
		"options": [
			" I, apenas.",
			" II, apenas.",
			"I e II, apenas.",
			"I e III, apenas.",
			"I, II e III."
		],
		"answer": "E"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">Sobre padrões de projeto, analise as afirmativas abaixo: </span></p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">I. </span>É uma descrição de um problema e o cerne de sua solução, de forma que tal solução possa ser adaptada para resolver novos problemas. </p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">II.</span> Lidam com relacionamentos entre objetos que podem ser mudados, apenas, em tempo de compilação. </p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">III.</span> Um antipadrão tem como um de seus propósitos descrever uma solução ruim para um problema que resultou em uma situação ruim. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">Está CORRETO o que se afirma, apenas, em</span></p> ",
		"options": [
			"I.",
			"II.",
			"III.",
			"I e III.",
			"I e II."
		],
		"answer": "D"
	},
	{
		"enunciation": " Considerando os padrões definidos pelo GoF (Gang of Four), assinale a opção correta. ",
		"options": [
			"O padrão <span style=\"font-style: italic;\">chain of responsibility</span> é responsável por manter a independência entre os objetos receptor e solicitante na orientação a objetos.",
			"O padrão <span style=\"font-style: italic;\">flyweight </span>é utilizado quando é desejável que uma interface (abstração) possa variar independentemente de suas implementações. ",
			"Os padrões GoF estão divididos nas categorias projetos de criação, projetos estruturais e projetos de transição.",
			"Os padrões <span style=\"font-style: italic;\">abstract factory</span> e <span style=\"font-style: italic;\">singleton</span> fazem parte da categoria projetos estruturais."
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Em aplicações para <span style=\"font-style: italic;\">web</span> orientadas a objeto, há um <span style=\"font-style: italic;\">design pattern</span> muito utilizado, (relacionado à arquitetura de sistemas) que possui um componente que:</p><p> </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">− Define o comportamento da aplicação. </p><p style=\"text-align: justify; \">− Mapeia ações do usuário para classes que cuidam do acesso aos dados. </p><p style=\"text-align: justify; \">− Seleciona páginas <span style=\"font-style: italic;\">web</span> para entregar resultados vindos das classes de acesso aos dados. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"> O componente citado no texto acima é o </p> ",
		"options": [
			"Business. ",
			"Controller. ",
			"Persistence. ",
			"Middle. ",
			"Core. "
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Considere que é necessário fazer um programa que vá funcionar em várias plataformas, como Windows, Linux, Mac OS etc. O programa fará uso de diversas abstrações de janelas gráficas, por exemplo, janela de diálogo, janela de aviso, janela de erro etc. Um Analista sugeriu o uso de um padrão de projeto GoF estrutural que fornece um nível de abstração maior que o Adapter, pois são separadas as implementações e as abstrações, permitindo que cada uma varie independentemente. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"> O padrão sugerido pelo Analista é o </p> ",
		"options": [
			"Bridge e as implementações seriam as classes de janela das plataformas. ",
			"Prototype, pois especifica os tipos de plataformas a serem criadas usando uma instância protótipo e cria novas interfaces pela cópia desse protótipo. ",
			"MVC, de forma que a camada <span style=\"font-style: italic;\">Model </span>fique responsável por acionar as janelas, a camada <span style=\"font-style: italic;\">Controller</span> exiba os dados do <span style=\"font-style: italic;\">Model</span> ao usuário e a camada <span style=\"font-style: italic;\">View</span> armazene as classes que fazem a comunicação com o Banco de Dados. ",
			"Visitor e as interfaces seriam executadas nos elementos de cada plataforma. ",
			"State, que permite a uma plataforma alterar o comportamento de sua interface. "
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Suponha que em uma organização existe um conjunto de cargos e para cada cargo existem regras de cálculo da taxa de produtividade, cujo valor é determinado por uma porcentagem do salário base do funcionário. Este valor é acrescido ao salário do funcionário como um bônus. Um desenvolvedor deve criar uma solução que utilize um <span style=\"font-style: italic;\">design pattern</span> (padrão de projeto) cuja intenção é: “definir uma família de algoritmos, encapsular cada uma delas e torná-las intercambiáveis. O padrão de projeto permite que o algoritmo varie independentemente dos clientes que o utilizam”. Ou seja, o padrão sugere que algoritmos parecidos (métodos de cálculo da taxa de produtividade) sejam separados de quem os utiliza (funcionário). O padrão, além de encapsular os algoritmos da mesma família, também permite a reutilização do código. Nesta situação, caso a regra para cálculo da taxa de produtividade de dois tipos de funcionários, como Desenvolvedor e DBA, seja a mesma, não é necessário escrever código extra. Caso seja necessário incluir um novo cargo, basta implementar sua estratégia de cálculo da taxa ou reutilizar outra similar. Nenhuma outra parte do código precisa ser alterada. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"> O <span style=\"font-style: italic;\">design pattern</span> mencionado na situação apresentada é </p> ",
		"options": [
			"<span style=\"font-style: italic;\">Abstract Method.</span>",
			"<span style=\"font-style: italic;\">Builder.</span>",
			"<span style=\"font-style: italic;\">Prototype.</span>",
			"<span style=\"font-style: italic;\">Strategy.</span>",
			"<span style=\"font-style: italic;\">Singleton.</span>"
		],
		"answer": "D"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Com relação ao tema Padrões de Projeto, conforme descritos por Gamma et alli, sobre o padrão <i>Prototype</i>, analise as afirmativas a seguir. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">I. Apresenta como benefícios adicionais a adição e a remoção de produtos em tempo de execução. </p><p style=\"text-align: justify; \">II. Apresenta como benefícios adicionais a especificação de novos objetos pela variação de seus valores e/ou de sua estrutura. </p><p style=\"text-align: justify; \">III. Apresenta como benefícios adicionais a redução da necessidade de criação de subclasses. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Assinale:</p> ",
		"options": [
			"se somente a afirmativa I estiver correta.",
			"se somente a afirmativa II estiver correta.",
			"se somente a afirmativa III estiver correta.",
			"se somente as afirmativas I e II estiverem corretas. ",
			"se todas as afirmativas estiverem corretas."
		],
		"answer": "E"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Nos padrões GoF, o padrão Builder é constituído, dentre os seus elementos, do “builder” e “concrete builder”. A diferença entre eles, respectivamente, é dada por qual alternativa?</span> ",
		"options": [
			"O primeiro especifica uma interface para um construtor de partes do objeto-produto, enquanto que o segundo constrói um objeto utilizando a interface do builder.",
			"O primeiro constrói um objeto utilizando a interface do concrete builder, enquanto que o segundo especifica uma interface para um construtor de partes do objeto-produto.",
			"O primeiro especifica uma interface para um construtor de partes do objeto-produto, enquanto que o segundo define uma implementação da interface builder além de manter a representação que cria e fornece a interface para recuperação do produto.",
			"O primeiro representa o objeto complexo acabado de construir e inclui classes que definem as partes constituintes, enquanto que o segundo especifica uma interface para um construtor de partes do objeto-produto.",
			" O primeiro define uma implementação da interface builder além de manter a representação que cria e fornece a interface para recuperação do produto, enquanto que o segundo representa o objeto complexo acabado de construir e inclui classes que definem as partes constituintes."
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">O Design Patterns tem o objetivo de escrever uma solução geral e reutilizável para o desenvolvimento de sistemas de software orientados a objetos. Um dos padrões é o “GoF” ( Gang of Four ). Sabendo disso, assinale a alternativa que apresenta as famílias do GoF.</span> ",
		"options": [
			"Padrões de Visão, Padrões Estruturais, Padrões de Controle.",
			"Padrões de Visão, Padrões de Refactoring, Padrões de Controle.",
			"Padrões de Criação, Padrões de Refactoring, Padrões Comportamentais.",
			"Padrões de Criação, Padrões Estruturais, Padrões Comportamentais.",
			"Padrões de Criação, Padrões Estruturais, Padrões de Controle."
		],
		"answer": "D"
	},
	{
		"enunciation": " A técnica de adaptação de um componente de <span style=\"font-style: italic;\">software</span> que encapsula o componente original e atual como filtro para requisições recebidas, determinando o comportamento do componente como desejado, é denominada ",
		"options": [
			"<span style=\"font-style: italic;\">proxy.</span>",
			"<span style=\"font-style: italic;\">wrapping.</span>",
			"alteração de código.",
			"caixa-branca.",
			"herança."
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Padrões de projeto nomeiam, explicam e avaliam um aspecto de projeto importante e recorrente em sistemas orientados a objetos. </p><p style=\"text-align: justify; \">Avalie as características atribuídas a um padrão de projeto.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"> I- Usado quando uma classe é usuária de uma certa hierarquia/ família de algoritmos, como um algoritmo de busca ou ordenação. </p><p style=\"text-align: justify; \">II- Esse padrão define uma família de algoritmos, encapsula cada um deles e os torna intercambiáveis.</p><p style=\"text-align: justify; \">III- Como existem diversos algoritmos em uma mesma família, não é desejável que se codifique todos eles em uma mesma classe.</p><p style=\"text-align: justify; \"> IV- Permite que um algoritmo varie, independentemente dos clientes que o utilizam. </p><p style=\"text-align: justify; \">V- Fornece uma maneira de configurar uma classe com um dentre muitos comportamentos. </p><p style=\"text-align: justify; \">VI- Pode ser usado para evitar a exposição das estruturas de dados específicas de um algoritmo, que se deseja ocultar. </p><p style=\"text-align: justify; \"><br></p><p>Essas características são do padrão de projeto<br></p> ",
		"options": [
			"Strategy.",
			"Adapter. ",
			"Decorator.",
			"Abstract Factory.",
			"Template Method."
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Os padrões arquiteturais descrevem a arquitetura, explicam quando elas podem ser usadas e discutem suas vantagens e desvantagens. Associe as colunas, relacionando os padrões arquiteturais aos cenários em que são geralmente utilizados.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\"> Padrões </span></p><p style=\"text-align: justify; \">1- Client-server</p><p style=\"text-align: justify; \">2- Pipe and filter</p><p style=\"text-align: justify; \">3- Layers</p><p style=\"text-align: justify; \">4- Model-ViewController</p><p style=\"text-align: justify; \">5- Repository</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"><span style=\"font-weight: bold;\">Cenários</span></p><p style=\"text-align: justify; \">( ) Quando há necessidade de manter uma gerência centralizada de todos os dados, de modo que este seja acessível a todos os componentes do sistema, possibilitando uma interação indireta entre eles.</p><p style=\"text-align: justify; \">( ) Em aplicações de processamento de dados, em que as entradas são processadas em etapas separadas, nas quais os dados fluem de um componente para outro para processamento.</p><p style=\"text-align: justify; \">( ) Quando há possibilidade de incorporar novos requisitos não funcionais, como distribuição, segurança, persistência, entre outros, de modo a minimizar modificações no restante do sistema em razão da integração desse novo requisito.</p><p style=\"text-align: justify; \">( ) Quando há necessidade de que os dados sejam mantidos de maneira independente de sua apresentação, de modo que possam existir diversas maneiras de visualizar e interagir com os dados.</p><p style=\"text-align: justify; \">( ) Quando os dados compartilhados precisam ser acessados a partir de uma série de locais, podendo ser usados, também, quando a carga em um sistema é variável.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">A sequência correta dessa associação é<br></p> ",
		"options": [
			"1, 3, 4, 2, 5. ",
			"2, 4, 1, 5, 3.",
			"3, 1, 2, 5, 4. ",
			"4, 5, 3, 1, 2.",
			"5, 2, 3, 4, 1."
		],
		"answer": "E"
	},
	{
		"enunciation": " A respeito de padrões de projeto, existem os padrões que descrevem maneiras comuns de organizar classes e objetos em um sistema e há aqueles que fornecem estratégias testadas para modelar a maneira como os objetos colaboram entre si em um sistema. Está-se falando, respectivamente, dos padrões de projeto ",
		"options": [
			"criacionais e arquitetônicos.",
			"estruturais e de concorrência. ",
			"organizacionais e comportamentais.",
			"criacionais e organizacionais.",
			"estruturais e comportamentais."
		],
		"answer": "E"
	},
	{
		"enunciation": " Assinale a opção que apresenta SOMENTE padrões de projeto criacionais. ",
		"options": [
			"<span style=\"font-style: italic;\">Prototype</span> e <span style=\"font-style: italic;\">Singleton</span> ",
			"<span style=\"font-style: italic;\">Proxy</span> e <span style=\"font-style: italic;\">Singleton </span>",
			"<span style=\"font-style: italic;\">Command</span> e <span style=\"font-style: italic;\">Iterator</span>",
			"<span style=\"font-style: italic;\">Factory Method</span> e <span style=\"font-style: italic;\">Adapter</span>",
			"<span style=\"font-style: italic;\">Template Method </span>e <span style=\"font-style: italic;\">Abstract Factory</span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " No desenvolvimento de uma API orientada a objetos, é comum reunir todas as suas funcionalidades em uma única classe, simplificando o acesso. Esta prática pode ser favorecida através da implementação do padrão de projeto. ",
		"options": [
			"<span style=\"font-style: italic;\">Proxy. </span> ",
			"<span style=\"font-style: italic;\">Decorator. </span>",
			"<span style=\"font-style: italic;\">Singleton. </span>",
			"<span style=\"font-style: italic;\">Façade. </span>",
			"<span style=\"font-style: italic;\">Strategy. </span>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Na literatura de engenharia de software, além dos padrões GRASP, é comum classificar os padrões de projeto em 3 tipos: padrões de criação, padrões estruturais e padrões ",
		"options": [
			"comportamentais. ",
			"de testes. ",
			"de implantação. ",
			"de análise. ",
			"de visualização. "
		],
		"answer": "A"
	},
	{
		"enunciation": " O padrão de projeto 'Command Processor' ",
		"options": [
			"suporta tolerância a falhas, computação paralela e precisão computacional. ",
			"ajuda a gerenciar todas as visões que um sistema de software provê. ",
			"faz com que clientes de um componente se comuniquem com um representante em vez do próprio componente. ",
			"provê uma comunicação entre processos transparente para sistemas de software com um modelo de interação ponto-a-ponto. ",
			"separa a requisição por um serviço de sua execução."
		],
		"answer": "E"
	},
	{
		"enunciation": " Qual dos padrões arquiteturais abaixo é indicado para a estruturação de sistemas de software distribuído com componentes dissociados que interajam por invocação remota de serviços? ",
		"options": [
			"Broker ",
			"Microkernel ",
			"Model-View-Controller ",
			"Blackboard ",
			"Reflection "
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \"> Assinale a alternativa correta: </p><p style=\"text-align: justify; \">Os três grupos distintos em que é organizado o padrão GoF são:</p> ",
		"options": [
			"Criacionais, estruturais e comportamentais. ",
			" Metodo, Classe e Mensagens.",
			"Classe, objeto e método.",
			"Comportamentais, Estado e Classe. "
		],
		"answer": "A"
	},
	{
		"enunciation": " Assinale a alternativa que define corretamente o conceito de Design Patterns: ",
		"options": [
			"“Uma solução para um problema dentro de um contexto”.&lt;http://www.devmedia.com.br/design-patterns-introducao-parte-1/16780&gt; acesso em 23 de janeiro de 2017. ",
			"“Um procedimento padrão para resolver problemas anteriormente desconhecidos dentro de um contexto genérico” &lt;http://www.devmedia.com.br/design-patterns-introducao-parte-1/16780&gt; acesso em 23 de janeiro de 2017. ",
			" “Uma prática não estruturada para solução de problemas dentro de um determinado contexto” &lt;http://www.devmedia.com.br/design-patterns-introducao-parte-1/16780&gt; acesso em 23 de janeiro de 2017.",
			"“Uma solução para um problema independentemente de um contexto” &lt;http://www.devmedia.com.br/design-patterns-introducao-parte-1/16780&gt; acesso em 23 de janeiro de 2017. "
		],
		"answer": "A"
	},
	{
		"enunciation": " Assinale a alternativa correta: ",
		"options": [
			"SOLID é um acróstico e, cada letra está relacionada a um princípio para programação e design orientado a objetos de autoria de Robert C. Martin. O Acrostico é formado pela inicial de Sistema, Objeto, Lógica, Informação e, Disign. ",
			"SOLID é um acróstico e, cada letra está relacionada a um princípio para programação e design orientado a objetos de autoria de Robert C. Martin. ",
			"SOLID é um acróstico formado pelas iniciais de SPR, OCP, LSP, ISP e DIP. É um conjunto consistente de princípios para modelagem matemática e computacional de sólidos tridimensionais. A modelagem sólida distinguese das áreas relacionadas de modelagem geométrica e computação gráfica por sua ênfase na fidelidade física.",
			"Em programação Orientada a Objetos É um conjunto consistente de princípios para modelagem matemática e computacional de sólidos tridimensionais. A modelagem sólida distingue-se das áreas relacionadas de modelagem geométrica e computação gráfica por sua ênfase na fidelidade física. "
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">A adoção de padrões de projeto proporciona uma reutilização estratégica durante o desenvolvimento de software, uma vez que promove o reuso de soluções previamente validadas e notadamente bem conhecidas (reuso de <span style=\"font-style: italic;\">rationale</span>). A figura apresenta um diagrama de classes que modela o controlador responsável por controlar o nível de dificuldade de um jogo eletrônico. Vale salientar que o nível de dificuldade pode ser ajustado em tempo de execução, a partir do perfil de cada jogador. </p><p style=\"text-align: justify; \"><br></p><p> <img src=\"https://qcon-assets-production.s3.amazonaws.com/images/provas/51721/imagem_41.png\"><span> </span><span> </span></p><p><span><br></span></p><p style=\"text-align: justify; \">Assinale a alternativa que representa o padrão de projetos que foi utilizado no exemplo apresentado na figura. <br></p> ",
		"options": [
			"<span style=\"font-style: italic;\">Observer</span>, uma vez que o controlador precisa monitorar os níveis de dificuldade. ",
			"<span style=\"font-style: italic;\">State</span>, uma vez que este padrão possui o propósito de facilitar mudanças dinâmicas na execução dos métodos",
			"<span style=\"font-style: italic;\">Composite</span>, pois os diversos níveis de dificuldade estão representados através de uma hierarquia bem definida. ",
			"Chain of Responsability, uma vez que não se sabe a priori qual o nível de dificuldade que será utilizado, variando no decorrer da execução. ",
			"<span style=\"font-style: italic;\">Command</span>, uma vez que cada nível de dificuldade representa um comando complementar do jogo, representando, assim, diferentes formas de acionar o jogo. "
		],
		"answer": "B"
	},
	{
		"enunciation": " <span>Assinale a opção que apresenta o padrão de projeto que tem por objetivo separar o display de estado de um objeto a partir do objeto em si e que permite que sejam fornecidos <span style=\"font-style: italic;\">displays </span>alternativos.</span> ",
		"options": [
			"Decorator",
			"Prototype",
			"Facade",
			"Observer",
			"Iterator"
		],
		"answer": "D"
	},
	{
		"enunciation": " <span>O padrão de projeto criado por John Goshmann MVVM, visa estabelecer uma clara separação de responsabilidades e tonar mais fácil a manutenção de um aplicativo. Assinale a alternativa correta referente a responsabilidade da ViewModel: </span> ",
		"options": [
			"Encapsula a lógica de negócio .",
			"É responsável por toda a lógica de validação. ",
			"Apresenta os resultados do aplicativo. ",
			"Disponibiliza para a View uma lógica de apresentação "
		],
		"answer": "D"
	},
	{
		"enunciation": " <span> O padrão GoF apresenta três grupos. Indique a alternativa cujo termo <span style=\"font-weight: bold;\">NÃO </span>pertence ao GoF: </span> ",
		"options": [
			"Comportamentais. ",
			"Operacionais. ",
			"Estruturais. ",
			"Criacionais. "
		],
		"answer": "B"
	},
	{
		"enunciation": " Assinale a alternativa que apresenta o padrão de projeto correspondente aos diagramas. ",
		"options": [
			"<span style=\"font-style: italic;\">Strategy</span>",
			"<span style=\"font-style: italic;\">Composite</span>",
			"<span style=\"font-style: italic;\">Abstract Factory </span>",
			"<span style=\"font-style: italic;\">Adapter</span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Sobre os padrões de projeto para distribuição de responsabilidades, GRASP (<span style=\"font-style: italic;\">General Responsability Assignment Software Patterns</span>), analise as afirmativas. I - Polimorfismo (<span style=\"font-style: italic;\">Polymorphism</span>) – <span style=\"font-weight: bold;\">Problema</span>: Como tratar alternativas com base em tipo? <span style=\"font-weight: bold;\">Solução</span>: Quando alternativas ou comportamentos relacionados variam segundo o tipo (classe), atribua a responsabilidade pelo comportamento aos tipos para os quais o comportamento varia, usando operações polimórficas. II - Especialista de Informação (<span style=\"font-style: italic;\">Information Expert</span>) – <span style=\"font-weight: bold;\">Problema</span>: qual é o princípio geral de atribuição de responsabilidade a objetos? <span style=\"font-weight: bold;\">Solução</span>: Atribua a responsabilidade ao especialista na informação, à classe que tem a informação necessária para satisfazer a responsabilidade. III - Controlador (<span style=\"font-style: italic;\">Controller</span>) – <span style=\"font-weight: bold;\">Problema</span>: qual é o primeiro objeto, além da camada de IU (interface de usuário), que recebe e coordena uma operação do sistema? <span style=\"font-weight: bold;\">Solução</span>: Atribua a responsabilidade a uma classe que represente uma das seguintes escolhas: 1) o sistema global, um objeto raiz ou um dispositivo dentro do qual o software está sendo processado; 2) um cenário de um caso de uso dentro do qual ocorre o evento do sistema. <br> Está correto o que se afirma em ",
		"options": [
			"I e III, apenas. ",
			"I, II e III. ",
			"II e III, apenas.",
			"I e II, apenas. "
		],
		"answer": "B"
	},
	{
		"enunciation": " Um Programador de Sistemas teve que desenvolver algumas aplicações utilizando padrões de projeto. Sua primeira necessidade foi utilizar um padrão para separar a construção de objetos complexos da sua representação, de forma que o mesmo processo de construção pudesse criar diferentes representações. A segunda necessidade foi o uso de um padrão para permitir que classes incompatíveis trabalhassem em conjunto, já que converte a interface de uma classe em outra, para atender às expectativas do cliente. Para atender suas necessidades, o Programador usou, correta e respectivamente, os padrões de projeto ",
		"options": [
			"<span style=\"font-style: italic;\">Factory Method e Singleton.</span>",
			"<span style=\"font-style: italic;\">Builder e Abstract Factory.</span>",
			"<span style=\"font-style: italic;\">Builder e Adapter.</span>",
			"<span style=\"font-style: italic;\">Singleton e Abstract Factory.</span>",
			"<span style=\"font-style: italic;\">Adapter e Bridge.</span>"
		],
		"answer": "C"
	},
	{
		"enunciation": " Existem <span style=\"font-weight: bold;\">nove</span> padrões <span style=\"font-weight: bold;\">GRASP</span>. Assinale a alternativa em que <span style=\"font-weight: bold;\">TODOS</span> os elementos fazem parte desses padrões: ",
		"options": [
			"Criador, Especialista na Informação, Controlador",
			"Controlador, Acoplamento Baixo, Encapsulamento",
			"Polimorfismo, Encapsulamento, Acoplamento Baixo",
			"Coesão Alta, Especialista na Informação, Cadeia de Responsabilidade",
			"Criador, Encapsulamento, Polimorfismo"
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Julgue o item a seguir, a respeito de padrões de projetos.</p><p style=\"text-align: justify; \">O padrão de projeto estrutural <span style=\"font-style: italic;\">bridge</span> fornece um objeto substituto, que faz referência a outro objeto.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Julgue o item a seguir, a respeito de padrões de projetos.</p><p style=\"text-align: justify; \">No padrão GRASP, a alta coesão (<span style=\"font-style: italic;\">high cohesion</span>) serve para mensurar quão fortemente uma classe está conectada a outras classes<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Julgue o item a seguir, a respeito de padrões de projetos.</p><p style=\"text-align: justify; \">O isolamento dos códigos de construção e representação é um dos objetivos do padrão <span style=\"font-style: italic;\">builder.</span><br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">Julgue o item a seguir, a respeito de padrões de projetos.</p><p style=\"text-align: justify; \">O padrão <span style=\"font-style: italic;\">command</span> tem como definição passar uma requisição entre uma lista ou objetos encadeados para a execução de uma ação ou o acionamento de um evento em um momento posterior.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p style=\"text-align: justify; \">As afirmativas acima descrevem, respectivamente, os seguintes padrões de projeto:<br></p> ",
		"options": [
			"Adapter, Facade, Template Method, Chain of Responsibility e Proxy.",
			"Facade, Adapter Template Method, Chain of Responsibility e Decorator. ",
			"Adapter, Facade, Decorator, Command e Adapter. ",
			"Adapter, Facade, Template Method, Command e Interpreter. ",
			"Memento, Strategy, Chain of Responsibility, Template Method e Memento. "
		],
		"answer": "A"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Segundo Erick Gamma, com relação às consequências do uso do padrão de projeto Bridge, analise as afirmativas a seguir.</p><p style=\"text-align: justify;\"><br></p><p style=\"text-align: justify; \"> I. Desacopla interface e implementação, permitindo que a implementação possa ser configurada em tempo de compilação, dessa forma o cliente não é afetado por uma eventual troca de implementação.</p><p style=\"text-align: justify; \"> II. Melhora a extensibilidade, pois permite que a abstração e a implementação se expandam em hierarquias que são independentes uma da outra. </p><p style=\"text-align: justify; \">III. A estruturação em camadas é dificultada quando se estende a hierarquia da implementação sem que a da abstração a acompanhe.</p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \"> </p><p style=\"text-align: justify; \">Assinale:</p> ",
		"options": [
			"se somente a afirmativa I estiver correta.",
			"se somente a afirmativa II estiver correta.",
			"se somente a afirmativa III estiver correta.",
			"se somente as afirmativas I e II estiverem corretas.",
			"se todas as afirmativas estiverem corretas."
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Considerando a descrição dos Padrões de Projeto Comportamentais, analise as afirmativas a seguir.</p><p style=\"text-align: justify;\"><br></p><p style=\"text-align: justify; \"> I. Aplicados a classes, usam delegação para distribuir comportamento entre elas.</p><p style=\"text-align: justify; \"> II. Aplicados a objetos, usam herança ao invés de composição de objetos. </p><p style=\"text-align: justify; \">III. Estão relacionados com algoritmos e atribuição de responsabilidades entre os objetos. </p><p style=\"text-align: justify; \"><br></p><p style=\"text-align: justify; \">Assinale:</p> ",
		"options": [
			"se somente a afirmativa I estiver correta.",
			"se somente a afirmativa II estiver correta.",
			"se somente a afirmativa III estiver correta.",
			"se somente as afirmativas I e II estiverem corretas.",
			"se todas as afirmativas estiverem corretas."
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Os Padrões de Projetos em Orientação a Objeto são arquiteturas utilizadas para desenvolver softwares orientados a objetos flexíveis e sustentáveis assim reduzindo sua complexidade. O modelo Singleton é utilizado para</span> ",
		"options": [
			"garantir que o objeto tenha apenas uma instância.",
			"remover um objeto da memória.",
			"instanciar o objeto quantas vezes for necessário.",
			"garantir a associação entre objetos.",
			"transformar o objeto em um método."
		],
		"answer": "A"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Os Padrões de Projeto de software são organizados em três famílias conforme a “Gangue dos Quatro” (</span><span style=\"font-weight: bold; font-style: italic;\">Gang of Four</span><span style=\"font-weight: bold;\">). Dos “Padrões de Criação” abaixo, identifique qual deles </span><span style=\"font-weight: bold; text-decoration: underline;\">não</span><span style=\"font-weight: bold;\"> pertence a essa família especificamente:</span> (<span style=\"font-weight: bold;\">1</span>) <span style=\"font-style: italic;\">Abstract Factory </span> (<span style=\"font-weight: bold;\">2</span>) <span style=\"font-style: italic;\">Builder </span> (<span style=\"font-weight: bold;\">3</span>) <span style=\"font-style: italic;\">Factory Method </span> (<span style=\"font-weight: bold;\">4</span>) <span style=\"font-style: italic;\">Prototype </span> (<span style=\"font-weight: bold;\">5</span>) <span style=\"font-style: italic;\">Proxy</span><span style=\"font-weight: bold;\"><br></span> ",
		"options": [
			"somente o 1 não pertence a essa família especificamente",
			"somente o 2 não pertence a essa família especificamente",
			"somente o 3 não pertence a essa família especificamente",
			"somente o 4 não pertence a essa família especificamente",
			"somente o 5 não pertence a essa família especificamente"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p> Na hierarquia dos componentes visuais da biblioteca Java AWT (do inglês, <span style=\"color: rgb(51, 51, 51);   font-style: italic;   font-weight: normal;   text-align: start;       background-color: rgb(255, 255, 255);  \">Abstract<span class=\"Apple-converted-space\"> </span></span><span style=\"font-style: italic;\">Window Toolkit</span>), há c<span style=\"font-style: italic;\">ontainers</span> e <span style=\"font-style: italic;\">componentes. Containers</span>, tais como os representados pelas classes <span style=\"font-style: italic;\">Frame, Panel, Dialog</span> e <span style=\"font-style: italic;\">Applet</span> agregam outros <span style=\"font-style: italic;\">componentes</span>, tais como os representados pelas classes <span style=\"font-style: italic;\">Button</span> e <span style=\"font-style: italic;\">Label</span>. Um <span style=\"font-style: italic;\">container</span> pode também conter sub-<span style=\"font-style: italic;\">containers</span>. Logo, um <span style=\"font-style: italic;\">container</span> pode conter <span style=\"font-style: italic;\">containers</span> ou<span style=\"font-style: italic;\"> componentes</span>.</p><p> Oracle, 2016. Disponível em: &lt;http://docs.oracle.com/javase/8/docs/technotes/guides/awt/ &gt;. Acesso em: 30 jul. 2016.</p><p> <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/51738/dce752a349d1d677c239.png\"></p><p>Na figura, é ilustrado, de forma resumida, o diagrama de classes dos componentes visuais AWT. Qual o padrão de projeto que representa a estrutura de relacionamento entre as classes?<br></p> ",
		"options": [
			"Strategy. ",
			"Observer. ",
			"Decorator. ",
			"Composite.",
			"Chain of Responsability. "
		],
		"answer": "D"
	},
	{
		"enunciation": " <p>Considere os seguintes requisitos funcionais de um software de frente de caixa de uma sorveteria: </p><p><span style=\"font-weight: bold;\">I.</span> ao selecionar um tipo qualquer de sorvete, pode-se adicionar vários condimentos a esse sorvete (tais como coberturas de diferentes sabores, granulados etc.) e o sistema deve calcular o valor total (sorvete + condimentos) dinamicamente ao fechar o pedido; </p><p><span style=\"font-weight: bold;\">II. </span>ao fechar o pedido, o sistema deve permitir adaptar o tipo de pagamento (cartão de crédito ou débito com desconto); </p><p><span style=\"font-weight: bold;\">III.</span> ao concluir o pedido, o sistema deve permitir que o valor total e a descrição do pedido sejam enviados a outros objetos (ou módulos) do sistema que estejam interessados nesses dados. </p><p>Com base nos requisitos funcionais detalhados acima, qual dos padrões de projetos abaixo são adequados para resolver cada requisito funcional, respectivamente? </p> ",
		"options": [
			"Decorator, Adapter e Observer. ",
			"Decorator, Strategy e Observer. ",
			"Composite, Adapter e Observer. ",
			"Composite, Strategy e Command. ",
			"Composite, Singleton e Command."
		],
		"answer": "B"
	},
	{
		"enunciation": " A respeito de padrões de projeto (<span style=\"font-style: italic;\">design pattern</span>), é CORRETO afirmar que ",
		"options": [
			"o padrão <span style=\"font-style: italic;\">abstract factory</span> é utilizado quando um sistema for independente da maneira como seus produtos são criados, compostos ou representados",
			"o padrão <i>template method</i> é utilizado com o intuito de definir uma interface que tem o objetivo de criar um objeto, embora deixe as subclasses decidirem que classe deve ser instanciada",
			"<span style=\"font-style: italic;\">visitor, decorator e builder</span> são exemplos de padrões de projeto comportamentais. ",
			"<span style=\"font-style: italic;\">prototype, singleton e bridg</span>e são exemplos de padrões de projeto estruturais",
			"o padrão <span style=\"font-style: italic;\">observer</span> é do tipo estrutural e define a estrutura de um algoritmo em uma operação, bem como passos para as subclasses. "
		],
		"answer": "A"
	},
	{
		"enunciation": " Um desenvolvedor precisa utilizar um padrão de projeto para interceptar e manipular requisições HTTP de entrada de usuários ao sistema <span style=\"font-style: italic;\">web</span>, e respostas de saída através de filtros de pré-processamento e pós-processamento. Além disso, precisa utilizar outro padrão de projeto capaz de separar as regras de negócio da aplicação das regras de acesso ao banco de dados, permitindo assim centralizar em classes específicas, as operações de conexão ao banco de dados e realização de operações SQL. Os padrões de projeto que o desenvolvedor terá que utilizar são ",
		"options": [
			"<span style=\"font-style: italic;\">Front Controller e Data Transfer Object. </span>",
			"<span style=\"font-style: italic;\">Application Filter e Data Session Façade</span>",
			"<span style=\"font-style: italic;\">Intercepting Filter e Data Access Object. </span>",
			"<span style=\"font-style: italic;\">Controller Helper e Data Manager Object. </span>",
			"<span style=\"font-style: italic;\">Application Controller e Data Persistent Object. </span>"
		],
		"answer": "C"
	},
	{
		"enunciation": " A Engenharia de Software define padrões na construção de projetos, contribuindo para a melhoria de qualidade e confiabilidade, permite o reuso de componentes e a redução de custos e prazos. Sobre padrões de sistemas, assinale a afirmativa correta. ",
		"options": [
			"No desenvolvimento de softwares, o reuso de componentes, objetos, funções e bibliotecas só se tornaram viáveis com a implantação de padrões e da orientação a objeto",
			"A customização de sistemas é uma das formas mais comuns de reuso de sistemas baseados em softwares pela adequação às características da organização. ",
			"Os padrões de sistemas não estão relacionados às metodologias de modelagem, documentação e às tecnologias, apenas ao processo de codificação de programas. ",
			"<span style=\"font-style: italic;\">Design patterns</span> definem elementos essenciais para a composição de um padrão que se aplica apenas à herança e polimorfismo em orientação a objetos. "
		],
		"answer": "B"
	},
	{
		"enunciation": " <p style=\"text-align: justify;\">Com base nos padrões de projeto de software, analise as afirmativas.</p><p style=\"text-align: justify; \"> I - O padrão GoF (<i>Gang of Four</i>) é dividido em quatro grupos: padrão de criação, padrão de estrutura, padrão de contexto e padrão de comportamento. </p><p style=\"text-align: justify; \">II - O padrão <i>Singleton</i> garante que apenas uma única instância de uma determinada classe seja instanciada durante a execução. </p><p style=\"text-align: justify; \">III - O padrão <i>Iterator </i>faz com que os acessos aos elementos de uma coleção de dados sejam realizados de forma sequencial. </p><p style=\"text-align: justify; \">Está correto o que se afirma em </p> ",
		"options": [
			"I e II, apenas",
			"III, apenas",
			"II e III, apenas. ",
			" I, II e III. "
		],
		"answer": "C"
	},
	{
		"enunciation": " <p>O catálogo denominado Padrões GoF (<span style=\"font-style: italic;\">‘Gang of Four’</span>) define soluções reutilizáveis para problemas frequentes em projetos de sistemas de <span style=\"font-style: italic;\">software</span>. </p><p>Essas soluções estão organizadas em três famílias conforme o propósito de cada solução. </p><p>Os padrões de projetos denominados<span style=\"font-style: italic;\"> Interpreter, Prototype e Flyweight</span> que fazem parte desse catálogo, pertencem, respectivamente, às seguintes famílias: <br></p> ",
		"options": [
			"padrão comportamental, padrão de criação e padrão estrutural.",
			"padrão estrutural, padrão comportamental e padrão de criação.",
			"padrão comportamental, padrão estrutural e padrão de criação. ",
			" padrão estrutural, padrão de criação e padrão comportamental. ",
			"padrão de criação, padrão comportamental e padrão estrutural."
		],
		"answer": "A"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">“Representa uma operação a ser executada sobre os elementos da estrutura de um objeto. Permite que se defina uma nova operação sem mudar as classes dos elementos sobre os quais opera.” Trata‐se do padrão de projeto</span> ",
		"options": [
			"<span style=\"font-style: italic;\">Visitor.</span>",
			"<span style=\"font-style: italic;\">Proxy</span>",
			"<span style=\"font-style: italic;\">Decorator.</span>",
			"<span style=\"font-style: italic;\">Memento.</span>",
			"<span style=\"font-style: italic;\">Factory method.</span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Um padrão de projeto nomeia, abstrai e identifica os aspectos‐chave de uma estrutura de projeto comum para torná‐lo à criação de um projeto orientado a objeto reutilizável. Os padrões de projeto podem ser: estruturais, de criação e comportamentais. Assinale, a seguir, dois padrões estruturais.</span> ",
		"options": [
			"<span style=\"font-style: italic;\">State / Builder.</span>",
			"<span style=\"font-style: italic;\">Bridge / Decorator.</span>",
			"<span style=\"font-style: italic;\">Iterator / Mediator.</span>",
			"<span style=\"font-style: italic;\">Strategy / Prototype.</span>",
			"<span style=\"font-style: italic;\">Command / Interpreter.</span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " No contexto de padrões de projeto de software orientado a objetos, são padrões estruturais: ",
		"options": [
			"<span style=\"font-style: italic;\">Builder e Singleton.</span>",
			"<span style=\"font-style: italic;\">Adapter e Bridge.</span>",
			" <span style=\"font-style: italic;\">Interpreter e Iterator</span>",
			"<span style=\"font-style: italic;\">Observer e Mediator.</span>",
			"<span style=\"font-style: italic;\">Builder e Prototype.</span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">O sistema de registro de ponto da CASAN está passando por melhorias e será necessário usar uma biblioteca externa que fornece outras classes e métodos para registrar o funcionário. A equipe de desenvolvimento decidiu, então, criar uma nova classe com um método de registro do funcionário com a assinatura idêntica ao método antigo. Esse método encapsulará a chamada ao método da biblioteca externa, reduzindo assim o impacto da alteração no sistema. Qual dos padrões de projetos a seguir se enquadra nesse tipo de solução?</span> ",
		"options": [
			"Observer.",
			"Prototype.",
			"Decorator.",
			"Singleton.",
			"Adapter."
		],
		"answer": "E"
	},
	{
		"enunciation": " <p><span style=\"font-weight: bold;\">Erich Hamma, Richard Helm, Ralph Johson e John Vlissdes, mais conhecidos como “<span style=\"font-style: italic;\">Gang of Four</span>”, coletaram originalmente 23 <span style=\"font-style: italic;\">Design Pattems</span> (Padrões de Projeto) e organizaram em 3 grupos denominados: </span></p><p><span style=\"font-weight: bold;\">Assinale a alternativa correta. </span></p> ",
		"options": [
			"Startup Standards (Padrões de Inicialização) - Intermediate Patterns (Padrões Intermediários) - Finishing Standards (Padrões de Fiinalização).",
			"Interaction patterns (Padrões de Interação) - Beta Standards (Padrões Beta) - Finishing Standards (Padrões de Fiinalização).",
			"Creational Patterns (Padrões de Criação) - Structural Patterns (Padrões Estruturais) - Behavioral Patterns (Padrões Comportamentais).",
			"Users Patterns (Padrões de Usuários) - Creational Patterns (Padrões de Criação) - Interaction patterns (Padrões de Interação).",
			"Alpha Standards (Padrões Alfa) - Beta Standards (Padrões Beta) - Patterns Gamma (Padrões Gama). "
		],
		"answer": "C"
	},
	{
		"enunciation": " <span style=\"font-weight: bold;\">Em projetos orientados a objetos (OO) em geral aplica-se padrões definidos para serem utilizados no desenvolvimento, como o GRASP, por exemplo. Esses padrões ou “<span style=\"font-style: italic;\">patterns</span>”, como são conhecidos entre os desenvolvedores e projetistas de sistemas, são definidos pela OO como</span> ",
		"options": [
			"o treinamento da equipe dentro dos padrões acordados com o cliente.",
			"a descrição de um problema e sua solução que pode ser aplicado a novos contextos.",
			"as especificações de reuso de código para a padronização das soluções do software.",
			"a documentação necessária para o entendimento do requisito e do projeto de software.",
			"os artefatos necessários para a construção de um software que favoreça a manutenção."
		],
		"answer": "B"
	},
	{
		"enunciation": " Definir o que é um padrão de projeto de maneira clara e objetiva tem sido o objetivo da comunidade de software, desde a década de 80. Assinale a alternativa que associa corretamente as definições a seguir com os padrões a que pertencem. I. - Garantem que uma classe tenha somente uma instância e fornece somente um ponto de acesso à instância. II. - Define uma família de algoritmos, encapsula-os em objetos e torna-os intercambiáveis. Permite que se possam mudar os algoritmos independentemente de quem os está utilizando. ",
		"options": [
			"I – Decorator; II – Façade ",
			"I – Iterator; II – Proxy ",
			"I – Proxy; II – Singleton ",
			"I – Command; II – Strategy",
			"I – Singleton; II – Strategy"
		],
		"answer": "E"
	},
	{
		"enunciation": " Dentre os tipos de Padrões de Projeto (<span style=\"font-style: italic;\">Design Patterns</span>) o que se caracteriza por definir uma interface para a criação de um objeto e que permite que a subclasse decida qual classe instanciar é denominado ",
		"options": [
			"Factory Method. ",
			"Builder. ",
			"Prototype.",
			"Abstract Factory. ",
			"Composite. "
		],
		"answer": "A"
	},
	{
		"enunciation": " Um Analista precisa construir uma aplicação que possui uma função da qual se conhece somente o algoritmo de execução, sendo que o trabalho de codificação para realização da operação desta função tem que ser postergado. Ele optou pelo uso do padrão de projeto comportamental ",
		"options": [
			"<span style=\"font-style: italic;\">Template Method,</span> que permite implementar as partes invariantes de um algoritmo e deixar para subclasses a implementação da parte variante. ",
			"<span style=\"font-style: italic;\">Adapter</span>, que cria classes reutilizáveis que cooperam com classes não relacionadas ou não previstas. ",
			"<span style=\"font-style: italic;\">Singleton</span>, que possibilita o uso de uma instância estendida sem alterar o seu código. ",
			"<span style=\"font-style: italic;\">Abstract Factory</span>, que permite criar uma biblioteca de classes de produtos e revelar somente suas interfaces, não suas implementações. ",
			"<span style=\"font-style: italic;\">Factory Method</span>, que define uma interface para criar objetos, mas deixa que as subclasses decidam que classe instanciar. "
		],
		"answer": "A"
	},
	{
		"enunciation": " Os padrões de projeto ",
		"options": [
			"podem deixar um sistema mais complexo ou degradar a sua performance. O seu uso indevido ou inadequado para um determinado contexto constitui-se em um <span style=\"font-style: italic;\">anti pattern</span>. ",
			"sempre criam flexibilidade e variabilidade pela introdução de níveis adicionais de endereçamento indireto. Como melhoram o desempenho do sistema devem ser sempre aplicados. ",
			"comportamentais abstraem ou adiam o processo de criação dos objetos, ajudando a tornar o sistema dependente de como seus objetos são criados, compostos e representados. ",
			"estruturais se concentram nos algoritmos de herança entre os objetos. Eles não descrevem apenas padrões de objetos ou de classes, mas também os padrões de comunicação entre os objetos. ",
			"de criação se preocupam com a forma como classes e objetos são compostos para formar estruturas maiores. Utilizam o polimorfismo para compor interfaces ou implementações. "
		],
		"answer": "A"
	},
	{
		"enunciation": " <p>O padrão de projetos MVC (Model-View-Controller) tem como objetivo separar lógica de negócios (Model), interface do usuário (View) e o fluxo da aplicação (Control). O padrão MVC usa em sua arquitetura diversos outros padrões de projeto para atingir seu objetivo. </p><p>Em MVC, as classes do Model não devem conhecer nada sobre as camadas de interface que exibem suas informações. O padrão de projeto utilizado pelo padrão arquitetural MVC que é responsável por fazer com que o Model informe mudanças em seu estado para as interfaces, sem conhecê-las, é o: </p> ",
		"options": [
			"façade; ",
			"observer; ",
			"singleton;",
			"Factory Method; ",
			"composite. "
		],
		"answer": "B"
	},
	{
		"enunciation": " <p>Segundo Gamma et al, em seu livro sobre <span style=\"font-style: italic;\">Padrões de Projeto</span>, o uso do padrão <span style=\"font-style: italic; text-decoration: underline;\">Memento</span> apresenta as consequências listadas nas afirmativas a seguir. </p><p>I. A adição e a remoção de produtos em tempo de execução. </p><p>II. A especificação de novos objetos pela variação de seus valores e/ou de sua estrutura. </p><p>III. A redução da necessidade de criação de subclasses. </p><p>Assinale:</p> ",
		"options": [
			"se somente a afirmativa I estiver correta.",
			"se somente as afirmativas I e II estiverem corretas.",
			"se somente as afirmativas I e III estiverem corretas.",
			"se nenhuma das afirmativas estiver correta.",
			"se todas as afirmativas estiverem corretas."
		],
		"answer": "D"
	},
	{
		"enunciation": " O padrão de projeto MVVM foi proposto por John Grossman para simplificar o desenvolvimento de aplicações baseadas nas tecnologias WPF e Windows Phone. O MVVM foi desenvolvido como uma especialização do padrão: ",
		"options": [
			"Model-View-Controller;",
			"Mobile-Interator Model; ",
			"Presentation Model;",
			"Singleton Model; ",
			"Decorator Model."
		],
		"answer": "C"
	},
	{
		"enunciation": " A empresa SOFTPRONTO foi contratada para desenvolver aplicativos de uma instituição financeira que possam ser executados em diferentes plataformas, como PC, celular e tablet. Para evitar a necessidade de criar diferentes soluções para cada plataforma, a empresa decidiu adotar um padrão de projeto que defina uma família de componentes para cada plataforma e uma implementação que os instancie de acordo com a plataforma-alvo na qual a aplicação estará sendo executada. O padrão adequado a essa implementação é: ",
		"options": [
			"Prototype;",
			"Adapter;",
			"Template Method;",
			"Abstract Factory;",
			"Strategy. "
		],
		"answer": "D"
	},
	{
		"enunciation": " Segundo Erich Gamma et al., o padrão de projeto <span style=\"font-style: italic;\">Abstract Factory </span>também é conhecido como ",
		"options": [
			"<span style=\"font-style: italic;\">Virtual</span> Constructor. ",
			"<span style=\"font-style: italic;\">Kit.</span>",
			"<span style=\"font-style: italic;\">Manufacturer</span>",
			"<span style=\"font-style: italic;\">Simulated Constructor.</span>",
			"<span style=\"font-style: italic;\">Fake Generator. </span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " Na engenharia de<em> software</em> existem diversos padrões de projeto que são soluções gerais para serem reutilizadas em problemas semelhantes. No sistema SISPESSOAL o arquiteto decidiu criar somente um objeto para conexão com o banco de dados, visando à economia de recursos computacionais. Quando o objeto for chamado, em qualquer parte do código, sempre será retornada a mesma instância do objeto.<br> Para que isto ocorra será utilizado o padrão de projeto ",
		"options": [
			"<em>Adapter.</em>",
			"Bridge.",
			"<em>Command.</em>",
			"<em>Strategy.</em>",
			"<em>Singleton.</em>"
		],
		"answer": "E"
	},
	{
		"enunciation": " Os padrões de projeto (<em>design patterns</em>) que separam a construção de um objeto complexo da sua representação e que capturam e externalizam um estado interno de um objeto são, respectivamente, ",
		"options": [
			"<em>visitor</em> e <em>builder.</em>",
			"<em>decorator</em> e <em>interpreter</em>.",
			"<em>proxy</em> e <em>state</em>.",
			"<em>command e adapter</em>.",
			"<em>builder </em>e <em>memento</em>."
		],
		"answer": "E"
	},
	{
		"enunciation": " Com relação ao padrão de projeto <span style=\"font-style: italic;\">Proxy</span>, as situações em que este padrão pode ser aplicado são: ",
		"options": [
			"<span style=\"font-style: italic;\">Server Proxy, Surrogate Proxy, Image Proxy, Pointer Proxy.</span>",
			"<span style=\"font-style: italic;\">Protection Proxy, Virtual Proxy, Smart Reference, Remote Proxy.</span>",
			"<span style=\"font-style: italic;\">Phantom Proxy, Smart Reference, Image Proxy, Protection Proxy</span>",
			"<span style=\"font-style: italic;\">Local Proxy, Remote Proxy, Phantom Proxy, Access Proxy.</span>",
			"<span style=\"font-style: italic;\">Mediation Proxy, Virtual Proxy, Remote Proxy, Pointer Proxy</span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " <p>Padrões de projeto visam fornecer soluções para problemas recorrentes do projeto de software. Considerando o catálogo de padrões “<span style=\"font-style: italic;\">Core J2EE patterns</span>”,analise o problema descrito a seguir:</p><p> “<span style=\"font-style: italic;\">A maioria dos aplicativos possuem alguns requisitos, tais como segurança e logging, que são aplicáveis a todas as requisições da aplicação. Adicionar esse tipo de funcionalidade separadamente para cada serviço da aplicação seria demorado, propenso a erros e difícil de manter</span>.” </p><p>Assinale a alternativa que indica o nome do padrão de projeto que pode ser usado para solucionar esse problema.</p> ",
		"options": [
			"<span style=\"font-style: italic;\">Decorator.</span>",
			"<span style=\"font-style: italic;\">InterceptingFilter.</span>",
			"<span style=\"font-style: italic;\">Emmulator</span>",
			"<span style=\"font-style: italic;\">Sessionfaçade.</span>",
			"<span style=\"font-style: italic;\">ApplicationController.</span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " <p>Um Analista de Sistemas necessita utilizar alguns padrões de projeto para solucionar determinados problemas. De acordo com as Categorias de Padrões do<span style=\"font-style: italic;\"> Gang of Four</span><span>− GoF, ele vai utilizar um padrão de cada uma das três categorias, pela ordem, a saber:</span></p><p>− Padrões de Criação </p><p>− Padrões Estruturais </p><p>− Padrões Comportamentais </p><p> Em relação a essas três categorias, os padrões são, respectivamente, </p> ",
		"options": [
			"<span style=\"font-style: italic;\">Strategy, Template Method e Decorator. </span>",
			"<span style=\"font-style: italic;\">Factory Method, Flyweight e Memento. </span>",
			"<span style=\"font-style: italic;\">Bridge, Prototype e Composite. </span>",
			"<span style=\"font-style: italic;\">Abstract Factory, Singleton e Observer</span>",
			"<span style=\"font-style: italic;\">Façade, Proxy e Iterator. </span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " Em muitas situações uma \"aplicação cliente\" precisa criar objetos cuja construção efetiva só é definida em tempo de execução. <span>A \"aplicação cliente\" não deve se preocupar com a criação dos objetos. Trata-se da motivação do padrão de projeto</span> ",
		"options": [
			"<span style=\"font-style: italic;\">Abstract Factory.</span>",
			"<span style=\"font-style: italic;\">Builder.</span>",
			"<span style=\"font-style: italic;\">Factory Method.</span>",
			"<span style=\"font-style: italic;\">Singleton.</span>",
			"<span style=\"font-style: italic;\">Proxy.</span>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Usar compartilhamento para suportar eficientemente grandes quantidades de objeto de granularidade fina é intenção do padrão <span>de projeto</span> ",
		"options": [
			"<span style=\"font-style: italic;\">Command.</span>",
			"<span style=\"font-style: italic;\">Composite.</span>",
			"<span style=\"font-style: italic;\">Prototype.</span>",
			"<span style=\"font-style: italic;\">Interpreter.</span>",
			"<span style=\"font-style: italic;\">Flyweight.</span>"
		],
		"answer": "E"
	},
	{
		"enunciation": " Segundo Erich Gamma et al., o padrão de projeto <span style=\"font-style: italic;\">wrapper </span>pode ",
		"options": [
			"reduzir a interface do componente concreto.",
			"substituir o componente concreto em certos contextos.",
			"<span>ser visto como um </span><span style=\" font-style: italic;\">composite </span><span>simplificado com apenas um componente concreto.</span>",
			"<span>funcionar como uma referência inteligente a outro componente concreto.</span>",
			"compatibilizar a interface do componente concreto com a esperada por seus clientes."
		],
		"answer": "X"
	},
	{
		"enunciation": " No que se refere a <span style=\"font-style: italic;\">design patterns</span>, o padrão que objetiva separar a construção de um objeto complexo da sua representação, de modo que o mesmo processo de construção possa criar diferentes representações, é o ",
		"options": [
			"Prototype.",
			"Mediator.",
			"Builder.",
			"Abstract Factory.",
			"Bridge."
		],
		"answer": "C"
	},
	{
		"enunciation": " Considerando a figura apresentada, que ilustra um modelo conceitual da arquitetura de serviços web orientada a mensagens, julgue o item subsequente, relativos a arquitetura corporativa, padrões de projeto, arquitetura cliente-servidor, arquitetura Internet e Web.<br><br>Para desenhar e implementar uma aplicação flexível de mensageria síncrona ou assíncrona, a qual deve ser capaz de gerar mensagens e envelopes especializados conforme políticas de entrega parametrizadas, é mais recomendado empregar os padrões de <em>design </em>Builder e Strategy que os padrões Memento e Facade.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " O <em>singleton</em> é um padrão de projeto usado em orientação a objetos que limita a instanciação de uma classe a um único objeto. Analise a seguinte implementação de um <em>singleton</em> em Java: <br><br> <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/41029/c230198b1c2d446ce852.png\"><br><br>Considere as três afirmações seguintes acerca da implementação mostrada: <br>I. a declaração do construtor da classe poderia ser omitida sem prejuízo do requisito de unicidade da instância; <br>II. a declaração do construtor da classe é indispensável, dado o requisito de unicidade da instância, porém o modificador private poderia ser omitido; <br>III. a instância única será construída quer a classe Singleton seja referenciada na aplicação quer não. <br>Assinale se: <br><br> ",
		"options": [
			"I, II e III são verdadeiras;",
			"I e III são verdadeiras, II é falsa;",
			"I, II e III são falsas;",
			"I e II são verdadeiras, III é falsa;",
			"II e III são verdadeiras, I é falsa."
		],
		"answer": "C"
	},
	{
		"enunciation": " Com base nessa situação hipotética, julgue o item a seguir, com relação aos padrões de projeto.<br><br>O padrão estrutural <em>bridge</em> resolve corretamente o que se pede em II. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com base nessa situação hipotética, julgue o item a seguir, com relação aos padrões de projeto.<br><br>O padrão <em>builder</em> atende corretamente o que se pede em I. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com base nessa situação hipotética, julgue o item a seguir, com relação aos padrões de projeto.<br><br>O padrão de criação <em>prototype</em> atende corretamente o que se pede em VI. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com base nessa situação hipotética, julgue o item a seguir, com relação aos padrões de projeto.<br><br>O padrão <em>façade</em> atende corretamente o que se pede em V. Esse padrão estrutural define uma interface de nível mais alto que torna o subsistema mais fácil de ser usado. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com base nessa situação hipotética, julgue o item a seguir, com relação aos padrões de projeto.<br><br>Atendendo corretamente o que se pede em IV, o padrão comportamental <em>strategy</em> define uma família de algoritmos, encapsula cada um deles e os torna intercambiáveis. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com base nessa situação hipotética, julgue o item a seguir, com relação aos padrões de projeto.<br><br>O padrão comportamental <em>memento </em>atende corretamente o que se pede em III. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Um Programador está desenvolvendo uma aplicação em que os objetos mudam de estado com muita frequência. Em tempo de execução, a mudança no estado lógico destes objetos implica também na alteração em seu comportamento. Nessa aplicação é ideal que o Programador utilize um <em>design pattern</em> comportamental cuja classe <em>Context </em>é a interface principal para as requisições dos clientes. O Programador deve utilizar o <em>design pattern</em> <em></em> ",
		"options": [
			"Prototype",
			"State.",
			"Adapter.",
			"Singleton.",
			"Façade."
		],
		"answer": "B"
	},
	{
		"enunciation": " Qual padrão de projeto visa garantir que um e apenas um objeto seja instanciado para uma dada classe? ",
		"options": [
			"<span style=\"font-style: italic;\">Factory Method</span>",
			"<span style=\"font-style: italic;\">Singleton</span>",
			"<span style=\"font-style: italic;\">Abstract Factory</span>",
			" <span style=\"font-style: italic;\">Builder</span>"
		],
		"answer": "B"
	},
	{
		"enunciation": " Um Analista de Sistemas, em função da extrema tensão causada pelo curto prazo de entrega do novo <em>software</em>, concentrou a maior parte do sistema em uma classe central com dezenas de métodos e atributos. Os métodos foram obtidos de soluções prontas disponíveis nas comunidades de desenvolvedores e ele conseguiu entregar o sistema funcionando no prazo. O Analista ",
		"options": [
			"utilizou anti-patterns consagrados para os métodos.",
			"criou a classe central baseado no <em>design pattern</em> Singleton. ",
			"utilizou herança ao criar os métodos. ",
			"aplicou os princípios do <em>design pattern</em> conhecido como<em> Input Kludge</em>",
			"incorreu em uma solução <em>anti-pattern</em> conhecida como <em>the blob</em>. "
		],
		"answer": "E"
	},
	{
		"enunciation": " Assinale a opção que apresenta os padrões de projeto que alteram, respectivamente, a interface para um subsistema e a informação privada que será armazenada fora de um objeto. ",
		"options": [
			"<span style=\"font-style: italic;\">Composite</span> e <span style=\"font-style: italic;\">State</span>",
			"<span style=\"font-style: italic;\">Flyweight</span> e <span style=\"font-style: italic;\">Mediator</span>",
			"<span style=\"font-style: italic;\">Adapter</span> e <span style=\"font-style: italic;\">Chain of Responsibility</span>",
			"<span style=\"font-style: italic;\">Façade</span> e <span style=\"font-style: italic;\">Memento</span>",
			"<span style=\"font-style: italic;\">Proxy </span>e <span style=\"font-style: italic;\">Observer</span>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Um técnico deseja usar um padrão de projeto de criação que permita que as subclasses da aplicação possam variar. Este padrão deverá ser focado no processo de instanciação e encapsular a criação de objetos, deixando as subclasses decidirem quais objetos criar e garantindo assim, baixo acoplamento. Para conseguir o que deseja, o técnico selecionou o padrão de projeto que possui uma classe abstrata Creator que define um método especifico para criação de objetos. Trata-se do padrão: ",
		"options": [
			"<span style=\"font-style: italic;\">Prototype.</span>",
			"<span style=\"font-style: italic;\">Adapter.</span>",
			"<span style=\"font-style: italic;\">Factory Method.</span>",
			"<span style=\"font-style: italic;\">Composite.</span>",
			"<span style=\"font-style: italic;\">Façade</span>."
		],
		"answer": "C"
	},
	{
		"enunciation": " A empresa em que um Analista trabalha se comprometeu com um cliente em satisfazer todos os requisitos para uma determinada aplicação de <em>software</em> no prazo previsto, porém, de fato, não vai conseguir cumprir o prometido, mesmo assim, vem apresentando funções não implementadas como se já tivessem sido construídas. Percebe-se, nesse caso, o <em>antipattern </em>de gerenciamento de projetos conhecido como ",
		"options": [
			"<em>Chain of Responsibility.</em>",
			"<em>Fire Drill</em>.",
			"<em>Abstract Factory.</em>",
			"<em>Smoke and Mirrors. </em>",
			"<em>Analysis Paralysis. </em>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Um Técnico está participando do desenvolvimento de uma aplicação que funcionará simultaneamente em um dispositivo móvel e no ambiente corporativo, necessitando, portanto, de um processo de sincronização entre as informações processadas no dispositivo móvel e na base corporativa. Ambas as aplicações devem se comunicar com um objeto que deve ser único para processar este sincronismo, a fim de evitar a possibilidade de criar dados na base. O Técnico sugeriu a utilização do <em>Singleton</em>, um ",
		"options": [
			"aplicativo baseado na arquitetura cliente-servidor.",
			"<em>web service</em> orientado a serviços, baseado em SOA.",
			"padrão de projeto que precisa do <em>Create</em>, que é responsável pelo processo de criação do objeto.",
			"padrão estrutural que se preocupa com a forma como classes e objetos são compostos para formar estruturas <em>single</em>",
			"padrão de projeto que define um método estático que permite aos clientes obterem o objeto único."
		],
		"answer": "E"
	},
	{
		"enunciation": " <span>O padrão de projeto que permite, sem violar o encapsulamento, capturar e externalizar um estado interno de um objeto de maneira que o objeto possa ser restaurado para esse estado mais tarde é:</span> ",
		"options": [
			"composite;",
			"memento;",
			"bridge;",
			"builder;",
			"strategy."
		],
		"answer": "B"
	},
	{
		"enunciation": " Julgue o próximo item, relativo a <em>Domain-Driven Design</em> e<em> design patterns.</em><br><br>Um dos princípios-chave do <em>Domain-Driven Design</em> é o uso de uma linguagem ubíqua com termos bem definidos, que integram o domínio do negócio e que são utilizados entre desenvolvedores especialistas de negócio.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Julgue o próximo item, relativo a <em>Domain-Driven Design</em> e <em>design patterns</em>. <br> <em>Adapter</em> é um padrão do tipo estrutural que lida com a interface para um objeto, ao passo que <em>builder</em> refere-se a como um objeto composto será criado e instanciado por uma classe. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Para estruturar a solução para o problema da empresa, o Analista de Sistemas utilizou um padrão de projeto que tem a intenção de evitar o acoplamento do remetente de uma solicitação ao seu receptor, ao dar a mais de um objeto a oportunidade de tratar a solicitação e encadear os objetos receptores, passando a solicitação ao longo da cadeia até que um objeto a trate. O padrão de projeto utilizado é um dos padrões comportamentais da GoF (<em>Gang of Four</em>), denominado ",
		"options": [
			"<em>Adapter</em>.",
			"<em>Composite Method</em>.",
			"<em>Chain of Responsibility.</em>",
			"<em>Factor Method</em>.",
			"<em>Prototype</em>."
		],
		"answer": "C"
	},
	{
		"enunciation": " <p><span style=\"font-weight: bold;\">Com relação a <span style=\"font-style: italic;\">Design Patterns</span>, sob a ótica do GoF (<span style=\"font-style: italic;\">Gang of Four</span>), identifique as afirmativas a seguir como verdadeiras (V) ou falsas (F): </span></p><p><span style=\"font-weight: bold;\">( ) Composite = Compor objetos em estruturas de árvore (hierarquias todo-parte), permitindo tratar objetos individuais e composições de maneira uniforme.</span></p><p><span style=\"font-weight: bold;\"> ( ) Bridge = Desacoplar uma abstração de sua implementação para que as duas partes possam variar independentemente.</span></p><p><span style=\"font-weight: bold;\"> ( ) Proxy = Prover um substituto ou ponto de acesso através do qual um objeto possa controlar/delegar o acesso a outro. </span></p><p><span style=\"font-weight: bold;\">( ) Flyweight = Compartilhar partes comuns dos objetos, permitindo suportar eficientemente grandes quantidades de objetos refinados. </span></p><p><span style=\"font-weight: bold;\">Assinale a alternativa que apresenta a sequência correta, de cima para baixo. </span></p> ",
		"options": [
			"V – F – F – V. ",
			"F – V – V – F. ",
			"V – V – V – V. ",
			"F – V – F – V. ",
			"V – F – V – F. "
		],
		"answer": "C"
	},
	{
		"enunciation": " Julgue o próximo item, relativo a <em>design patterns</em>, ECM (<em>Enterprise Content Management</em>) e gerenciamento de processos de negócio (BPM). <br> Uma das disciplinas do <em>emergent design </em>refere-se ao uso de padrões de projeto para criar arquiteturas de aplicativos que sejam resilientes e flexíveis. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Julgue o próximo item, relativo a <em>design patterns</em>, ECM (<em>Enterprise Content Management</em>) e gerenciamento de processos de negócio (BPM). <br> O padrão de projeto <em>mediator</em> visa padronizar a gramática e a interpretação de uma linguagem, ao passo que o padrão<em> </em><em>iterator</em> verifica como os objetos padronizados interagem entre si. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Acerca de arquitetura de <em>software</em> e <em>Domain-Driven Design</em>, julgue o seguinte item. <br> <em>Domain-Driven Design</em> pode ser aplicada ao processo de concepção arquitetural de um sistema de <em>software</em>, sendo que <em>domain</em>, em um <em>software</em>, designa o campo de ação, conhecimento e influência. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " O Java EE pode ser organizado em três conjuntos de padrões de projeto, de acordo com as camadas da arquitetura JEE: Padrões da Camada de Apresentação (<em>Web Tier Patterns</em>), Padrões da Camada de Negócio (<em>Business Tier Patterns</em>) e Padrões da Camada de Integração (<em>EIS Tier Patterns</em>). São padrões de projeto da Camada de Apresentação: ",
		"options": [
			"<em>Intercepting Filter</em> e <em>Front Controller</em>.",
			"<em>Session Façade</em> e <em>Composite Entity</em>.",
			"<em>Service Activator</em> e <em>Web Service Broke</em>.",
			"<em>Data Access Object </em>e <em>View Helper</em>.",
			"<em>Application Service</em> e <em>Transfer Object</em>."
		],
		"answer": "A"
	},
	{
		"enunciation": " <p><span>Julgue o item que se segue, a respeito da arquitetura de </span><span style=\" font-style: italic;\">software </span><span>e de ambientes computacionais.</span></p><p>O Prototype é um padrão de criação de projeto que estabelece que um objeto deve possuir apenas uma instância, de modo que uma única classe gera somente um objeto, que deve estar disponível para todo o escopo da aplicação.<span><br></span></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p>Julgue o item que se segue, a respeito da arquitetura de <span style=\"font-style: italic;\">software </span>e de ambientes computacionais.</p><p><span>O Adapter é um padrão estrutural que permite a integração de classes que possuem interfaces incompatíveis.</span><br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Diante da crescente demanda por automatização de processos de negócio, o gerente de desenvolvimento de sistemas de informação busca a maximização do reúso de software. A abordagem de reúso que utiliza abstrações genéricas, não incluindo detalhes de implementação, que mostram objetos abstratos e concretos e interações, é: ",
		"options": [
			"design pattern;",
			"desenvolvimento baseado em componentes;",
			"framework de aplicação;",
			"sistemas orientados a serviços;",
			"bibliotecas de programas."
		],
		"answer": "A"
	},
	{
		"enunciation": " Julgue o seguinte item, relativo à arquitetura de <span style=\"font-style: italic;\">software</span> <span>orientado a serviços (SOA) e a padrões de projeto.</span> <span><br></span> Nos padrões de projeto (<span style=\"font-style: italic;\">design patterns</span>) estruturais, <span>utilizam-se técnicas que valorizam um forte acoplamento </span><span>entre as classes para favorecer o aprendizado e a portabilidade </span><span>das aplicações.</span> <span><br></span> <span><br></span> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Julgue o seguinte item, relativo à arquitetura de<span style=\"font-style: italic;\"> software</span> <span>orientado a serviços (SOA) e a padrões de projeto.</span> <span><br></span> Os padrões de projeto classificados como EAI (<span style=\"font-style: italic;\">enterprise </span><span><span style=\"font-style: italic;\">integration patterns</span>) fundamentam-se nas aplicações </span><span>distribuídas e privilegiam o uso das mensagens eletrônicas </span><span>síncronas.</span> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p>Julgue o seguinte item, acerca de padrões de projeto.</p><p><br></p><p>Para o desenvolvimento de <span style=\"font-style: italic;\">software</span>, o uso de padrões de projeto cria o benefício de permitir a transformação direta em código de soluções genéricas e repetíveis.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p>Julgue o seguinte item, acerca de padrões de projeto.</p><p><br></p><p>Com o uso de Iterator, a implementação dos algoritmos de travessia em agregações é sempre feita no próprio Iterator, o que simplifica as aplicações que usam elementos de agregação.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p>Julgue o seguinte item, acerca de padrões de projeto.</p><p><br></p><p>A criação, por meio do Singleton, de várias instâncias de uma mesma classe reduz o desempenho da aplicação.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p>Julgue o seguinte item, acerca de padrões de projeto.</p><p><br></p><p>Os padrões classificados como estruturais podem ser usados para diminuir o acoplamento entre os objetos que compõem um sistema orientado a objetos.<br></p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Assinale a opção correta relativa a exemplos de padrões de projeto de diferentes tipos. ",
		"options": [
			"Padrão de código: o recuo deve ser usado para identificar instruções <em>case</em>, dimensão das margens, formação das equipes.",
			"Padrões de requisito de especificação: fixação do tamanho do programa, cálculos estratégicos, data de vencimento, domínios convencionais que devem ser excluídos do programa.",
			"Padrões de requisito de especificação: discussão da finalidade do programa, cálculos de acertos lógicos, data de aceitação, valor comercial do programa.",
			"Padrões de documento: inclusão de data e hora como comando, extensão do programa,limite de compilações do programa.",
			"Padrões de requisito de especificação: descrição da finalidade do programa, cálculos especiais, data de vencimento, regras comerciais que devem ser incorporadas ao programa."
		],
		"answer": "E"
	},
	{
		"enunciation": " <p> A arquitetura de software e padrões de projeto incluem modularidade, onde o software é dividido em componentes nomeados separadamente e endereçáveis, integrados para satisfazer aos requisitos do problema. </p><p>Diante do conceito de modularidade, julgue corretamente as afirmativas a seguir como verdadeiras (V) ou falsas (F) e assinale a alternativa correspondente.</p><p><br></p><p>I – É mais fácil resolver um problema quando o dividimos em partes gerenciáveis.</p><p><br></p><p>II – O custo para desenvolver um módulo de software individual diminui ao mesmo tempo em que o número total de módulos aumenta.</p><p><br></p><p> III – À medida em que o número de módulos cresce, o esforço (custo) para integrar esses módulos diminui.<br></p> ",
		"options": [
			"V, F, V",
			"V, V, V",
			"F, V, V",
			"V, V, F",
			"V, F, F"
		],
		"answer": "D"
	},
	{
		"enunciation": " Considere: <br><br>I. A aplicação cliente interage com uma fábrica genérica de objetos.<br> II. Os objetos serão gerados efetivamente pela fábrica concreta que estiver sendo utilizada no momento. <br>III. A aplicação cliente não precisa ser configurada para interagir com cada uma das fábricas concretas.<br> IV. Novas fábricas concretas podem ser agregadas, alteradas ou retiradas do sistema sem necessidade de alterações na aplicação cliente. <br><br> Estas são características e propriedades do padrão de projeto <br> ",
		"options": [
			"<em>Factory Method. </em>",
			"<em>Builder</em>",
			"<em>Prototype.</em><em> </em>",
			"<em>Abstract Factory</em>.",
			"<em>Singleton. </em>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Os padrões de projeto podem ser classificados em padrões de criação, padrões estruturais e padrões comportamentais. São exemplos de padrões de projetos comportamentais: ",
		"options": [
			"Abstract Factory e Builder. ",
			"Adapter e Bridge.",
			"Facade e Composite. ",
			"Decorator e Singleton. ",
			"Observer e Strategy. "
		],
		"answer": "E"
	},
	{
		"enunciation": " Padrões de Projeto descrevem soluções para problemas recorrentes no desenvolvimento de sistemas de software orientados a objetos. Um padrão de projeto estabelece um nome e define o problema, a solução, quando aplicar esta solução e suas consequências. Um dos padrões de projeto mais utilizados é o padrão Adapter (adaptador), que tem como função: ",
		"options": [
			"garantir a existência de apenas uma instância de uma classe, mantendo um ponto global de acesso ao seu objeto;",
			"adicionar dinamicamente um comportamento a um objeto existente sem alterar o código das classes existentes;",
			"fornecer uma interface para a criação de famílias de objetos correlatos ou dependentes sem a necessidade de especificar a classe concreta destes objetos;",
			"definir novas operações sem alterar as classes dos elementos sobre os quais ele opera;",
			"permitir que classes com interfaces incompatíveis possam interagir."
		],
		"answer": "E"
	},
	{
		"enunciation": " Um padrão de projeto de software é um par problema/solução definido e bem conhecido que pode ser aplicado a novos contextos. O padrão de projeto GoF Singleton ",
		"options": [
			"garante que uma classe tenha várias instâncias e um ponto global de acesso a elas.",
			"é adequado para gerenciar grupos de recursos, como grupos de conexões.",
			"é adequado para criar em um mesmo momento diferentes objetos de uma classe.",
			"encapsula uma solicitação como um objeto, o que lhe permite parametrizar outros objetos."
		],
		"answer": "B"
	},
	{
		"enunciation": " Os padrões de projeto tornam mais fácil reutilizar projetos e arquiteturas bem sucedidas. Atualmente existem diversos padrões de projetos conforme abaixo: <br><br>I. Fornece uma interface para a criação de famílias de objetos relacionados ou dependentes sem especificar suas classes concretas. <br><br> II. Converte a interface de uma classe em outra interface esperada pelos clientes permitindo que certas classes trabalhem em conjunto, pois de outra forma, seria impossível por causa de suas interfaces incompatíveis. <br><br> III. Fornece uma maneira de acessar sequencialmente os elementos de uma agregação de objetos sem expor sua representação subjacente. <br><br> Os padrões de projeto apresentados em I, II e III são, respectivamente, ",
		"options": [
			"<i>Façade, Builder e Mediator. </i>",
			"<i>Abstract Factory, Adapter e Iterator. </i>",
			"<i>Façade, Adapter e Interpreter.</i>",
			"<i>Singleton, Builder e Mediator. </i>",
			"<i>Abstract Factory, Prototype e Iterator. </i>"
		],
		"answer": "B"
	},
	{
		"enunciation": " Analise as afirmativas abaixo em relação aos padrões de projetos de software: <br><br>I. Builder: atribui responsabilidades adicionais a um objeto dinamicamente. Fornece uma alternativa flexível à utilização de subclasses para a extensão de funcionalidades. <br><br>II. Decorator: compõe objetos em estrutura de árvore para representar hierarquias do tipo partes- todo. Permite que os clientes da estrutura tratem objetos individuais e composições de objetos de maneira uniforme. <br><br> III. Memento: sem violar o encapsulamento, captura e externaliza um estado interno de um objeto, de modo que o mesmo possa posteriormente ser restaurado para esse estado. <br><br>Está correto o que se afirma em: ",
		"options": [
			"somente I;",
			"somente II;",
			"somente III;",
			"somente I e II;",
			"I, II e III."
		],
		"answer": "C"
	},
	{
		"enunciation": " O padrão de projeto <i>singleton</i> tem por objetivo ",
		"options": [
			"criar famílias de objetos por meio de uma única interface.",
			"permitir a variação de interfaces.",
			"disponibilizar interfaces simplificadas.",
			"processar vários objetos com características similares",
			"assegurar que cada classe tenha uma única instância."
		],
		"answer": "E"
	},
	{
		"enunciation": " Acerca de padrões de projeto, julgue o item subsequente.<br><br>O <i>chain of responsability</i> é comportamental e tem como objetivo evitar o acoplamento do remetente de uma solicitação ao seu receptor, de modo a permitir a mais de um objeto a oportunidade de tratar solicitação. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Acerca de padrões de projeto, julgue o item subsequente.<br><br>Para tratar de maneira uniforme objetos individuais em estruturas de árvores que representem hierarquias partes-todo, o padrão <i>composite</i> é mais adequado que o <i>decorator.</i> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <b>Em padrões de projeto, delegação é uma maneira de tornar a composição tão poderosa para fins de reutilização quanto à herança, sendo que dois objetos são envolvidos no tratamento de uma solicitação. É uma boa escolha de projeto somente quando ela simplifica mais do que complica. Ao definir quais padrões deverão ser utilizados no projeto, considerando que diversos padrões de projeto usam delegação, mas três padrões dependem dela. Assinale‐os.</b><br> ",
		"options": [
			"<i> State, Strategy e Visitor. </i>",
			"<i> Adapter, Bridge e Composite. </i>",
			"<i> Builder, Prototype e Singleton. </i>",
			"<i> Façade, Command e Decorator. </i>",
			"<i> Factory Method, Interpreter e Template Method. </i>"
		],
		"answer": "A"
	},
	{
		"enunciation": " <strong>Um projeto de software orientado a objetos não é algo muito fácil. Mas, projetar software reutilizável, orientado a objetos, é ainda mais complicado. Muitas ações devem ser realizadas como: identificar objetos, separá‐los em classes, definir interfaces, entre outros. Normalmente, o projeto deve ser específico para aquele problema que se quer resolver, mas também genérico o suficiente para atender problemas e requisitos futuros. Os padrões de projeto tornam mais fácil a reutilização de projetos e arquiteturas bem sucedidas. Também ajudam a escolher alternativas de projeto que tornam um sistema reutilizável e a evitar alternativas que comprometam a reutilização. Os padrões de projeto podem ser classificados em: de criação, estruturais e comportamentais. Assinale, a seguir, um padrão de projeto da classe estrutural.</strong> ",
		"options": [
			"<em> State. </em>",
			"<em> Adapter. </em>",
			"<em>Mediator. </em>",
			"<em>Memento. </em>",
			"<em> Chain of Responsability</em>."
		],
		"answer": "B"
	},
	{
		"enunciation": " Em uma aplicação distribuída que possua uma camada de objetos de negócio localizada no servidor da aplicação, há a necessidade de comunicação entre processos que estão sendo executados nas máquinas cliente e servidora. Para implementar essa comunicação, é possível o uso do padrão Fachada Remota (<em>Remote Facade</em>), do catálogo P of EAA. Nesse contexto, considere as afirmações a seguir.<br><br>O uso do padrão Fachada Remota para intermediar chamadas a processos em execução por um servidor de aplicações, a partir de um cliente fisicamente remoto, aumenta o desempenho da aplicação<br><br> <b>PORQUE<br></b><br><br>Uma característica do objeto Fachada Remota é que ele implementa parte da lógica de negócio no lado cliente, o que diminui a quantidade de chamadas necessárias ao servidor.<br><br>Analisando as afirmações, conclui-se que ",
		"options": [
			"as duas afirmações são verdadeiras e a segunda justifica a primeira.",
			"as duas afirmações são verdadeiras e a segunda não justifica a primeira.",
			"a primeira afirmação é verdadeira e a segunda é falsa.",
			"a primeira afirmação é falsa e a segunda é verdadeira.",
			"as duas afirmações são falsas."
		],
		"answer": "E"
	},
	{
		"enunciation": " Um programador deve criar um novo projeto que envolva vários tipos de produtos com as mesmas funções, mas com peculiaridades diferentes. Por exemplo, o produto do tipo gold realiza as mesmas funções que o produto <i>standard</i>, mas, a cada uma delas, armazena a última configuração para fornecer uma memória para o usuário. O padrão apropriado para representar as classes deste projeto é o ",
		"options": [
			"Facade, pois ele pode juntar vários comportamentos em um só, criando uma visão simplificada do sistema.",
			"Strategy, pois ele permite criar uma única interface com várias implementações que diferem apenas em seu comportamento.",
			"Proxy, pois este permite criar uma representação menos custosa de cada um dos objetos do sistema.",
			"Iterator, pois este permite visitar todos os objetos do sistema sem se preocupar com a classe real de cada um deles.",
			"Singleton, pois este garante a existência de uma única instância de produto e evita a confusão entre as classes."
		],
		"answer": "B"
	},
	{
		"enunciation": " Um Analista de Desenvolvimento de Sistemas do CNMP deve indicar o padrão de projeto mais adequado para ser aplicado na seguinte situação:<br><br><em>Uma aplicação que existe simultaneamente em um dispositivo móvel e no ambiente corporativo, necessita de um processo de sincronização entre as informações processadas no dispositivo móvel e na base corporativa. Ambas as aplicações devem se comunicar com um objeto que deve ser único para processar este sincronismo, a fim de evitar a possibilidade de criar dados na base.</em><br><br>O padrão de projeto corretamente indicado pelo Analista deve ser ",
		"options": [
			"<em>Factory Method, </em>um padrão de criação, que busca definir o fluxo de um algoritmo em uma operação, postergando (<em>deferring</em>) alguns passos para subclasses, sem mudar a estrutura do mesmo.",
			"<em>Prototype,</em> um padrão estrutural, que busca fornecer uma interface para criação de famílias de objetos relacionados ou dependentes sem especificar suas classes concretas.",
			"<em>Singleton</em>, um padrão de criação, que busca garantir que um objeto terá apenas uma única instância, ou seja, uma classe irá gerar apenas um objeto e que este estará disponível de forma única para todo o escopo de uma aplicação.",
			"<em>Command</em>, um padrão comportamental, que busca definir o fluxo de um algoritmo em uma operação, postergando (<em>deferring</em>) alguns passos para subclasses, sem mudar a estrutura do mesmo.",
			"<em>Façade</em>, um padrão estrutural, que busca garantir que um objeto terá apenas uma única instância, ou seja, uma classe irá gerar apenas um objeto e que este estará disponível de forma única para todo o escopo de uma aplicação."
		],
		"answer": "C"
	},
	{
		"enunciation": " Uma API para desenvolvimento de aplicações distribuídas deve dar aos programadores que a utilizam a possibilidade de invocar métodos definidos em objetos localizados em uma máquina remota, como se esses métodos estivessem definidos em um objeto local. <br>Com a intenção de resolver esse problema, essa API pode usar, em sua implementação, uma variante do padrão estrutural GoF (Gang of Four) chamado ",
		"options": [
			"Decorator",
			"Bridge",
			"Fly Weight",
			"Proxy",
			"Interpreter"
		],
		"answer": "D"
	},
	{
		"enunciation": " Uma aplicação orientada a objetos deve ser construída para ler arquivos em formato RTF (Rich Text Format) e permitir aos seus usuários a exportação do conteúdo desse arquivo para diferentes formatos de saída (PDF, DOC, ASCII, HTML, etc). Uma restrição é que a aplicação deve ser construída de tal forma que os passos do processo de construção de cada arquivo de saída sejam separados das diferentes representações dos formatos de saída, ou seja, das diferentes lógicas de exportação para cada um dos formatos de saída. Dessa forma, diferentes implementações desses passos poderiam gerar diferentes representações (formatos de saída).<br><br>Dentre os padrões de projeto do catálogo GoF (Gang of Four) listados abaixo, qual deve ser usado na implementação dessa aplicação, de tal forma a contemplar a restrição descrita? ",
		"options": [
			"Abstract Factory",
			"Builder",
			"Command",
			"Composite",
			"Singleton"
		],
		"answer": "B"
	},
	{
		"enunciation": " Um padrão de projeto do catálogo GoF (Gang of Four) é o Template Method, cuja finalidade é ",
		"options": [
			"definir uma família de algoritmos, encapsular cada um e fazê-los intercambiáveis.",
			"desacoplar uma abstração de sua implementação, de tal forma que as duas possam variar independentemente.",
			"encapsular uma requisição para parametrizar clientes com diferentes requisições e filas e dar suporte a ações reversíveis.",
			"oferecer uma interface única de nível mais elevado para um conjunto de interfaces de um subsistema.",
			"permitir a definição da parte invariante de um algoritmo separadamente de sua parte variante."
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão de projeto que tem como finalidade separar a construção de um objeto complexo de sua representação, de forma que um mesmo processo de construção possa criar diferentes representações é conhecido como ",
		"options": [
			"Abstract Factory",
			"Builder",
			"Composite",
			"Factory Method",
			"Prototype"
		],
		"answer": "B"
	},
	{
		"enunciation": " Um Padrão de Projeto de Software ou Padrão de Desenho de Software, também muito conhecido pelo termo original em inglês Design Pattern, descreve uma solução geral reutilizável para um problema recorrente no desenvolvimento de sistemas de software. <br><br>A descrição de um padrão de projeto deve conter ",
		"options": [
			"o código final, em uma linguagem de programação, da solução apresentada.",
			"a descrição de uma aplicação completa e concreta que contenha o padrão sendo definido.",
			"a indicação de uma linguagem de programação orientada a objetos que contenha os conceitos que ofereçam suporte direto à implementação dos padrões descritos e sua utilização na solução apresentada.",
			"a descrição do problema utilizando uma linguagem formal.",
			"um nome, a descrição do problema, a solução utilizando alguma notação ou linguagem própria de projeto, em quais situações a solução é aplicável, e as consequências do uso da solução apresentada."
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão de projeto que permite a uniformidade do tratamento em uma hierarquia na qual coexistem objetos primitivos e agregados de objetos, todos da mesma espécie, é denominado ",
		"options": [
			"<i>Composite. </i>",
			"<i>Multiton.</i>",
			"<i>Module. </i>",
			"<i>Façade. </i>",
			"<i>Decorator. </i>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Um padrão de projeto (do inglês design pattern) é uma solução reutilizável para problemas que ocorrem com frequência dentro de um determinado contexto de um projeto de sistema de software orientado a objetos, e que ganhou popularidade com o catálogo denominado Padrões GoF ('Gang of Four') que define e organiza essas soluções reutilizáveis em 3 famílias conforme o propósito de cada solução. <br><br> Os padrões de projetos denominados Composite, Factory Method e Memento, que fazem parte desse catálogo, pertencem, respectivamente, às famílias: ",
		"options": [
			"padrão de criação, padrão estrutural e padrão comportamental;",
			"padrão estrutural, padrão comportamental e padrão de criação;",
			"padrão comportamental, padrão estrutural e padrão de criação;",
			"padrão estrutural, padrão de criação e padrão comportamental;",
			"padrão de criação, padrão comportamental e padrão estrutural."
		],
		"answer": "D"
	},
	{
		"enunciation": " Há um tipo de padrão de projeto de software denominado arquitetural sobre o qual é correto dizer que, prioritariamente, ",
		"options": [
			"contempla o relacionamento entre subsistemas e componentes do <i>software.</i>",
			"define a forma de elaboração do cronograma do projeto.",
			"define o editor de texto a ser utilizado nos documentos do projeto.",
			"estabelece o número de projetistas do projeto",
			"somente é utilizado na fase de teste do <i>software.</i>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Os padrões Singleton, Proxy e Memento são classificados, respectivamente, como ",
		"options": [
			"de criação, estrutural e comportamental",
			"de criação, estrutural e estrutural",
			"de criação, comportamental e estrutural",
			"estrutural, comportamental e comportamental",
			"estrutural, comportamental e de criação"
		],
		"answer": "A"
	},
	{
		"enunciation": " Julgue os itens subsequentes, relativos aos padrões de projeto. <br><br>Em programação orientada a objetos, o padrão de projeto denominado Singleton define uma classe que possui apenas uma instância e provê um ponto de acesso local a ela. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Julgue os itens subsequentes, relativos aos padrões de projeto.<br><br>Em programação orientada a objetos, o padrão de projeto denominado Iterator define uma forma de acesso sequencial aos elementos de um objeto agregado, sem expor sua representação interna. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Em relação aos padrões de projeto, são exemplos de padrão de criação, padrão estrutural e padrão comportamental, respectivamente: ",
		"options": [
			"abstract factory, bridge e observer.",
			"mediator, composite e facade",
			"decorator, singleton ememento.",
			"prototype, adapter e composite.",
			"visitor, decorator e builter."
		],
		"answer": "A"
	},
	{
		"enunciation": " Angela pretende utilizar alguns<i> design patterns </i>em seu projeto Java e, após algumas pesquisas, encontrou o que buscava em <i>Singleton</i> e<i> Prototype </i>cujos objetivos são, respectivamente: <br><br>I. Encapsular a escolha das classes concretas a serem utilizadas na criação dos objetos de diversas famílias. <br><br>II. Permitir a criação de uma única instância de uma classe e fornecer um modo para recuperá-la. <br><br>III. Possibilitar o reaproveitamento de objetos. <br><br> IV. Possibilitar a criação de novos objetos a partir da cópia de objetos existentes. <br><br> Está correto o que consta APENAS em ",
		"options": [
			"I e II.",
			"I e III.",
			"II e III.",
			"II e IV",
			"III e IV."
		],
		"answer": "D"
	},
	{
		"enunciation": " Quanto aos design patterns, é correto afirmar que: ",
		"options": [
			"o maior problema com a utilização dos design patterns é que eles não suportam o uso de ferramentas CASE e podem trazer erros provenientes da percepção de quem os criou.",
			"são projetos concretos que incluem detalhes de implementação.",
			"são conjuntos de classes abstratas e concretas que podem ser adaptadas e ampliadas para criar sistemas de aplicações.",
			"a UML pode ser utilizada para representar frameworks, mas não é tão ampla ao ponto de oferecer suporte à representação dos design patterns.",
			"descrevem melhores práticas, bons projetos, e captam a experiência de uma maneira possível de ser usada por outros."
		],
		"answer": "E"
	},
	{
		"enunciation": " \"É um padrão de projeto (<i>design pattern</i>) que separa o modelo de domínio, a apresentação e as ações com base nas entradas do usuário em três grupos distintos. Utilizando este padrão, o modelo pode ser construído e testado independentemente da apresentação visual. É um padrão de projeto utilizado principalmente para a construção de aplicações web que se tornou fundamental para a separação da lógica de interface com o usuário e da lógica de negócios.\" O padrão de projeto descrito é o: ",
		"options": [
			"3-<i>tier</i>.",
			"<i>Observer</i>.",
			"<i>Adapter</i>.",
			"<i>Facade</i>.",
			"MVC."
		],
		"answer": "E"
	},
	{
		"enunciation": " Os padrões de projeto podem ser categorizados em três grupos: criação, estruturais e comportamentais. São padrões do grupo estrutural e do grupo criação,respectivamente: ",
		"options": [
			"builter e abstract factory.",
			"singleton e façade",
			"façade e singleton",
			"abstract factory e composite.",
			"observer e bridge"
		],
		"answer": "C"
	},
	{
		"enunciation": " Alguns padrões de projeto estão disponibilizados na coluna I. Estabeleça a correta correspondência com suas intenções, disponibilizadas na coluna II.<br><br>Coluna I<br><br>1.Façade<br>2.Adapter<br>3.Bridge<br>4.Abstract Factory<br><br>Coluna 2<br><br>( ) Simplificar o uso de um sistema já existente, definindo sua própria interface.<br><br>( ) Possuir famílias ou conjunto de objetos para clientes (ou casos) particulares.<br><br>( ) Casar um objeto existente, fora do seu controle, com uma interface particular.<br><br>( ) Desacoplar um conjunto de implementações do conjunto de objetos que as utilizam.<br><br>A sequência correta é ",
		"options": [
			"1 ,4 ,2 e 3",
			"1 ,2 ,3 e 4",
			"4 ,1 ,3 e 2",
			"2 ,3 ,4 e 1",
			"2 , 1 ,3 e 4"
		],
		"answer": "A"
	},
	{
		"enunciation": " O padrão de projeto bridge é útil quando: ",
		"options": [
			"existe uma abstração que temi diferentes implementações, permitindo à abstração e à implementação uma variação independente uma da outra.",
			"o custo de escrever uma nova classe é menor do que o de todos os usuários aprenderem a utilizar o sistema original ou de gastar em manutenção no futuro.",
			"é desnecessário a utilização de toda a funcionalidade de um sistema complexo e existe a possibilidade de se criar uma nova classe, que contenha todas as regras para acessar esse sistema.",
			"existe intenção de encapsular ou esconder o sistema original.",
			"se deseja utilizar a funcionalidade do sistema original e também adicionar alguma nova funcionalidade"
		],
		"answer": "A"
	},
	{
		"enunciation": " Em relação às principais características dos padrões de projeto utilizados pela Gangue dos Quatro, a investigação das forças que interagem no padrão é representa como: ",
		"options": [
			"intenção.",
			"solução.",
			"implementação.",
			"consequências.",
			"problema."
		],
		"answer": "D"
	},
	{
		"enunciation": " Os padrões GoF refletem situações muito recorrentes em projetos orientados a objetos. Esses padrões são classificados em três famílias: padrões de criação, padrões estruturais e padrões comportamentais. Considere os objetivos principais de alguns desses padrões, tais como:<br><br>I. produzir objetos utilizando uma estrutura de árvore para representar hierarquias de todo-parte, de forma a permitir que objetos do tipo todo ou do tipo parte sejam tratados da mesma maneira. <br><br>II. atribuir responsabilidades adicionais a um objeto de forma dinâmica, para atender a algumas situações em que seja desejado que um objeto tenha mais responsabilidades que os demais da sua classe.<br><br>III. prover uma interface única para um conjunto de interfaces de um subsistema, facilitando o seu uso, para atender a situações em que um conjunto de classes deve se comportar como um componente. <br><br>Os padrões cujos objetivos foram descritos em I, II e III são, respectivamente: ",
		"options": [
			"<i>Abstract Factory, Prototype e Singleton</i>, da família de padrões de criação.",
			"<i>Composite, Decorator e Facade, </i> da família de padrões estruturais.",
			"<i>Template Method, State e Mediator</i>, da família de padrões comportamentais",
			"<i>Composite, Decorator e Facade</i>, da família de padrões de criação.",
			"<i>Abstract Factory, Prototype e Singleton,</i> da família de padrões estruturais."
		],
		"answer": "B"
	},
	{
		"enunciation": " <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/32608/imagem-018.jpg\"><br><br>Considerando a arquitetura e padrões de projeto JEE, assinale a opção que apresenta o padrão de projeto que substitui corretamente o bloco indicado por X na figura acima, com vistas a fornecer uma interface unificada de nível mais alto para um conjunto de interfaces em um subsistema. ",
		"options": [
			"<i>Session Facade</i>",
			"<i>Business Delegate</i>",
			"<i>Front Controller</i>",
			"<i>Data Access Object</i>",
			"<i>Transfer Object</i>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Os padrões de projeto estruturais diminuem o acoplamento entre os objetos de um sistema orientado a objetos tornando mais simples eventuais alterações no funcionamento do sistema. Um destes padrões permite centralizar todas as requisições a uma aplicação <i>Web</i>, ou seja, haverá um único ponto de entrada na aplicação que receberá e tratará todas as requisições. Este padrão é conhecido como ",
		"options": [
			"<i>Bridge. </i>",
			"<i>Request Controller. </i>",
			"<i>Manager Request.</i>",
			"<i>Front Controller. </i>",
			"<i>Facade. </i>"
		],
		"answer": "D"
	},
	{
		"enunciation": " A respeito de arquitetura e engenharia de software, julgue o item seguinte.<br><br>No <i>design</i>, o padrão GRASP <i>controller</i><i></i> visa definir as interações entre objetos e atribuir responsabilidades às classes. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Assinale a alternativa que apresenta corretamente um padrão de projeto de <i>software </i>comportamental. ",
		"options": [
			"<i>Proxy</i>",
			"<i>Facade</i>",
			"<i>Visitor</i>",
			"<i>Decorator</i>",
			"<i>Composite</i>"
		],
		"answer": "C"
	},
	{
		"enunciation": " O padrão de projeto de <i>software</i> que permite a criação de famílias de objetos relacionados ou dependentes, através de uma única interface, sem a necessidade de especificar a classe concreta, é denominado de ",
		"options": [
			"<i>Observer.</i>",
			"<i>Command</i>",
			"<i>Builder</i>",
			"<i>Abstract Factory. </i>",
			"<i>Prototype. </i>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Sobre padrões de projeto, assinale a afirmativa correta. ",
		"options": [
			"<b>Facade</b> é um padrão de projeto estrutural que disponibiliza uma interface simplificada para um conjunto de interfaces em um subsistema.",
			"<b>Singleton</b> é um padrão de projeto estrutural em que nenhuma instância de uma classe é permitida.",
			"<b>Template method</b> é um padrão de projeto comportamental que fornece métodos que as subclasses são impedidas de modificar.",
			"<b>Prototype</b> é um padrão de projeto de criação que encapsula a criação de objetos, deixando as subclasses decidirem quais objetos criar."
		],
		"answer": "A"
	},
	{
		"enunciation": " <i>Design patterns</i> podem ser divididos em três categorias: <i>creational</i>, <i>structural</i> e<i> behavioral</i>. Um dos <i>design patterns </i>da categoria <i>creational </i>garante para uma classe específica, apenas uma única instância, a qual é acessível de forma global e uniforme. Este <i>design pattern</i> é conhecido como ",
		"options": [
			"Façade.",
			"Builder.",
			"Abstract Factory.",
			"Singleton.",
			"Composite."
		],
		"answer": "D"
	},
	{
		"enunciation": " Em relação aos padrões de projeto é INCORRETO afirmar: ",
		"options": [
			"São uma porção identificada de conhecimento profundo, que transmite a essência de uma solução provada para um problema recorrente em um certo contexto.",
			"Descrevem uma estrutura de projeto que resolve um problema particular em um cenário específico e podem ter impacto na maneira pela qual o padrão é aplicado e usado.",
			"Cada padrão de projeto descreve um problema que ocorre repetidas vezes em um ambiente e, então, descreve o núcleo da solução daquele problema, de tal modo que se pode usar esta solução diversas vezes.",
			"A descrição de um padrão de projeto pode considerar um conjunto de influências de projeto que descrevem o ambiente e as condições que devem existir para torná-lo aplicável.",
			"Padrões arquiteturais e padrões de código são exemplos de padrões de projeto. Os arquiteturais são padrões específicos de uma plataforma e possuem padrões específicos de código, como o Java."
		],
		"answer": "E"
	},
	{
		"enunciation": " Tendo como base os padrões de projeto de software, julgue os itens a seguir.<br><br>Singleton é um padrão de projeto de software que garante a existência de apenas uma instância de uma classe, mantendo um ponto global de acesso ao seu objeto. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Tendo como base os padrões de projeto de software, julgue os itens a seguir.<br><br>O Abstract Factory, cujo objetivo é permitir a unificação da interface de um sistema, é considerado um padrão comportamental devido à sua propriedade característica de alterar o comportamento do <i>software</i> de acordo com o comportamento do usuário. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Os padrões <i>Gang of Four</i> (GoF) organizam um conjunto de padrões de projeto (<i>design patterns</i>) em três grupos: de criação, estruturais e comportamentais. Três destes padrões são descritos a seguir:<br><br>I. Em situações em que classes precisam trabalhar juntas, mas isto não está sendo possível porque suas interfaces são incompatíveis, pode-se utilizar este <i>design pattern </i>que permite converter a interface de uma classe em outra interface esperada pelos clientes de forma que classes com interfaces incompatíveis possam interagir. <br><br> II. Este <i>design pattern </i>pode ser utilizado quando se deseja definir uma dependência um-para-muitos entre objetos de modo que quando um objeto muda o estado, todos seus dependentes são notificados e atualizados. <br><br> III. Em situações em que se deseja acessar o conteúdo de uma coleção sem expor sua representação interna utiliza-se este <i>design pattern </i>que permite prover uma interface única para varrer coleções diferentes.<br><br> Os padrões descritos nos itens I, II e III são, respectivamente, ",
		"options": [
			"<i>Adapter, Facade e Strategy. </i><br>",
			"<i>Prototype, Composite e Command. </i><br>",
			"<i>Abstract Factory, Observer e Iterator.</i> <br>",
			"<i>Adapter, Observer e Iterator. </i><br>",
			"<i>Abstract Factory, Composite e Command. </i>"
		],
		"answer": "D"
	},
	{
		"enunciation": " O Instituto Nacional do Clima (INC) utilizará uma biblioteca de simulações de clima fabricada por uma empresa americana. Porém, após a aquisição, percebeu-se que as interfaces disponibilizadas pelas classes dessa biblioteca são incompatíveis com as interfaces das classes de outros sistemas do INC. A maneira correta de contornar esse problema é a utilização do padrão de projetos . ",
		"options": [
			"decorator.<br>",
			"memento. <br>",
			"singleton. <br>",
			"facade. <br>",
			"adapter."
		],
		"answer": "E"
	},
	{
		"enunciation": " A tecnologia RMI, presente em Java, é uma implementação de um esquema presente em qual padrão de projeto? ",
		"options": [
			"Bridge",
			"Mediator",
			"Proxy",
			"Strategy",
			"Template Method"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com relação aos padrões GRASP, assinale a opção correta. ",
		"options": [
			"O acoplamento baixo (low coupling) baseia-se na quantidade de ligações entre as classes e está destinado à atribuição de responsabilidade ao primeiro objeto além da camada de interface com o usuário, que é responsável por receber ou tratar uma mensagem de operação do sistema<br>",
			"O controlador (controller) permite solucionar problemas no controle de criação de instâncias de classes. Nesse sentido, se a classe X contiver dados iniciais da classe Y ou se X usar de maneira muito próxima Y, caberá a X criar instâncias de Y, em que o controller representaria o padrão mais indicado para solucionar esse problema.<br>",
			"A alta coesão (high cohesion) é um padrão utilizado para aprimorar a ligação entre as classes, permitindo que a classe A não dependa de outras classes. Esse padrão é considerado o princípio central e útil em projetos orientados a objetos que utilizam GRASP<br>",
			"O criador (creator) é utilizado para a solução do problema de quem cria a instância de uma classe com objetos do modelo de domínio. Nesse caso, se A registra B, então atribui-se à classe B a responsabilidade de se criar uma instância de A.<br>",
			"O especialista na informação (information expert) associa-se ao mapeamento de responsabilidade em que se procura atribuir responsabilidade à classe que tenha informação necessária para satisfazê-la."
		],
		"answer": "E"
	},
	{
		"enunciation": " <b>Qual das alternativas abaixo NÃO é um design pattern existente?</b> ",
		"options": [
			"Test.",
			"Singleton.",
			"Prototype.",
			"Builder.",
			"Proxy."
		],
		"answer": "A"
	},
	{
		"enunciation": " <b>Correlacione</b> os elementos utilizados para descrever um Padrão de Projeto com a sua respectiva descrição: <br><br>Elemento Descrição <br><br>I. Intenção ( ) Fornece um exemplo do problema. <br>II. Motivação ( ) Descreve as classes necessárias para implementar o padrão. <br> III. Aplicabilidade ( ) Descreve o padrão de projeto e o que ele faz. <br>IV. Estrutura ( ) Notifica situações específicas de projeto nas quais o padrão é aplicável. <br><br>A sequência <b>CORRETA</b>, de cima para baixo, é: ",
		"options": [
			"I, IV, II, III.",
			"II, IV, I, III.",
			"II, IV, III, I.",
			"IV, III, I, II."
		],
		"answer": "B"
	},
	{
		"enunciation": " Na loja Oiapoque, a política de definição de preços para uma venda pode variar. Durante um período, ela pode admitir um desconto de 15% em todas as vendas; <br>posteriormente pode permitir um desconto de R$ 20,00, se o total da venda for maior que R$ 300,00, e muitas outras variações. <br>O padrão de projeto para construir esses algoritmos para definição de preços variados é o GoF<br> ",
		"options": [
			"Façade.<br>",
			"Singleton.<br>",
			"Adapter.<br>",
			"Strategy.<br>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Caso haja necessidade de fornecer aos usuários de um sistema diversas maneiras de realizar uma mesma tarefa, como, por exemplo, a partir de <i> menu</i>, barra de ferramentas ou<i> menu pop-up</i>, o padrão <i>chain of responsibility </i>será mais apropriado para esse fim que o padrão <i>command.</i><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Enquanto os padrões GRASP refletem práticas mais pontuais da aplicação de técnicas orientadas a objetos, os padrões de projeto GoF (<i>Gang of Four</i>) exploram soluções mais específicas. Dessa forma, não há, no GRASP, um padrão que ajude a solucionar, por exemplo, a definição de qual classe deve ser a responsável por lidar com um evento de determinada interface.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Em um cenário em que é necessário minimizar dependências e maximizar o reúso, bem como atribuir uma responsabilidade para que o acoplamento mantenha-se fraco, o padrão <i>Expert</i> é mais adequado que o padrão<i> Low Coupling</i>.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão de projeto<i> Strategy </i>contém um objeto<i> strategy </i>que é análogo ao objeto<i> state </i>do padrão de projeto <i>State</i>. Contudo, o primeiro objeto encapsula um algoritmo, enquanto o segundo encapsula informações sobre o estado de um objeto.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Um Padrão de Projeto de Software ou Padrão de Desenho de Software, também muito conhecido pelo termo original em inglês, Design Pattern, descreve uma solução geral reutilizável para um problema recorrente no desenvolvimento de sistemas de software orientados a objetos. Não é um código final; é uma descrição ou modelo de como resolver o problema do qual trata, que pode ser usada em muitas situações diferentes. Os Padrões de Projeto normalmente definem as relações e interações entre as classes ou objetos, sem especificar os detalhes das classes ou objetos envolvidos, ou seja, estão num nível de generalidade mais alto. Um padrão de projeto define: seu nome; o problema; a solução; quando aplicar esta solução e suas consequências. O movimento ao redor de padrões de projeto ganhou popularidade com o livro Design Patterns: Elements of Reusable Object-Oriented Software, publicado em 1995. Os autores desse livro, Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides, são conhecidos como a \"Gangue dos Quatro\" (Gang of Four) ou simplesmente \"GoF\". Os Padrões GOF, são organizados em três famílias, qual das alternativas a seguir apresenta a denominação dessas três famílias: <br><br> ",
		"options": [
			"Criação, estruturais e comportamentais; <br>",
			"Criação, arquiteturais e desenvolvimento;<br>",
			"Desenho, estruturais e desenvolvimento; <br>",
			"Definição, arquitetura e desenvolvimento; <br>",
			"Definição, estruturais e comportamentais."
		],
		"answer": "A"
	},
	{
		"enunciation": " Um padrão de projeto de software descreve uma solução geral e reutilizável para um problema recorrente no desenvolvimento de sistemas. Ele é voltado para o desenvolvimento de softwares orientados a objeto, mas não apresenta um código final, porém apenas uma descrição de como resolver o problema. O padrão de projeto que garante a existência de apenas uma instância de uma classe, mantendo um ponto global de acesso ao objeto, chama-se ",
		"options": [
			"facade. <br>",
			"singleton<br>",
			"iterator. <br>",
			"prototype. <br>",
			"controller."
		],
		"answer": "B"
	},
	{
		"enunciation": " Considere as afirmações abaixo. <br><br>I - In <i>Object-Oriented Programming</i>, the <i>Bridge pattern </i>is used to separate the interface of class from its implementation, so that either can be varied separately. At first sight, the<i> bridge pattern </i>looks much like the <i>Adapter pattern</i>, in that a class is used to convert one kind of interface to another. However, the intent of the <i>Adapter pattern </i>is to make one or more class interfaces look the same as that of a particular class. The <i>Bridge pattern </i>is designed to separate a class interface from its implementation, so that you can vary or replace the implementation without changing the client code. <br><br>II - First normal form (1NF) means that a table has no multivalued attributes or composite attributes. (A composite attribute contains other attributes and can therefore be divided into smaller parts.) All relational tables are by definition in 1NF, because the value of any column in a row must be atomic—that is, single valued. <br><br>Pode-se afirmar que:<br> ",
		"options": [
			"todas as afirmações estão incorretas.",
			"apenas a afirmação II está correta.",
			"apenas a afirmação I está correta.",
			"todas as afirmações estão corretas."
		],
		"answer": "D"
	},
	{
		"enunciation": " Todos os sistemas bem estruturados são repletos de padrões, pois fornecem uma solução comum para um problema básico em um determinado contexto. O termo padrão de projeto pode ser considerado como: ",
		"options": [
			"<i>Frameworks. </i><br>",
			"mecanismo. <br>",
			"IDE. <br>",
			"metodologia de desenvolvimento.<br>",
			"lógica de programação."
		],
		"answer": "B"
	},
	{
		"enunciation": " O padrão de projeto é representado por uma colaboração parametrizada, podendo ser utilizado para fazer uma modelagem interna dessa colaboração com um conjunto de diagramas. Assinale o conjunto de diagramas utilizado tipicamente para uma modelagem interna. ",
		"options": [
			"Diagrama de classes<br>",
			"Diagrama de atividade. <br>",
			"Diagrama de objeto. <br>",
			"Diagrama de componente.<br>",
			" Diagrama de implementação. <br>"
		],
		"answer": "A"
	},
	{
		"enunciation": " <b>Julgue os itens subsecutivos, acerca de design patterns.</b><br><br>Um padrão (<i>pattern</i>) tem pelo menos os seguintes elementos: nome, problema, solução e consequência. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <b>Julgue os itens subsecutivos, acerca de design patterns.</b><br><br>Em virtude da característica de combinatoriedade, um padrão não permite a construção de outro padrão derivado. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <b>Julgue os itens subsecutivos, em relação a projetos de desenvolvimento de <i>software</i>.</b> <br><br><i>Design Pattern</i>, técnica de desenvolvimento de soluções eletrônicas, estabelece determinada ordem na elaboração e implantação de desenvolvimento de algoritmos, independentemente da sua complexidade e da linguagem de programação na qual será implantado. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Analise as seguintes afirmações: <br><br>I. Fornece uma interface para a criação de uma família de objetos relacionados ou dependentes sem fornecer os detalhes de implementação das classes concretas. <br>II. Converte uma interface de uma classe existente em outra interface esperada pelos clientes. Permite que algumas classes com interfaces diferentes trabalhem em conjunto. <br>III. Separa uma implementação de sua abstração, de forma que ambas possam variar independentemente. <br>IV. Separa a construção de um objeto complexo de sua representação, de modo que o mesmo processo possa criar representações diferentes. <br><br><b>Tratam, respectivamente, dos design patterns: </b> ",
		"options": [
			"Builder - Adapter - Bridge - Abstract Factory.",
			"Abstract Factory - Adapter - Bridge - Builder.",
			"Bridge - Adapter - Builder - Abstract Factory.",
			"Adapter - Builder - Abstract Factory - Bridge.",
			"Builder - Bridge - Abstract Factory - Adapter."
		],
		"answer": "B"
	},
	{
		"enunciation": " Julgue os itens subsequentes a respeito dos padrões de projeto.<br><br>.Os padrões estruturais, tais como o Bridge e o Proxy, abstraem o processo de instanciação, ajudando a tornar um sistema independente de como os seus objetos são criados. Já os padrões de criação, como <i>Prototype</i> e o <i>Builder</i>, se preocupam com a forma como as classes e os objetos são criados para formar estruturas compostas maiores. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Julgue os itens subsequentes a respeito dos padrões de projeto.<br><br>O uso do padrão <i>Builder </i>tem a vantagem de permitir acesso controlado à instância de uma classe, uma vez que ele encapsula a classe, criando um ponto global único de acesso. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Julgue os itens subsequentes a respeito dos padrões de projeto.<br><br>O padrão <i>Adapter </i>será mais apropriado que o Façade quando for necessário fornecer uma interface unificada para um conjunto de interfaces em um subsistema. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Julgue os itens subsequentes a respeito dos padrões de projeto.<br><br>Uma das aplicabilidades do padrão <i>Iterator </i>é a representação de hierarquias do tipo todo-parte de objetos, de modo que a aplicação seja capaz de ignorar a diferença entre composições de objetos e objetos individuais, haja vista que todos os objetos tratados no padrão têm comportamento uniforme. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Acerca dos padrões GRASP, julgue os itens a seguir.<br><br>O padrão <i>Don’t Talk to Strangers</i> é utilizado para fortalecer o polimorfismo, realizado pelo padrão Polymorphism. O objetivo de ambos os padrões é substituir um componente sem afetar outro componente, embora o primeiro implemente o polimorfismo em nível de classe e o segundo lide com alternativas embasadas no tipo de componente. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Acerca dos padrões GRASP, julgue os itens a seguir.<br><br>O padrão Indirection é utilizado para atribuir responsabilidades à classe que tiver a informação necessária para satisfazer a responsabilidade ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Acerca dos padrões GRASP, julgue os itens a seguir.<br><br>Nos casos em que a solução oferecida pelo padrão Expert violar a alta coesão e o baixo acoplamento, o padrão adequado a ser aplicado será o Creator, que atribui um conjunto altamente coesivo de responsabilidades a uma classe artificial que não representa um conceito do domínio do problema. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Acerca dos padrões GRASP, julgue os itens a seguir.<br><br>O padrão Pure Fabrication objetiva designar a responsabilidade unívoca pela criação de uma nova instância de uma classe. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Com relação à engenharia de <i>software</i> e arquiteturas, julgue os itens que se seguem.<br><br>Os padrões CORBA auxiliam a comunicação lógica entre objetos em arquiteturas de objetos distribuídos mesmo onde objetos implementados possuam diferentes linguagens ou plataformas. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com referência aos padrões de projeto relacionados à engenharia de software, julgue os itens seguintes.<br><br><br>Padrões de projeto envolvem combinações de classes e algoritmos associados que cumprem com propósitos comuns de projeto. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Com referência aos padrões de projeto relacionados à engenharia de software, julgue os itens seguintes.<br><br><br>Para um problema recorrente no desenvolvimento de sistemas, normalmente, um padrão de projeto descreve uma solução geral, que não pode ser reutilizada. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Com referência aos padrões de projeto relacionados à engenharia de software, julgue os itens seguintes.<br><br><br>O padrão de comportamento e encadeamento de atendentes (chain of responsibility) evita acoplamento entre solicitantes e atendentes, permitindo que mais de um objeto tenha chance de tratar a solicitação. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Em relação ao UDDI (Universal Description Discover and Integration), marque V para verdadeiro ou F para falso e, em seguida,assinale a alternativa que apresenta a sequência correta. ( ) Padrão desenvolvido para fornecer um diretório de busca para os negócios e seus serviços, com o objetivo de ser um mediador do serviço, permitindo aos clientes requisitantes encontrar um fornecedor do serviço apropriado. ( ) Baseado em PHP, com uma plataforma neutra de dados que permite descrever as relações hierárquicas de forma simplificada. ( ) Os dados em um registro UDDI só podem ser conceitualmente divididos nas categorias Modelos Técnicos, Negócios e Serviços do Negócio. ( ) O elemento businessEntity é um elemento filho do businessService e descreve a função de negócio de um serviço. ",
		"options": [
			"F/ V/ V/ V",
			"V/ V/ F/ F",
			"F/ F/ F/ F",
			"V/ V/ F/ V",
			"V/ F/ F/ F"
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão de criação Prototype define um sistema sem funcionalidades inteligentes (acesso a banco de dados, por exemplo), podendo conter apenas funcionalidades gráficas. Além disso, é utilizado para fins de ilustração e melhor entendimento.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão de projeto de <i>software </i>que limita o número máximo de instâncias de uma classe a somente uma instância é denominado Singleton.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " O padrão de desenvolvimento comportamental denominado Iterator permite percorrer uma lista de objetos sem expor sua representação interna.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <i>Design patterns</i> não se aplicam, exclusivamente, ao Java, podendo ser empregados em projetos que utilizam linguagem C#. <br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " O padrão<i> bridge</i>, além de converter a interface de uma classe existente em outra interface esperada pelos clientes, permite que algumas classes com interfaces diferentes funcionem conjuntamente.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Os padrões GRASP (<i>general responsibility assignment software patterns</i>) consistem em modelos de distribuição de responsabilidades a classes e objetos em implementações orientadas a objetos. Os principais exemplos de padrões GRASP são: <i>Information Expert, Creator, Visitor, Controller, Iterator, Low Coupling, High Cohesion, Polymorphism, State, Strategy, Pure Fabrication, Indirection, Proxy e Protected Variations.</i><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Uma das conseqüências do uso de adaptador de classes é que a adaptação de uma classe concreta não se estende automaticamente às suas subclasses.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <i>Facade </i>é um tipo de<i> honeypot </i>que emula serviços ao invés de disponibilizar servidores reais para serem atacados. Não pode ser usado como ponto de origem para novos ataques e também provê pouca informação sobre o ataque, pois não existem vulnerabilidades nos serviços emulados.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " O padrão <i>Composite </i>é o mais indicado para a construção de componentes tratadores de eventos em interfaces gráficas compostas por múltiplos componentes visuais agregados, quando comparado a um possível emprego do padrão <i> Mediator</i>.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Para um projetista de <i> software </i>estender um componente desenvolvido segundo o padrão<i> Command</i>, com a capacidade de desfazer operações sobre objetos complexos sem violar o encapsulamento de tais objetos, o mais adequado é usar, de forma complementar, o padrão <i>Memento</i>, em vez do padrão <i>Visitor</i>.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Uma das conseqüências desejáveis do uso de uma <i>façade</i> é a promoção de acoplamento fraco entre um sistema e seus clientes, sobretudo porque as dependências de compilação entre módulos podem ser reduzidas. Uma das conseqüências indesejáveis é a redução de portabilidade dos sistemas.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " No emprego do padrão fábrica abstrata, a criação de novos produtos dentro de uma mesma família toma-se dificultada, quando comparada à criação de novas famílias de produto que aderem a uma mesma estrutura de produtos abstratos.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " No padrão<i> builder</i>, a responsabilidade pela criação de instâncias é compartilhada por um diretor e um construtor, sendo o vínculo entre eles estabelecido pelo cliente do padrão.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Padrões de criação, como <i>singleton</i> e <i>prototype</i>, envolvem necessariamente a instanciação de um ou mais objetos, sendo que, no padrão<i> singleton</i>, o controle sobre a instanciação é cedido ao cliente do padrão, o que não ocorre no padrão <i>prototype.</i><br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " <p>A engenharia de software é um a disciplina do conhecimento humano que aplica princípios da engenharia ao desenvolvimento de software. N o entanto, existem diferenças significativas entre as engenharias clássicas — mecânica, civil, elétrica— e a engenharia de software, muitas delas decorrentes das diferenças de natureza entre o produto ou sistema resultante da atividade das engenharias clássicas e a engenharia de software. A engenharia de software desdobrou-se em várias áreas especializadas, como as áreas de requisitos de software, de análise e projeto de software, de implementação de software, de testes de software, de gestão de configuração, entre outras. N a interface entre as engenharias clássicas e a de software insere-se a engenharia de sistemas, abordada colateralmente na ISO/IEC 12207.<br></p><p><br></p><p>O emprego de padrões de projeto reusáveis, como<i> façade, builder </i>e<i> singleton</i>, é uma prática com nível inferior de abstração, quando comparado ao emprego de estilos arquiteturais de<i> software</i>, como camadas, cliente-servidor e<i> peer-to-peer</i>.<br><br> </p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Um <i>design pattern </i>descreve uma solução geral comprovada e reutilizável para um problema recorrente no desenvolvimento de sistemas de<i> software </i>orientados a objetos. Padrões de projeto ajudam a reconhecer e implementar boas soluções para problemas comuns. Dois dos principais<i> design patterns </i>utilizados atualmente são descritos a seguir: <br><br>I. Visa garantir que uma classe só tenha uma única instância e prover um ponto de acesso global a ela. <br><br>II. Visa definir uma dependência um-para-muitos entre objetos para que quando um objeto mudar de estado os seus dependentes sejam notificados e atualizados automaticamente. <br><br>Os <i>design patterns </i>descritos em I e II são, respectivamente: <br> ",
		"options": [
			"<i>Singleton e Observer. </i>",
			"<i>Facade e Adapter.</i>",
			"<i>Composite e Adapter. </i>",
			"<i>Singleton e Command. </i>",
			"<i>Facade e Observer. </i>"
		],
		"answer": "A"
	},
	{
		"enunciation": " O padrão de projeto Proxy é uma solução adequada para alguns problemas de design<b>, EXCETO</b>:<br> ",
		"options": [
			"controlar o acesso a um objeto que necessite de permissão para tal.",
			"fornecer um representante local para um objeto que se encontra em outro espaço de endereçamento.",
			"fornecer uma interface mais adequada do que a oferecida pelo objeto que ele representa.",
			"criar um substituto para um objeto cuja instanciação seja custosa ou demorada.",
			"carregar um objeto persistente em memória quando ele for referenciado pela primeira vez."
		],
		"answer": "C"
	},
	{
		"enunciation": " <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/29592/Imagem%20068.jpg\"><br><br>Com base nessas informações, indique o padrão adotado.<br> ",
		"options": [
			"<i>Composite.</i>",
			"<i>Strategy.</i>",
			"<i>Proxy.</i>",
			"<i>Bridge.</i>",
			"<i>Façade.</i>"
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão de projeto JEE (J2EE <i>patterns</i>) que é utilizado para solucionar problemas de acesso e manipulação de dados em uma camada separada e que implementa mecanismos de acesso para persistência de dados, em arquitetura <i> mainframes</i>, LDAP ou sistemas gerenciadores de banco de dados relacionais é denominado<br> ",
		"options": [
			"<i>transfer object.</i>",
			"<i>value list handler.</i>",
			"<i>transfer object assembler.</i>",
			"JDBC.",
			"<i>data access object.</i>"
		],
		"answer": "E"
	},
	{
		"enunciation": " São exemplos de padrões comportamentais de projeto:<br><br> ",
		"options": [
			"padrão único e padrão de agregação.<br>",
			"padrão de protótipo e padrão de fábrica abstrata.<br>",
			"padrão de comandos e padrão visitante.<br>",
			"padrão ponte e padrão de agregação.<br>"
		],
		"answer": "C"
	},
	{
		"enunciation": " <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/3494/Imagem%20025.jpg\"><br><br>A figura acima apresenta uma proposta de relacionamento entre os padrões de design orientado a objetos descritos no GoF (<i>gang of four</i>)<i> book</i>. Considere que, na construção de um<i> software</i>, será empregado um ou mais desses padrões, a partir de decisão embasada na antecipação de soluções que ocorrem em determinados contextos de desenvolvimento de<i> software</i>. Nessa situação, assinale a opção correta a respeito dos conceitos de padrões de<i> design</i>.<br> ",
		"options": [
			"Ao se empregar o padrão AbstractFactory, deverão estar atualmente presentes ou serem introduzidas, em uma etapa futura de manutenção do <i>software</i>, duas ou mais famílias de componentes, as quais possuem implementações distintas.<br>",
			"No padrão Visitor, composições de componentes que não possuem um supertipo comum serão visitadas de forma iterativa por meio de uma instância imediata de uma classe concreta, definida quando do desenvolvimento do <i>software</i>.<br>",
			"Caso se adote o padrão Decorator para adicionar responsabilidades a um conjunto de instâncias que possuem uma superclasse comum denominada X, então, quando um objeto da classe X for <i>decorado </i>por uma instância de uma classe qualquer Y, os métodos presentes na classe X não estarão presentes na interface de Y.<br>",
			"Caso se deseje incorporar a um<i> software </i>um conjunto de algoritmos de uma mesma família, os quais são aplicáveis de forma intercambiável a um agregado de objetos similares, no qual o conjunto é passível de expansão em tempo de manutenção do <i>software</i>, então é mais recomendada a adoção do padrão Composite.<br>",
			"Proxy, Command e Observer são exemplos de padrões criacionais, isto é, padrões que definem abordagens para a construção de objetos.<br>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Os padrões de projeto (<i>Design Patterns</i>) são classificados nas categorias:<br><br> ",
		"options": [
			"Situacional. Estrutural. Complementar.",
			"Criacional. Evolutiva. Contingencial.",
			"Compartimental. Vinculada. Comportamental.",
			"Criacional. <i>Step-by-step</i>. Orientada a requisitos.",
			"Criacional. Estrutural. Comportamental."
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão de projeto <i>Factory</i> provê uma classe de decisão que retorna<br><br> ",
		"options": [
			"um objeto de uma de suas subclasses, sem fixação de parâmetros.<br>",
			"um atributo de uma de suas classes conexas, com base em um parâmetro reservado.<br>",
			"um objeto de uma de suas subclasses, com base em um parâmetro recebido.<br>",
			"um atributo de uma de suas classes conexas, sem fixação de parâmetros.<br>",
			"um objeto de uma de suas subclasses, com parâmetros fatorados.<br>"
		],
		"answer": "C"
	},
	{
		"enunciation": " O padrão de projeto singleton é usado para restringir<br><br> ",
		"options": [
			"a instanciação de uma classe para objetos simples.",
			"a instanciação de uma classe para apenas um objeto.",
			"a quantidade de classes",
			"as relações entre classes e objetos.",
			"classes de atributos complexos."
		],
		"answer": "B"
	},
	{
		"enunciation": " Julgue o item que se segue, acerca de qualidade de <em>software</em>, linguagens de programação e padrões de projetos.<br><br>O padrão <em>Abstract Factory</em> é corretamente aplicável, quando necessário, para fornecer uma biblioteca de classes e não revelar suas interfaces.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Julgue o item que se segue, acerca de qualidade de <em>software</em>, linguagens de programação e padrões de projetos.<br><br>Os padrões de projeto são úteis tanto na fase de planejamento da arquitetura quanto na de desenvolvimento e codificação.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Julgue o item que se segue, acerca de qualidade de <em>software</em>, linguagens de programação e padrões de projetos.<br><br>O padrão<em> Prototype </em>pode ser usado no desenvolvimento de programas escritos com a linguagem PHP 5.0, atuando como padrão estrutural que permite construir tanto classes quanto objetos.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Julgue o item que se segue, acerca de qualidade de <em>software</em>, linguagens de programação e padrões de projetos.<br><br>O padrão <em>Facade </em>assemelha-se ao <em>Mediator</em> no aspecto em que este abstrai um subsistema de objetos a fim de fornecer uma interface encapsulada na forma como um conjunto de objetos interage entre si.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Julgue o item que se segue, acerca de qualidade de <em>software</em>, linguagens de programação e padrões de projetos.<br><br>O padrão<em> Singleton </em>garante que uma classe tenha somente uma instância, fornecendo, assim, um ponto global de acesso a essa instância.<br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Durante o desenvolvimento de um sistema para suporte a uma rede social, um desenvolvedor decidiu criar a facilidade de uma pessoa ter uma lista de amigos para poder enviar e-mails, postagens e/ou fotos. Essa lista pode conter um número indefinido de amigos ou de outras listas de amigos, criando uma estrutura recursiva. <br><br>O padrão de projeto que descreve essa estrutura é<br><br> ",
		"options": [
			"Abstract factory<br>",
			"Chain of responsibility<br>",
			"Composite<br>",
			"Iterator<br>",
			"Module<br>"
		],
		"answer": "C"
	},
	{
		"enunciation": " O projeto de<i> software </i>deve identificar os possíveis desvios do comportamento de um sistema. Cada exceção pode ser tratada por meio de um dos seguintes modos: tentar realizar novamente um serviço que falhou, corrigir algum aspecto do serviço antes de tentar realizá-lo novamente ou relatar o serviço não realizado para outro componente de tratamento de erro.<br><br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Um sistema está organizado segundo uma arquitetura em camadas, no qual cada camada corresponde a um pacote Java. A camada de serviços, ServiceLayer, possui dezenas de classes, que colaboram entre si para fornecer os serviços necessários. Para facilitar o acesso aos serviços disponíveis, o pacote em questão disponibiliza algumas interfaces, que agrupam operações de acordo com a natureza do serviço. As classes que implementam esses serviços, entretanto, não são visíveis fora do pacote. Dessa forma, o pacote fornece uma classe pública, Services, onde existem métodos estáticos que retornam objetos que implementam os serviços disponíveis. O código Java a seguir exemplifica o que foi descrito.<br><br><b>package ServiceLayer;<br>public interface ServiceA {<br> int srvA1();<br> int srvA2();<br> int srvA3();<br>}<br>package ServiceLayer;<br>public interface ServiceB {<br> int srvB1();<br> int srvB2();<br>}<br>package ServiceLayer;<br>public class Services {<br> private Services() {<br> }<br>public static ServiceA serviceA() {<br> return new CL01();<br> }<br> public static ServiceB serviceB() {<br> return new CL01();<br> }<br>}<br>package ServiceLayer;<br>class CL01 implements ServiceA, ServiceB{<br> public int srvA1()<br> { // código irrelevante }<br> public int srvA2()<br> { // código irrelevante }<br> public int srvA3()<br> { // código irrelevante }<br> public int srvB1()<br> { // código irrelevante }<br> public int srvB2()<br> { // código irrelevante }<br>}</b><br><br>O trecho de código a seguir mostra como os serviços disponíveis são executados.<br><br><b>{<br> ServiceA s1=Services.serviceA();<br> ServiceB s2=Services.serviceB();<br> s1.srvA1();<br> s2.srvB1();<br> // código irrelevante<br>}</b><br><br><br><b>Essa arquitetura usou variações de dois padrões de projeto conhecidos, que são:</b> ",
		"options": [
			"Adapter e Façade",
			"Command e Façade",
			"Command e Singleton",
			"Façade e Factory Method",
			"Factory Method e Singleton"
		],
		"answer": "D"
	},
	{
		"enunciation": " Deseja-se que uma aplicação possa manipular diferentes tipos de bancos de dados de modo transparente às classes que necessitam de serviços de acesso a dados. Inicialmente será necessário fornecer suporte a bancos de dados XML e SQL, entretanto novos tipos poderão ser futuramente adicionados. <br><br>A solução proposta é a seguinte: <br><br>1. Uma classe abstrata (DB) será responsável por instanciar um objeto correspondente ao tipo de banco de dados desejado. Isso será feito através do método estático getDB(), que irá retornar um objeto de uma de suas subclasses concretas, de acordo com o parâmetro (tipo) passado. <br><br>2. O objeto criado no passo anterior irá instanciar conexões e consultas correspondentes ao tipo de DB criado; isto é, caso um DB XML tenha sido instanciado, apenas consultas XML e conexões XML serão instanciadas; caso um DB SQL tenha sido instanciado, apenas consultas SQL e conexões SQL serão instanciadas. <br><br>O diagrama de classe a seguir ilustra a estrutura descrita acima.<br><br><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/28274/Imagem%20033.jpg\"><br><br>Qual padrão de projeto foi utilizado na solução proposta?<br><br> ",
		"options": [
			"Adapter<br>",
			"Builder<br>",
			"Composite<br>",
			"Abstract Factory<br>",
			"Chain of Responsibility<br>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Quanto à finalidade, os padrões de projeto podem ser classificados em padrões de criação, padrões de estrutura ou padrões comportamentais. Correspondem à categoria de padrões estruturais:<br> ",
		"options": [
			"Facade, Prototype e Proxy",
			"Adapter, Composite e Proxy.",
			"Adapter, Factory Method e Template Method.",
			"Builder, Template Method e Strategy.",
			"Adapter, Bridge e Singleton."
		],
		"answer": "B"
	},
	{
		"enunciation": " Ao longo das últimas décadas, a engenharia de <i>software</i> fez progressos significativos no campo de padrões de projeto – arquiteturas comprovadas para construir <i>software</i> orientado a objetos flexível e fácil de manter. Com relação ao padrão <i>Facade</i>, é correto afirmar que<br> ",
		"options": [
			"fornece um objeto representante ou um marcador de outro objeto para controlar o acesso ao mesmo.",
			"define o esqueleto de um algoritmo em uma operação, postergando a definição de alguns passos para subclasses.",
			"define uma interface para criar um objeto, mas deixa as subclasses decidirem qual classe a ser instanciada.",
			"fornece uma interface unifucada para um conjunto de interfaces em um subsistema.",
			"define uma dependência “um para muitos” entre objetos, de modo que, quando um objeto muda de estado, todos os seus dependentes são automaticamente notificados e atualizados."
		],
		"answer": "D"
	},
	{
		"enunciation": " O padrão de projeto conhecido como façade é indicado para a definição de uma interface de nível mais alto que torne mais fácil a comunicação entre os subsistemas de um sistema complexo. <br> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Para facilitar a manutenção da aplicação, há um<i> design pattern </i>que tem como objetivo principal centralizar o acesso aos dados em uma única camada. Esse<i> design pattern </i>é o <br> ",
		"options": [
			"DTO.",
			"<i>Business Object.</i>",
			"DAO.",
			"<i>Application Service. </i>",
			"MVC."
		],
		"answer": "C"
	},
	{
		"enunciation": " O desenvolvimento de software é uma atividade que apresenta dificuldades, ligada ao entendimento do problema. Design Patterns surgiram na busca de soluções para as dificuldades, tornando-se um mecanismo eficiente no compartilhamento de conhecimento entre os desenvolvedores. <i>Gamma</i> propõe um modo de categorização dos <i>DESIGN PATTERNS</i>, definindo famílias de padrões relacionados, descritos a seguir. <br><br>I. Abrange a configuração e inicialização de objetos e classes. <br><br>II. Lida com as interfaces e a implementação das classes e dos objetos. <br><br>III. Lida com as interações dinâmicas entre grupos de classes e objetos. <br><br>Essas famílias são denominadas, respectivamente, <br> ",
		"options": [
			"Structural Patterns, Standard Patterns e Creational Patterns.",
			"Behavioral Patterns, Structural Patterns e Standard Patterns.",
			"Creational Patterns, Structural Patterns e Behavioral Patterns.",
			"Standard Patterns, Creational Patterns e Structural Patterns."
		],
		"answer": "C"
	},
	{
		"enunciation": " A maioria das aplicações <i>web</i> tem algumas funcionalidades (por exemplo, segurança), que são aplicáveis a todas as requisições da aplicação. Para adicionar essa funcionalidade separadamente para cada requisição da aplicação seria demorado, propenso a erros e difícil de manter. Para resolver esse problema pode ser utilizado o <i>design pattern </i><br> ",
		"options": [
			"<i>Application Service. </i>",
			"<i>Front Controller. </i>",
			"<i>Regular Expression. </i>",
			"<i>Intercepting Filter. </i>",
			"<i>Command. </i>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Analise o texto:<br><br><i>É um design pattern que permite que uma aplicação seja desenvolvida de forma que a camada de acesso aos dados seja isolada das camadas superiores. Numa aplicação que utiliza a arquitetura MVC, todas as funcionalidades de bancos de dados, tais como estabelecimento de conexões, mapeamento de objetos Java para tipos de dados SQL ou execução de comandos SQL, devem ser feitas por classes representadas nesse design pattern. </i><br><br>O texto faz referência ao <i>design pattern </i><br> ",
		"options": [
			"<i>Data Business Object. </i>",
			"<i>Data Access Object. </i>",
			"<i>Data Command Object. </i>",
			"<i>Session Façade. </i>",
			"Data Transfer Object."
		],
		"answer": "B"
	},
	{
		"enunciation": " Em projetos orientados a objetos, temos vários padrões de projetos. Sobre o padrão Adaptador, analise as assertivas e assinale a alternativa que aponta a(s) correta(s).<br><br>I. Adaptador não é um padrão de projeto reconhecido. <br><br>II. Normalmente, o padrão adaptador aplica-se a qualquer contexto em que queiramos modificar uma classe existente de maneira que seus métodos se adaptem aos de uma classe ou interface relacionada, porém diferente. <br><br>III. A regra geral para aplicar o padrão Adaptador é definir a nova classe de maneira que ela contenha uma instância da classe antiga, como um campo escondido, e implemente os métodos da nova classe usando os métodos da varável de instância escondida. <br><br>IV. Adaptador garante através de um método público que somente uma instância da classe em questão existirá. <br> ",
		"options": [
			"Apenas I.",
			"Apenas I e III.",
			"Apenas II e III.",
			"Apenas II, III e IV.",
			"I, II, III e IV."
		],
		"answer": "C"
	},
	{
		"enunciation": " Os <i>design patterns </i><br> ",
		"options": [
			"são projetos de arquitetura para um domínio específico de aplicação e sempre trazem componentes predefinidos que envolvem código de programação.",
			"consistem em conjuntos de classes que um usuário instancia para utilizar seus métodos. Após a chamada ao método, o controle do fluxo da aplicação retorna para o usuário.",
			"são de uso exclusivo em processos de desenvolvimento de soluções orientado a objetos, já que os objetos são a mais adequada abstração para o reúso.",
			"são aplicações propriamente ditas, normalmente construídas pela integração de diversos <i>frameworks. </i>",
			"podem ser modelados utilizando-se a linguagem UML que fornece um meio eficiente de modelar pa- drões de projeto representando-os como colaborações."
		],
		"answer": "E"
	},
	{
		"enunciation": " Para modelar sistemas que utilizam componentes reutilizáveis podem ser utilizados dois tipos de padrões de interesse - os <i>design patterns e os frameworks</i>.<br><br> <br>Com relação ao tema, considere as asserções a seguir. <br><br><br>Nas aplicações Java EE, o <i>design pattern JavaServer Faces utiliza o framework </i>MVC para representar o fluxo sequencial de comunicação entre as camadas. O MVC permite representar e entender a comunicação existente entre os componentes da aplicação <br><br> <b>PORQUE </b><br><br>quando se utiliza o MVC em aplicações web desenvolvidas com Java, a requisição do cliente é normalmente interceptada por uma <i>servlet </i>de controle (<i>Controller</i>). Essa <i>servlet</i> manipula o processamento inicial da requisição, acessa os componentes do modelo (<i>Model</i>) e geralmente determina qual será a página (<i>View</i>) que irá mostrar o conteúdo de resposta da requisição. <br><br>Acerca dessas asserções, é correto afirmar: <br> ",
		"options": [
			"As duas asserções são proposições verdadeiras, mas a segunda não é a justificativa correta da primeira.",
			"As duas asserções são proposições verdadeiras, e a segunda é a justificativa correta da primeira.",
			"A primeira asserção é uma proposição falsa, e a segunda, uma proposição verdadeira.",
			"A primeira asserção é uma proposição verdadeira, e a segunda, uma proposição falsa.",
			"Tanto a primeira quanto a segunda asserções são proposições falsas."
		],
		"answer": "C"
	},
	{
		"enunciation": " São padrões de projeto GoF (<i>design patterns</i>), <b>EXCETO:</b><br><br> ",
		"options": [
			"<i>Strategy.</i>",
			"<i>Workfow.</i>",
			"<i>Adapter.</i>",
			"<i>Facade.</i>"
		],
		"answer": "B"
	},
	{
		"enunciation": " O diagrama de classes a seguir implementa um conhecido padrão de projeto de <i>software </i>orientado a objetos. Nesse padrão, o objeto composto possui um conjunto de outros objetos que estão na mesma hierarquia de classes a que ele pertence. Qual é o nome desse padrão? <br><br><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/24705/Imagem%20024.jpg\"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br> ",
		"options": [
			"Composite.",
			"Command.",
			"<i>Observer. </i>",
			"<i>Proxy. </i>",
			"<i>Abstract Factory.</i>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Sabendo-se que os padrões de projeto podem ser classificados considerando-se o critério de escopo, qual, dentre os padrões de projeto abaixo, possui escopo de classe?<br><br> ",
		"options": [
			"Adapter",
			"Decorator",
			"Mediator",
			"Proxy",
			"Observer"
		],
		"answer": "A"
	},
	{
		"enunciation": " O Padrão de Projeto Decorador é formado por uma hierarquia de classes cuja classe mais genérica representa um componente ou um componente abstrato. Para o padrão ser útil, essa classe deve ser diretamente especializada em, pelo menos, outras duas classes que representam um(a) <br> ",
		"options": [
			"componente cliente e um componente adaptador",
			"componente cliente e um decorador",
			"componente concreto e um decorador",
			"componente concreto e um componente adaptador",
			"instância única e um decorador"
		],
		"answer": "C"
	},
	{
		"enunciation": " O Design Patterns que tem a finalidade de usar compartilhamento para suportar grandes quantidades de objetos, de granularidade fina, de maneira eficiente, é denominado ",
		"options": [
			"<i>Strategy</i>",
			"<i>Composite</i>",
			"<i>Flyweight</i>",
			"<i>State</i>",
			"<i>Builder</i>"
		],
		"answer": "C"
	},
	{
		"enunciation": " Segundo a classificação de Design Patterns apresentada pela GoF, identifique com V os padrões comportamentais e com F, os demais. <br><br>( ) Observer. <br>( ) Iterator. <br>( ) Façade. <br>( ) Composite. <br>( ) Visitor. <br><br>A alternativa que contém a sequência correta, de cima para baixo, é a ",
		"options": [
			"F V V V F",
			"F F V V V",
			"V F F V F",
			"V V F F V",
			"V V V V V"
		],
		"answer": "D"
	},
	{
		"enunciation": " <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/1089/Imagem%20019.jpg\"><br><br>Considerando a figura acima, que apresenta um diagrama de relacionamento entre os padrões de projeto descritos no livro <b>GoF Book</b>, julgue os próximos itens acerca dos conceitos de programação orientada a objetos e padrões de projetos orientados a objetos.<br><br>I A implementação de padrões de projeto criacionais em linguagens como C#, Delphi e Java sempre envolverá a alocação de memória para a criação de objetos. <br><br>II A implementação de montadores de árvores sintáticas apóia-se mais no uso do padrão Singleton que no uso do padrão Composite. <br><br>III A implementação de tratadores de eventos de interface gráfica apóia-se mais no uso do padrão Observer que no uso do padrão Visitor. <br><br>IV A implementação de famílias portáveis de componentes de interface gráfica depende mais do emprego do padrão Chain of Responsibility que do padrão AbstractFactory. <br><br>V O padrão TemplateMethod é mais simples que o padrão Memento.<br><br>Estão certos apenas os itens<br> ",
		"options": [
			"I, II e IV.",
			"I, III e V.",
			"I, IV e V.",
			"II, III e IV.",
			"II, III e V."
		],
		"answer": "B"
	},
	{
		"enunciation": " Em relação aos problemas, para os quais são definidas soluções, usando padrões de projeto (<i>design patterns</i>), correlacione as colunas a seguir:<br><br><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/24248/Imagem%20042.jpg\"><br><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/24248/Imagem%20043.jpg\"><br><br>Está <b>CORRETA </b>a seguinte sequência de respostas, de cima para baixo:<br> ",
		"options": [
			"II, IV, III, I.",
			"IV, II, I, III.",
			"I, II, III, IV.",
			"II, IV, I, III."
		],
		"answer": "A"
	},
	{
		"enunciation": " Relacione os padrões de projeto às suas indicações de uso.<br><br>I - Ponte <br>II - Observador <br>III - Decorador <br>P - Mostra como adicionar responsabilidades aos objetos dinamicamente. <br>Q - Separa a abstração de um objeto de sua implementação. <br>R - Define e mantém dependência entre objetos. <br>S - Define um objeto que encapsula como um conjunto de objetos que interagem.<br>As associações corretas são:<br> ",
		"options": [
			"I - P , II - Q , III - R",
			"I - Q , II - P , III - S",
			"I - Q , II - R , III - P",
			"I - R , II - P , III - S",
			"I - S , II - R , III - Q"
		],
		"answer": "C"
	},
	{
		"enunciation": " Em uma aplicação para gerenciamento de currículos profissionais, deve haver uma funcionalidade para pesquisa (busca) por informações previamente registradas. Essa funcionalidade deve ser apresentada aos usuários como um formulário da interface gráfica da aplicação cuja composição deve ser diferente em cada uma das seguintes situações. Na primeira, o formulário deve apresentar ao usuário campos que permitam realizar buscas por empresas que oferecem vagas de emprego. Na segunda situação, o formulário deve apresentar campos para permitir aos usuários a realização de buscas por currículos de candidatos a vagas de emprego. O engenheiro de software, encarregado da implementação dessa funcionalidade, decidiu usar um padrão de projeto do catálogo GoF (Gang of Four). Esse padrão foi escolhido porque permite construir produtos com diferentes representações de tal forma que o mesmo processo de construção possa ser usado para criar diferentes produtos. No caso da funcionalidade descrita acima, os diferentes produtos a serem criados são as duas variantes do formulário de busca.<br><br>Dentre os listados abaixo, qual foi o padrão escolhido pelo engenheiro de software?<br> ",
		"options": [
			"Abstract Factory",
			"Bridge",
			"Builder",
			"Mediator",
			"Prototype"
		],
		"answer": "C"
	},
	{
		"enunciation": " Para fazer a modelagem de um padrão de projeto (<i>design pattern</i>) utilizando a UML é DESNECESSÁRIO<br> ",
		"options": [
			"entender o padrão de projeto como uma colaboração representada com suas partes estruturais e comportamentais.",
			"fazer a modelagem do mecanismo como uma colaboração, fornecendo seus aspectos estruturais, assim como os aspectos comportamentais.",
			"identificar as soluções específicas e particulares para o problema básico e reificá-la como um mecanismo.",
			"identificar os elementos do padrão de projeto que devem ser vinculados aos elementos em um contexto específico e representá-los como parâmetros para colaboração.",
			"identificar as soluções comuns para o problema básico."
		],
		"answer": "C"
	},
	{
		"enunciation": " Em relação aos padrões de projeto de <i>software</i> assinale a alternativa correta. <br><br> ",
		"options": [
			"<i>Singleton</i> é um padrão utilizado quando se deseja separar a construção de um objeto complexo de sua representação de modo que o mesmo processo de construção possa criar diferentes representações. <br>",
			"<i>Builder</i> é um padrão utilizado quando se deseja especificar os tipos de objetos a serem criados usando uma instância protótipo e criar novos objetos pela cópia desse protótipo. <br>",
			"<i>Adapter</i> é um padrão utilizado quando se deseja desacoplar uma abstração de sua implementação, de modo que as duas possam variar independentemente. <br>",
			"<i>Factory Method</i> é um padrão utilizado quando se deseja definir uma interface para criar um objeto e deixar as subclasses decidirem que classe instanciar. <br>",
			"<i>Proxy</i> é um padrão utilizado quando se quer garantir que uma classe tenha somente uma instância e fornecer um ponto global de acesso a mesma. <br>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Os padrões de projeto orientados a objeto podem ter finalidade de criação, estrutural ou comportamental. Os padrões de criação se preocupam com o processo de criação de objetos. Os padrões estruturais lidam com a composição de classes ou de objetos. Os padrões comportamentais caracterizam as maneiras pelas quais classes ou objetos interagem e distribuem responsabilidades. Assinale a alternativa que apresenta apenas padrões de projeto comportamentais. <br><br> ",
		"options": [
			"<i>Prototype, Abstract Factory e Builder. </i>",
			"<i>Singleton, Composite e Interpreter. </i>",
			"<i>Mediator, Interpreter e Command. </i>",
			"<i>Composite, Decorato e Proxy. </i>",
			"<i>Proxy, Builder e Mediator. </i>"
		],
		"answer": "C"
	},
	{
		"enunciation": " Descrição de conhecimento e experiência acumulados, uma solução bem-sucedida para um problema. Capta a experiência de uma maneira possível de ser reusada por outros. <br><br>Qual opção abaixo corresponde à descrição anterior? <br> ",
		"options": [
			"Framework",
			"Linha de produto de software",
			"Gerador de programa",
			"Desenvolvimento baseado em componentes",
			"Padrão de projeto"
		],
		"answer": "E"
	},
	{
		"enunciation": " Definir um objeto que encapsula a forma como um conjunto de objetos interage. Promove o acoplamento fraco ao evitar que os objetos se refiram uns aos outros explicitamente. <br><br>Qual opção abaixo corresponde à descrição anterior? <br> ",
		"options": [
			"Intenção do padrão de projeto proxy",
			"Intenção do padrão de projeto composite",
			"Intenção do padrão de projeto strategy",
			"Intenção do padrão de projeto command",
			"Intenção do padrão de projeto mediator"
		],
		"answer": "E"
	},
	{
		"enunciation": " Definir uma interface para criar um objeto, mas deixar as subclasses decidirem que classe instanciar. Permite adiar a instanciação para subclasses. <br><br>Qual opção abaixo corresponde à descrição anterior?<br> ",
		"options": [
			"Intenção do padrão de projeto builder",
			"Intenção do padrão de projeto factory method",
			"Intenção do padrão de projeto abstract factory",
			"Intenção do padrão de projeto strategy",
			"Intenção do padrão de projeto composite"
		],
		"answer": "B"
	},
	{
		"enunciation": " Considere os padrões de projeto divididos de acordo com as camadas a que eles pertencem. A camada de apresentação contém os padrões relacionados aos <i>Servlets </i>e páginas JSP. São padrões dessa camada: ",
		"options": [
			"<i>value list handler e dispatcher view. </i>",
			"<i>composite view e intercepting filter. </i>",
			"<i>data access object e composite entity. </i>",
			"<i>service activator e session façade.</i>",
			"<i>composite entity e value list handler. </i>"
		],
		"answer": "B"
	},
	{
		"enunciation": " Padrão que encapsula a lógica de apresentação de dados de negócios dinâmicos ou, ainda, especifica que são usa- dos ajudantes para adaptar os dados do modelo para a camada de apresentação da aplicação. Trata-se de ",
		"options": [
			"<i>view helper. </i>",
			"<i>dispatcher view. </i>",
			"<i>business delegate. </i>",
			"<i>data access object.</i>",
			"<i>front controller. </i>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Sobre padrões de projeto, é correto afirmar que<br> ",
		"options": [
			"<i>Façade</i> é um padrão comportamental que disponibiliza uma interface única para acessar funcionalidades implementadas por diferentes classes.",
			"<i>Composite</i> é um padrão estrutural utilizado para representar um objeto que é constituído pela composição de objetos similares a ele.",
			"<i>Command </i>é um padrão comportamental usado para permitir que um objeto altere o seu comportamento quando o seu estado muda.",
			"<i>Singleton</i> é um padrão comportamental que permite a separação da construção de um objeto complexo da sua representação, de forma que o mesmo processo de construção possa criar diferentes representações.",
			"<i>Strategy </i>é um padrão que define uma dependência um-para-muitos entre objetos, de modo que, quando um objeto muda o estado, todos seus dependentes sejam notificados e atualizados automaticamente."
		],
		"answer": "B"
	},
	{
		"enunciation": " O diagrama de classes apresentado na figura a seguir não representa fielmente um <i>buffer</i> que passa por estados sucessivos de transformação. Em outras palavras, um <i>buffer</i>, que está inicialmente vazio, depois pode ficar parcialmente cheio e, possivelmente, pode ficar cheio. Dentre as opções apresentadas a seguir, qual o padrão de projetos que melhor se adequaria para modelar essa característica dinâmica do <i>buffer</i>?<br><br><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/23614/Imagem%20009.jpg\"><br> ",
		"options": [
			"Singleton.",
			"Dynamic behavior.",
			"Mediator.",
			"Composite.",
			"State."
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão <i>Observer </i><br> ",
		"options": [
			"usa os gerenciadores de layout predefinidos para controlar a interface gráfica.",
			"usa o conceito de ouvintes (<i>listeners</i>) para notificá-los quando algo acontece a sua fonte de eventos (um botão por exemplo).",
			"provê o serviço <i> publish/subscribe </i>de notificação entre objetos.",
			"usa a arquitetura “modelo-visão-controlador” para manter a consistência entre várias visões de um mesmo objeto.",
			"é utilizado para a representação gráfica de um objeto."
		],
		"answer": "C"
	},
	{
		"enunciation": " <p>Acerca de arquitetura orientada a serviços (SOA), análise de pontos de função e padrões de projeto, julgue o item a seguir. </p><p><br></p><p> O <i> template method </i>se aplica primariamente às classes, sendo um padrão de projeto com finalidade comportamental, ou seja, caracterizado pela maneira como as classes interagem e distribuem responsabilidades. </p> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Relacione os padrões de projetos listados abaixo com suas respectivas finalidades:<br><br><b>Padrões de Projetos </b><br><br>1. Facade (fachada) <br>2. Decorator (decorador) <br>3. Memento (lembrança) <br>4. Proxy (procurador) <br>5. Observer (observador) <br><br><b>Finalidades </b><br><br>( ) Define uma dependência um para muitos entre objetos tal que, quando o estado de um objeto muda, todos os seus dependentes são notificados e atualizados automaticamente. <br>( ) Fornece uma interface unificada para um conjunto de objetos que constituem um subsistema. Define uma interface de mais alto nível que torna o subsistema mais fácil de usar. <br>( ) Sem violar o encapsulamento, captura e exterioriza o estado interno de um objeto, tal que o objeto possa ser restaurado a este estado mais tarde. <br>( ) Acrescenta responsabilidades adicionais a um objeto dinamicamente. Fornece uma alternativa flexível para a extensão de funcionalidade. <br>( ) Controla o acesso a um objeto através de outro objeto, que atua como seu substituto, ou como um envoltório. <br><br>Assinale a alternativa que indica a sequência <b>correta</b>, de cima para baixo. ",
		"options": [
			"1 – 5 – 3 – 4 – 2",
			"3 – 1 – 5 – 2 – 4",
			"3 – 5 – 1 – 4 – 2",
			"5 – 1 – 3 – 2 – 4",
			"5 – 1 – 3 – 4 – 2"
		],
		"answer": "D"
	},
	{
		"enunciation": " São exemplos de aplicação do padrão de projeto “Façade”, EXCETO: ",
		"options": [
			"quando você não precisa utilizar toda a funcionalidade de um sistema complexo e cria uma nova classe que contenha todas as regras para acessar esse sistema.",
			"se você deseja encapsular ou esconder o sistema original.",
			"quando você deseja utilizar a funcionalidade do sistema original e também adicionar alguma nova funcionalidade.",
			"se o custo de escrever essa nova classe é menor do que o de todos terem de aprender como utilizar o sistema original ou de gastar em manutenção no futuro.",
			"quando você deseja converter a interface de uma classe em outra interface que os clientes desejam."
		],
		"answer": "E"
	},
	{
		"enunciation": " A opção que contém somente padrões de projetos que tratamde comportamento é: ",
		"options": [
			"COMPOSITE, ITERATOR,DECORATOR e BUILDER.",
			"MEDIATOR, PROXY, PROTOTYPE e BUILDER.",
			"OBSERVER, STRATEGY, PROXY e SINGLETON.",
			"BRIDGE,COMPOSITE, ITERATOR e OBSERVER.",
			"INTERPRETER,MEDIATOR,MEMENTO e STATE."
		],
		"answer": "E"
	},
	{
		"enunciation": " Em relação aos padrões de projeto, é a categoria de padrões que atribui responsabilidade a objetos: ",
		"options": [
			"comportamentais;",
			"estruturais;",
			"criação;",
			"interface gráfica;",
			"casos de uso."
		],
		"answer": "A"
	},
	{
		"enunciation": " O procedimento de notificação de eventos utilizado em componentes Java Swing, tal como o JButton, é um exemplo de aplicação de qual dos Padrões de Projeto a seguir? ",
		"options": [
			"Factory Method.",
			"Observer.",
			"Strategy",
			"State.",
			"Iterator."
		],
		"answer": "B"
	},
	{
		"enunciation": " Na UML, o padrão Singleton (GoF) pode ser visto como na classe abaixo: <br><br><img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/22921/Imagem%20008.jpg\"><br><br>Sobre o padrão de projeto Singleton, assinale a alternativa <b>INCORRETA: </b> ",
		"options": [
			"o número 1 no canto superior da classe pode ser utilizado opcionalmente para indicar que esta classe terá apenas uma única instância.",
			"para se implementar o padrão <i>Singleton</i> na classe acima, esta deverá possuir um método construtor <i>ServicesFactory() </i>privado.",
			"caso uma subclasse estenda a classe <i>ServicesFactory</i> através de herança, o método getInstance() deverá ser sobrescrito (<i>override) </i>para construir a subclasse.",
			"o método <i> getInstance</i>() deverá ser obrigatoriamente declarado como um método estático (<i>static</i>)."
		],
		"answer": "C"
	},
	{
		"enunciation": " Segundo Trott e Shalloway, o princípio de projetar a partir de um contexto, é um conceito para criar a visão global antes de se projetar os detalhes que aparecem nos componentes. Das opções seguintes, o padrão de projeto que é um melhor exemplo de aplicação desse princípio é: ",
		"options": [
			"bridge.",
			"abstract factory.",
			"adapter.",
			"faça de.",
			"canvas."
		],
		"answer": "A"
	},
	{
		"enunciation": " Assinale a opção correta com referência aos padrões comportamentais e aos padrões GRASP. ",
		"options": [
			"Padrões comportamentais distribuem responsabilidade pela instanciação de objetos entre seus participantes, da mesma forma que nos padrões GRASP.",
			"Em padrões comportamentais, a distribuição de comportamento entre classes é feita por meio de delegação.",
			"Um comando, participante do padrão <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/23244/Imagem%20059.jpg\"> herda de um <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/23244/Imagem%20060.jpg\">",
			"O padrão GRASP denominado <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/23244/Imagem%20061.jpg\"> é um padrão avaliativo que dita como atribuir responsabilidades a um desenho orientado a objeto visando obter baixo acoplamento.",
			"Todo <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/23244/Imagem%20062.jpg\"> que participa de uma aplicação do padrão <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/23244/Imagem%20063.jpg\"> está associado a um <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/23244/Imagem%20064.jpg\">"
		],
		"answer": "E"
	},
	{
		"enunciation": " Acerca dos padrões de criação e de padrões estruturais, assinale a opção correta. ",
		"options": [
			"O padrão adaptador de classe <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/23244/Imagem%20058.jpg\"> facilita acomodar a adaptação de subclasses de uma classe previamente adaptada.",
			"Uma das consequências do uso do padrão Prototype é o aumento no uso de subclasses.",
			"O uso do padrão<i> singleton </i>apresenta como consequências uma redução do uso de variáveis globais e uma melhor organização do espaço de nomes de um <i>software</i> orientado a objetos.",
			"São exemplos de padrões estruturais: Adapter, Façade, Proxy, Composite, Decorator e Chain of Responsibility.",
			"São participantes do padrão Façade: o cliente, o alvo, o adaptador e o adaptado."
		],
		"answer": "C"
	},
	{
		"enunciation": " <b>A respeito de desenvolvimento de projetos de sistemas, julgue os itens subsequentes.</b> <br><br>No padrão de desenvolvimento modelo-visualização- controlador <b>(MVC),</b> o controlador é o elemento responsável pela interpretação dos dados de entrada e pela manipulação do modelo, de acordo com esses dados ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <b>A respeito de desenvolvimento de projetos de sistemas, julgue os itens subsequentes.</b> <br><br>O padrão <i>singleton</i> permite que uma classe Java tenha apenas uma instância e fornece múltiplos pontos de acesso à classe. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Com relação aos <i>design patterns</i>, <i>anti-patterns </i>e projetos orientados a objeto, assinale a opção correta. ",
		"options": [
			"Os <i>design patterns </i>só devem ser aplicados a arquiteturas de <i>software</i> desenvolvido com linguagem orientada a objetos, sendo exemplos de <i> patterns</i>: Abstract Factory, Singleton, Façade, Builder, Prototype etc.",
			"O projeto orientado a objetos é uma abordagem para projeto de <i>software</i> na qual os componentes da arquitetura de um <i>software</i> são representados por objetos aos quais estão associadas funções, que serão refinadas posteriormente para operações, quando da implementação do <i>software</i> em uma linguagem de programação.",
			"A evolução de um sistema de <i>software </i>é mais complexa quando se opta pelo projeto orientado a objetos.",
			"Os <i>anti-patterns </i>destacam problemas comuns que as organizações desenvolvedoras de <i> software </i>enfrentam em temas organizacionais de gestão de projeto, de desenho (<i>design</i>), de programação, de gerência de configuração, entre outros, e fornecem orientações para que esses problemas sejam reconhecidos e as suas causas subjacentes, determinadas.",
			"As classes que compõem um <i>software </i>desenvolvido segundo os princípios do projeto orientado a objetos devem ser implementadas sequencialmente, tendo em vista que, por princípio, as dependências de colaboração e responsabilidade estabelecidas entre os módulos do projeto não devem possuir ciclos."
		],
		"answer": "D"
	},
	{
		"enunciation": " Na engenharia de software, os padrões de projetos comportamentais tratam das interações e divisões de responsabilidades entre as classes ou objetos. São exemplos típicos dessa família: ",
		"options": [
			"<i>Cammand, Factory Method e Prototype. </i>",
			"<i>Builder, Prototype e Singleton. </i>",
			"<i>Chain of Responsability, Interpreter e Iterator.</i>",
			"<i>Adapter, Bridge e Façade.</i>",
			"<i>Abstract Factory, Builder e Composite.</i>"
		],
		"answer": "C"
	},
	{
		"enunciation": " No contexto dos padrões de projeto: <br><br>I. Oferecer uma interface simples para uma coleção de classes. <br><br>II. Desacoplar uma abstração de sua implementação para que ambas possam variar independentemente. <br><br>Correspondem respectivamente a ",
		"options": [
			"<i>Façade e Bridge.</i>",
			"<i>Adapter e Façade</i>.",
			"<i>Composite e Bridge. </i>",
			"<i>Façade e Composite.</i>",
			"<i>Bridge e Adapter. </i>"
		],
		"answer": "A"
	},
	{
		"enunciation": " Considerando os padrões de projetos (<i>design patterns</i>) da engenharia de software que utilizam as melhores práticas em orientação a objetos para atingir os resultados desejados, é correto afirmar que o padrão ",
		"options": [
			"<i>decorator</i> é utilizado para prover uma maneira de acessar os elementos de um objeto agregado sequencialmente sem expor sua representação interna.",
			"<i>bridge</i> é utilizado para desacoplar uma abstração de sua implementação para que os dois possam variar independentemente.",
			"<i>composite </i>é utilizado para oferecer uma interface única para um conjunto de interfaces de um subsistema, definindo uma interface de nível mais elevado que torna o subsistema mais fácil de usar.",
			"<i>memento</i> permite definir uma nova operação, sem mudar as classes dos elementos nos quais opera.",
			"<i>aggregator </i> é utilizado para compor objetos em estruturas de árvore, para representar hierarquias."
		],
		"answer": "B"
	},
	{
		"enunciation": " Acerca dos padrões de projeto, julgue o próximo item.<br><br>Os padrões de projeto podem ser definidos como soluções já testadas para problemas que ocorrem frequentemente durante o projeto de <i>software. </i> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " O catálogo de padrões de projeto (<i>design patterns</i>) do GoF contém ",
		"options": [
			"20 padrões e está basicamente dividido em duas seções: <i>Structural e Behavioral.</i>",
			"21 padrões e está basicamente dividido em duas seções: <i>Creational e Behavioral.</i>",
			"23 padrões e está basicamente dividido em duas seções: <i>Structural </i>e <i>Behavioral.</i>",
			"23 padrões e está, basicamente, dividido em três seções: <i>Creational, Structural </i>e <i>Behavioral.</i>",
			"24 padrões e está basicamente dividido em três seções:<i> Creational</i>, <i>Spectral</i> e <i>Behavioral.</i>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Julgue os itens que se seguem a respeito dos padrões de desenho e outras técnicas para reúso de software.<br><br>Os padrões:<i> Controller</i>; Polimorfismo; e <i>Information Expert</i>, são considerados do tipo GRASP porque cada um embute uma forma de atribuição de responsabilidades a objetos. No caso do<i> Controller</i>, a responsabilidade é concernente ao tratamento de eventos. No caso do Polimorfismo, a responsabilidade é concernente à variação de comportamento, conforme o tipo do objeto. No caso do <i>Information Expert</i>, a responsabilidade concerne à disponibilidade de informações que permitem o desempenho de uma responsabilidade. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Considere: <br><br>I. Fornecer uma interface para criação de famílias de objetos relacionados ou dependentes, sem especificar suas classes concretas. Possibilitar o adiamento da instanciação para as subclasses. <br><br>II. Garantir a existência de apenas uma instância de uma classe, mantendo um ponto global de acesso ao seu objeto. <br><br>III. Possibilitar o armazenamento do estado interno de um objeto em um determinado momento, para que seja possível retorná-lo a este estado, caso necessário. <br><br>I, II e III são, respectivamente, objetivos dos <i>design patterns </i>intitulados: ",
		"options": [
			"<i>Interpreter, Iterator e Memento.</i>",
			"<i>Command, Singleton e Iterator</i>.",
			"<i>Factory Method, Singleton e Memento.</i>",
			"<i>Iterator, Factory Method e Flyweight.</i>",
			"<i>Singleton, Flyweight e Command.</i>"
		],
		"answer": "C"
	},
	{
		"enunciation": " Os padrões Facade e Adapter são úteis para fornecer uma camada de isolamento em relação às incompatibilidades entre múltiplos navegadores. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " <i>Creational Pattern </i>Java que tem por objetivo separar a construção de um objeto complexo da sua representação, de tal forma que diversas representações podem ser criadas em razão da necessidade do programa. Trata-se de ",
		"options": [
			"<i>Flyweight pattern.</i>",
			"<i>Builder pattern.</i>",
			"<i>Prototype pattern.</i>",
			"<i>Singleton pattern.</i>",
			"<i>Bridge pattern.</i>"
		],
		"answer": "B"
	},
	{
		"enunciation": " GRASP (<i>general responsibility assignment software patterns</i>) consiste em um conjunto de sete padrões básicos para atribuir responsabilidades em projeto orientado a objetos: <i>information expert, creator, controller, low coupling, high cohesion, polymorphism e pure fabrication.</i> ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Sobre design pattern considere: <br><br>I. No framework pode incluir código de programação e conter vários design patterns. <br><br>II. No design pattern pode incluir código de programação e conter vários frameworks. <br><br>III. Os design patterns são bastante abstratos e os frameworks menos abstratos. <br><br>Está correto o que consta em ",
		"options": [
			"I e III, apenas.",
			"I e II, apenas.",
			"II e III, apenas.",
			"III, apenas.",
			"I, II e III."
		],
		"answer": "A"
	},
	{
		"enunciation": " Assinale a alternativa que apresente apenas padrões de projeto utilizados na camada de apresentação no desenvolvimento de aplicações J2EE. ",
		"options": [
			"Composite View, Context Object, Data Access Object, Composite Entity.",
			"Service Locator, Business Delegate, Business Object, Composite Entity.",
			"Application Controller, Intercepting Filter, Context Object, Composite View.",
			"Intercepting Filter, Business Delegate, Service Locator, Data Access Object.",
			"Application Controller, Composite View, Service Locator , Business Delegate."
		],
		"answer": "C"
	},
	{
		"enunciation": " Em relação a padrões de projeto de software, assinale a afirmativa <b>incorreta</b>. ",
		"options": [
			"Builder é um padrão utilizado quando se deseja separar a construção de um objeto complexo de sua representação de modo que o mesmo processo de construção possa criar diferentes representações.",
			"Factory Method é um padrão utilizado quando se deseja definir uma interface para criar um objeto e deixar as subclasses decidirem que classe instanciar.",
			"Adapter é um padrão utilizado quando se deseja converter a interface de uma classe em outra interface, esperada pelos clientes.",
			"Singleton é um padrão utilizado quando se deseja compor objetos em estrutura de árvore para representarem hierarquias partes-todo.",
			"Proxy é um padrão também conhecido como surrogate utilizado quando se deseja fornecer um substituto ou marcador da localização de outro objeto para controlar o acesso ao mesmo."
		],
		"answer": "D"
	},
	{
		"enunciation": " Acerca desses padrões, avalie:<br><br>I. Em termos de padrões de criação de projetos, algumas classes, tais como um <i>spooler </i>de impressão ou um sistema de arquivos, devem ser instanciadas uma única vez e prover um ponto de acesso global a esta instância.<br><br>II. Pertencente ao grupo de padrões estruturais, é utilizado para permitir que dois objetos se comuniquem mesmo que tenham interfaces incompatíveis.<br><br>III. Encapsula uma requisição como um objeto, permitindo que os clientes parametrizem diferentes requisições e filas, ou façam o registro de log de requisições e dêem suporte a operações que podem ser desfeitas.<br><br>IV. Atribuir a responsabilidade do tratamento de um evento do sistema a uma classe que representa o próprio sistema ou à classe que representa um caso de uso.<br><br>As proposições correspondem, respectivamente, aos padrões ",
		"options": [
			"Singleton, Adapter, Command e Controller.",
			"Command, Iterator, Singleton e Expert.",
			"Façade, Iterator, Expert e Adapter.",
			"Controller, Expert, Singleton e Prototype.",
			"Adapter, Façade, Command e Iterator."
		],
		"answer": "A"
	},
	{
		"enunciation": " <img src=\"https://s3.amazonaws.com/qcon-assets-production/images/provas/832/Imagem%20008.jpg\"><br><br>Analise:<br><br>I. É o responsável pela especificação dos tipos de objetos a serem criados usando uma \"instância\" prototípica e pela criação de novos objetos copiando este protótipo.<br><br>II. Define uma interface de nível mais alto que torna o subsistema mais fácil de usar e fornece uma interface única para um subsistema com diversas interfaces; compõe o grupo de padrões estruturais.<br><br>III. Integrante do grupo de padrões comportamentais, ele provê uma forma de acessar sequencialmente os elementos de um agregado de objetos, sem expor a representação interna desse agregado.<br><br>IV. As consequências do uso deste padrão é que o encapsulamento é mantido, já que objetos usam sua própria informação para cumprir responsabilidades; leva ao fraco acoplamento entre objetos e à alta coesão, uma vez que objetos fazem tudo que é relacionado à sua própria informação.<br><br>As afirmações correspondem, respectivamente, aos padrões ",
		"options": [
			"<i>Command, Iterator, Singleton e Expert.</i>",
			"<i>Controller, Expert, Singleton e Prototype.</i>",
			"<i>Command, Singleton, Controller e Façade.</i>",
			"<i>Prototype, Façade, Iterator e Expert.</i>",
			"<i>Adapter, Façade, Command e Iterator.</i>"
		],
		"answer": "D"
	},
	{
		"enunciation": " Em um sistema de software para controlar pedidos para entrega em domicílio, deve haver uma funcionalidade que permita que o atendente solicite a repetição de um pedido anteriormente feito por um cliente. O gerente do restaurante informou que essa funcionalidade aumentaria a agilidade no atendimento aos clientes, visto que muitos deles tendem a fazer pedidos similares aos que já fizeram anteriormente. Ao usar essa funcionalidade, o atendente do restaurante seleciona um pedido cuja composição corresponde a produtos normalmente requisitados pelos clientes e solicita ao sistema a construção de um novo pedido igual ao selecionado. Esse novo pedido pode, então, ser alterado pelo atendente se o cliente solicitar a adição de novos produtos do cardápio, por exemplo. Portanto, a parte principal dessa funcionalidade corresponde a criar uma cópia de um pedido a partir de pedido preexistente. Na implementação dessa funcionalidade, seu desenvolvedor deve utilizar qual padrão de projeto do catálogo GoF (Gang of Four), dentre os listados abaixo? ",
		"options": [
			"Builder.",
			"Factory Method.",
			"Command.",
			"Abstract Factory.",
			"Prototype."
		],
		"answer": "E"
	},
	{
		"enunciation": " Um dos participantes da equipe de desenvolvimento de um framework deve implementar uma operação em uma das classes desse framework. Seja X o nome dessa classe. Essa operação implementa um algoritmo em particular. Entretanto, há passos desse algoritmo que devem ser implementados pelos usuários do framework através da definição de uma subclasse de X. Sendo assim, qual o padrão de projeto do catálogo GoF (Gang of Four) a ser usado pelo desenvolvedor do framework na implementação da referida operação, dentre os listados a seguir? ",
		"options": [
			"Singleton.",
			"Decorator.",
			"Interpreter.",
			"Template Method.",
			"Observer."
		],
		"answer": "D"
	},
	{
		"enunciation": " Os padrões de projeto podem ser usados no projeto orientado a objetos para apoiar o reúso de software. Esses padrões freqüentemente empregam a herança e o polimorfismo para prover generalidade. Abstract factory, strategy e template method são padrões de projeto que podem ser empregados nos frameworks orientados a objetos para facilitar a adaptação dos frameworks. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Muitos frameworks utilizam um padrão de projeto (design pattern) que se baseia no princípio de projeto \"Não nos chame, nós iremos chamar você\" (O Princípio de Hollywood: \"Don't call us, we'll call you.\"). Uma classe da aplicação herda de uma classe do framework que possui métodos abstratos, os quais são chamados em outros métodos concretos. A classe da aplicação sobrepõe os métodos abstratos da classe do framework com métodos concretos, permitindo que os métodos concretos da classe do framework sejam chamados. O padrão de projeto (design pattern) em questão chama-se ",
		"options": [
			"Strategy",
			"Singleton",
			"Decorator",
			"Abstract Factory",
			"Template Method"
		],
		"answer": "E"
	},
	{
		"enunciation": " O padrão de projeto orientado a objetos denominado singleton exprime o fenômeno recorrente na análise que é a existência de muitas aplicações nas quais há um objeto que é a única instância de sua classe. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " \"Classes devem estar abertas para extensão e fechadas para modificação\" é um princípio de projeto de modelos orientados a objetos. Tal princípio pode ser aplicado através do padrão de projeto ",
		"options": [
			"decorator.",
			"flyweight.",
			"prototype.",
			"singleton.",
			"builder."
		],
		"answer": "A"
	},
	{
		"enunciation": " O uso de padrões de projeto somente pode ser aplicado a projetos que implementam o paradigma de programação orientada a objetos. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Em um ciclo de vida, com base em componentes de <i>software</i>, as atividades de busca, avaliação, adaptação e testes de componentes ocorrem basicamente após as fase de desenho e antes da fase de testes do sistema de <i>software</i>. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " O uso de <i>software </i>externamente disponível não é parte de uma abordagem de linha de produtos, uma vez que a mesma é baseada na criação de uma biblioteca de componentes reusáveis pela própria organização que adota a abordagem. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Na arquitetura de sistemas de mensageria, um dos padrões bastante utilizados é o <i>Publish-Subscribe</i>, que possui maior similaridade com o padrão Observer que com o padrão <i>Iterator</i>. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " O uso do padrão <i>Command </i>apresenta consequências como um objeto <i>Command </i>é usualmente refratário ao enfileiramento; um objeto <i>Command </i>é usualmente transiente, isto é, não é passível de serialização e o uso disseminado de <i>Commands </i>dificulta a estruturação de um sistema em operações de alto nível. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Alguns dos usos típicos do padrão <i>Façade </i>são a unificação das várias interfaces de um sistema complexo; a construção de pontos de entrada para cada uma das múltiplas camadas de um sistema; a redução de dependências entre um cliente e múltiplas classes de implementação e o encapsulamento de todas as demais interfaces públicas de um sistema. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Uma das vantagens do padrão <i>Prototype </i>é o reúso de memória possível por meio do compartilhamento de vários objetos por meio de múltiplas interfaces. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Ao consultar informações a respeito dos padrões de projeto Adapter e Bridge, um Analista de Sistemas identificou uma afirmativa <b>INCORRETA</b>. Assinale-a. ",
		"options": [
			"Ambos promovem a flexibilidade ao fornecer um nível de endereçamento indireto para outro objeto.",
			"Ambos são padrões estruturais que possuem alguns atributos em comum.",
			"O foco do Adapter é a solução de incompatibilidades entre duas interfaces existentes.",
			"O Adapter é inferior ao Bridge porque não evita a replicação de código.",
			"O Bridge estabelece uma ponte entre uma abstração e suas possíveis implementações."
		],
		"answer": "D"
	},
	{
		"enunciation": " O presidente de uma empresa determinou que fosse disponibilizado um sistema de vendas na Internet. No entanto, o software de controle de estoque que deve ser acessado pela aplicação de vendas é muito antigo e provê uma API (<i>Application Programming Interface</i>) de uso muito complicado. Para que os desenvolvedores possam acessar uma interface mais simples, o arquiteto do sistema pode determinar o uso do padrão de projeto ",
		"options": [
			"Prototype.",
			"Decorator.",
			"Observer.",
			"Façade.",
			"Flyweight."
		],
		"answer": "D"
	},
	{
		"enunciation": " Sobre o padrão arquitetural Gateway de linha de dados (<i>Row Data Gateway</i>), é <b>INCORRETO </b>afirmar que ",
		"options": [
			"é restrito a linguagens de programação que suportam herança múltipla.",
			"mantém os valores de suas propriedades ao longo do seu ciclo de vida.",
			"contém uma instância por registro da tabela de banco de dados.",
			"interage bem com o padrão Roteiro de Transação (<i>Transaction Script</i>).",
			"pode fazer conversões de tipos de dados de inteiro para string."
		],
		"answer": "A"
	},
	{
		"enunciation": " Por motivo de segurança, deseja-se adicionar registro (log) das operações efetuadas no sistema de contabilidade de uma empresa. O arquiteto do sistema decide que deve existir somente uma instância de uma classe de registro (log) e que esta será o ponto de acesso global para os demais componentes do sistema. Que padrão de projeto pode ser utilizado nesse caso? ",
		"options": [
			"Iterator.",
			"Visitor.",
			"Bridge.",
			"Memento.",
			"Singleton."
		],
		"answer": "E"
	},
	{
		"enunciation": " Considere as seguintes assertivas sobre as vantagens do uso de padrões de software (software patterns):<br><br>I. Padrões de projeto proporcionam um vocabulário comum de projeto, facilitando comunicação, documentação e aprendizado dos sistemas de software. <br>II. Padrões de projeto auxiliam no desenvolvimento de software por meio da reutilização do projeto de soluções computacionais já testadas e aprovadas. <br>III. Uma biblioteca de padrões pode ajudar a melhorar e padronizar o desenvolvimento de software.<br><br>As assertivas corretas são: ",
		"options": [
			"somente II.",
			"somente I e II.",
			"somente I e III.",
			"somente II e III.",
			"I, II e III."
		],
		"answer": "E"
	},
	{
		"enunciation": " Adapter é um padrão estrutural utilizado para compatibilizar interfaces de modo que elas possam interagir. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Expert é um padrão que apresenta uma interface para várias funcionalidades de uma API de maneira simples e fácil de usar. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " No polimorfismo, que é um tipo de padrão GRASP, um mesmo método pode apresentar várias formas. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Alguns padrões de criação como o Prototype, o Proxy e o Façade não são adequados para a programação orientada a objetos. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " O Singleton é um padrão que garante que uma classe tenha apenas uma instância. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Sobre os design patterns, é correto afirmar: ",
		"options": [
			"Padrões e linguagens de padrões são maneiras de implementar sistemas orientados a objetos por meio da captação da experiência de programadores. Os padrões, apesar de abstratos, sempre incluem algum código de programação.",
			"São aplicações, propriamente ditas, dedicadas aos domínios de aplicações específicos, tais como sistemas de telecomunicações ou financeiros.",
			"Não são complexos e necessita-se de um tempo mínimo para aprender a usá-los.",
			"O princípio geral de englobamento de experiência em um padrão é aplicável apenas à abordagem de projeto de software orientado a objetos.",
			"O padrão é uma descrição de conhecimento e experiência acumulados, uma solução comprovada para um problema comum."
		],
		"answer": "E"
	},
	{
		"enunciation": " Caso seja verificado no desenvolvimento de um sistema forte acoplamento entre as classes, recomenda-se o uso do padrão de comportamento Factory Method, que evita o acoplamento do remetente de uma solicitação ao seu receptor, dando a mais de um objeto a oportunidade de tratar uma solicitação, mesmo nos casos em que o conjunto de objetos não seja conhecido a priori ou seja definido dinamicamente. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " No desenvolvimento de um sistema estruturado em subsistemas para facilitar o acesso e minimizar a comunicação e dependências entre os subsistemas, o padrão de criação Factory Method, que fornece uma interface para a criação de famílias de objetos relacionados ou dependentes sem especificar suas classes concretas, é mais indicado que o padrão de criação Prototype. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Se, no desenvolvimento de uma aplicação que leia documentos do tipo txt e seja capaz de converter o documento em vários formatos distintos, houver a necessidade de facilitar acréscimos de novos tipos de conversão, será mais indicado o uso do padrão de estrutura Adapter que o uso do padrão de estrutura Bridge, pois o padrão Adapter separa a construção de um objeto complexo de sua representação para criar representações diferentes com o mesmo processo. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "E"
	},
	{
		"enunciation": " Em relação aos padrões de projetos orientados a objetos, separar dados ou lógica de negócios da interface do usuário e do fluxo da aplicação para permitir que uma mesma lógica de negócios possa ser acessada e visualizada através de várias interfaces, sem saber de quantas nem quais interfaces com o usuário estão exibindo seu estado, é característica do padrão de projeto arquitetural ",
		"options": [
			"Observer.",
			"Layers.",
			"Model-View-Controller.",
			"Expert.",
			"Creator."
		],
		"answer": "C"
	},
	{
		"enunciation": " Um arquiteto de software estuda que padrões de projeto são apropriados para o novo sistema de vendas de uma empresa. Ele deve considerar que o padrão ",
		"options": [
			"Bridge separa a construção de um objeto complexo de sua representação, de modo que o mesmo processo de construção possa criar diferentes representações.",
			"Builder garante que uma classe seja instanciada somente uma vez, fornecendo também um ponto de acesso global.",
			"Singleton separa uma abstração de sua implementação, de modo que os dois conceitos possam variar de modo independente.",
			"Chain of Responsibility evita o acoplamento entre o remetente de uma solicitação e seu destinatário, dando oportunidade para mais de um objeto tratar a solicitação.",
			"Template Method utiliza compartilhamento para suportar, eficientemente, grandes quantidades de objetos de granularidade fina."
		],
		"answer": "D"
	},
	{
		"enunciation": " Conforme a nomenclatura proposta pelo GoF (gang of four) book, o nome dado ao módulo F sugere que esse módulo implementa um padrão da categoria comportamental, enquanto o nome do módulo C sugere que ele implementa um padrão da categoria estrutural ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Entre os padrões de projeto Observer, MethodFactory e Singleton, o primeiro é o que mais foi aplicado à classe Cargo. ",
		"options": [
			"Certo",
			"Errado"
		],
		"answer": "C"
	},
	{
		"enunciation": " Ao alterar o estado de uma classe, o desenvolvedor deseja que uma ou mais classes da interface gráfica sejam modificadas. Entretanto, o desenvolvedor não acha interessante criar um acoplamento forte entre essas classes. Qual padrão de projeto comportamental é mais adequado para resolver essa situação? ",
		"options": [
			"Composite",
			"Adapter",
			"Observer",
			"Abstract Factory",
			"Decorator"
		],
		"answer": "C"
	},
	{
		"enunciation": " Analise as seguintes afirmações relacionadas a padrões de projetos:<br><br>I. O padrão <em>Builder </em>separa a construção de um objeto complexo de sua representação, de modo a que o mesmo processo de construção possa criar diferentes representações.<br><br>II. O método <em>Abstract Factory </em>fornece uma interface para a criação de uma família de objetos relacionados ou dependentes sem especifi car suas classes completas.<br><br>III. O padrão <em>Bridge </em>defi ne uma interface para criar um objeto, mas deixa as subclasses decidirem que classe será instanciada. O <em>Bridge </em>permite a uma classe postergar a instanciação das subclasses.<br><br>IV. O <em>Chain of responsability </em>usa compartilhamento para suportar grandes quantidades de objetos e define uma dependência um-para-muitos entre objetos, de modo que quando um objeto muda de estado, todos os seus dependentes são automaticamente notificados e atualizados.<br><br>Indique a opção que contenha todas as afirmações verdadeiras. ",
		"options": [
			"I e III",
			"II e III",
			"III e IV",
			"I e II",
			"II e IV"
		],
		"answer": "D"
	},
	{
		"enunciation": " <p>Considere os padrões que podem ser utilizados em um projeto de software e relacione os padrões com suas respectivas intenções primárias. </p><p>Padrão <br>I - Bridge <br>II - Builder<br> III - Factory Method</p><p> Intenção primária <br>(P) Padrão estrutural cuja intenção é converter a interface de uma classe em outra interface, esperada pelos clientes, permitindo que classes com interfaces incompatíveis trabalhem em conjunto, o que, de outra forma, seria impossível. <br>(Q) Padrão estrutural cuja intenção é desacoplar uma abstração da sua implementação, de modo que as duas possam variar independentemente.<br> (R) Padrão de criação cuja intenção é separar a construção de um objeto complexo da sua representação de modo que o mesmo processo de construção possa criar diferentes representações. <br>(S) Padrão de criação cuja intenção é definir uma interface para criar um objeto, mas deixando as subclasses decidirem que classe instanciar. Ele permite adiar a instanciação para subclasses. </p><p>A relação correta é:</p> ",
		"options": [
			"I - P , II - Q , III - R",
			"I - P , II - Q , III - S",
			"I - Q , II - R , III - S",
			"I - Q , II - R , III - P",
			"I - Q , II - S , III - P"
		],
		"answer": "C"
	}
]